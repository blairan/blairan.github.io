<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>webserver控制伺服馬達-ESP32</title>
      <link href="/2021/08/30/webserver%E6%8E%A7%E5%88%B6%E4%BC%BA%E6%9C%8D%E9%A6%AC%E9%81%94-ESP32/"/>
      <url>/2021/08/30/webserver%E6%8E%A7%E5%88%B6%E4%BC%BA%E6%9C%8D%E9%A6%AC%E9%81%94-ESP32/</url>
      
        <content type="html"><![CDATA[<h1 id="webserver控制伺服馬達-ESP32"><a href="#webserver控制伺服馬達-ESP32" class="headerlink" title="webserver控制伺服馬達-ESP32"></a>webserver控制伺服馬達-ESP32</h1><p><em>伺服馬達對於微控板玩家一定是再熟悉不過，也是入門必學的元件之一，只是特別要注意如果要控制２個以上的伺服馬達，一定要使用外接電源或者PCA9685。</em></p><p><em>伺服馬達有很多款，小型常用的就屬SG-90，它是塑膠齒輪，還有一種是金屬齒輪</em></p><h2 id="伺服馬達規格"><a href="#伺服馬達規格" class="headerlink" title="伺服馬達規格"></a>伺服馬達規格</h2><h3 id="SG-90規格"><a href="#SG-90規格" class="headerlink" title="SG-90規格"></a>SG-90規格</h3><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/3986922455798592262?hl=zh-TW#"><img src="https://1.bp.blogspot.com/-nxgapjbWx68/YSXYndzzCVI/AAAAAAAAe2s/qsMvSksBD3YRlIHAnQ1wzBKyuROmzx90wCNcBGAsYHQ/w233-h233/dc05cb93dcb58dbc3887b14f60cced9f.jpg"></a></p><ul><li>  工作電壓：4.8V.</li><li>  轉矩：1.8kg-cm</li><li>  運轉速度：0.1秒∕ 60度</li><li>  轉動角度：最大90°</li><li>脈衝寬度範圍：500~2400µs.</li></ul><h3 id="MG90S規格"><a href="#MG90S規格" class="headerlink" title="MG90S規格"></a>MG90S規格</h3><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/3986922455798592262?hl=zh-TW#"><img src="https://1.bp.blogspot.com/-ClUAItIjGJ4/YSXY8XrU1pI/AAAAAAAAe20/pIH_GpNA5Cgnlsx45QZJ1nlS6Uu6_xsdACNcBGAsYHQ/w273-h273/180303000000b-800x800.jpg"></a></p><ul><li>  金屬銅齒、空心杯電機、雙滾珠軸承</li><li>  產品型號：<strong>MG90s</strong>.</li><li>  扭力：2.0kg(4.8v)</li><li>  運轉速度：0.11s(4.8v)</li><li>  轉動角度：最大90°/180°</li><li>舵機類型：數字舵機</li></ul><hr><ol><li> <em>此次實驗以MG-90為主</em></li><li> <em>要控制伺服馬達有兩種方式，一種是利用PWM，另一種是使用現有的庫包來控制，本次實驗以庫包為主</em></li></ol><h2 id="首先安裝"><a href="#首先安裝" class="headerlink" title="首先安裝"></a>首先安裝</h2><p> <a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/3986922455798592262?hl=zh-TW#">ESP32 Arduino Servo Library</a></p><h2 id="接線方式"><a href="#接線方式" class="headerlink" title="接線方式"></a>接線方式</h2><ul><li><p>  GND -&gt; ESP32 GND pin;</p></li><li><p>  Power -&gt; ESP32 VIN pin;</p></li><li><p>Signal -&gt; GPIO 13 (or any PWM pin).</p><p>  <a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/3986922455798592262?hl=zh-TW#"><img src="https://i1.wp.com/randomnerdtutorials.com/wp-content/uploads/2018/05/servo-esp32-schematic.png?w=750&quality=100&strip=all&ssl=1"></a></p></li></ul><h2 id="進行實驗"><a href="#進行實驗" class="headerlink" title="進行實驗"></a>進行實驗</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ESP32Servo.h></span></span> Servo myservo<span class="token punctuation">;</span> <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> pin <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  myservo<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>pin<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">2400</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>pos<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span> pos<span class="token operator">&lt;=</span><span class="token number">160</span><span class="token punctuation">;</span> pos<span class="token operator">+=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    myservo<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>pos<span class="token operator">=</span><span class="token number">160</span><span class="token punctuation">;</span> pos<span class="token operator">>=</span><span class="token number">20</span><span class="token punctuation">;</span> pos<span class="token operator">-=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    myservo<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="ESP32網頁伺服器"><a href="#ESP32網頁伺服器" class="headerlink" title="ESP32網頁伺服器"></a>ESP32網頁伺服器</h2><p><em>上面伺服馬達簡單的測試完成後，就可以納入網頁伺服器來控制伺服馬達，這裡我覺得有點難度的是網頁的編寫，因為寫HTML+CSS我沒學過，所以參考網路上教學文的網頁範例。</em></p><p><em>這是我參考教學網站上的網頁範例</em></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>data:,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">body</span> <span class="token punctuation">&#123;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"Trebuchet MS"</span><span class="token punctuation">,</span> Arial<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span>auto<span class="token punctuation">;</span>        <span class="token property">margin-right</span><span class="token punctuation">:</span>auto<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.slider</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>ESP32 with Servo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Position: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>servoPos<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>range<span class="token punctuation">"</span></span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slider<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>servoSlider<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onchange</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">servo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> slider <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"servoSlider"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> servoP <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"servoPos"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    servoP<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> slider<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    slider<span class="token punctuation">.</span><span class="token function-variable function">oninput</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        slider<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>        servoP<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    $<span class="token punctuation">.</span><span class="token function">ajaxSetup</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>timeout<span class="token operator">:</span><span class="token number">1000</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">servo</span><span class="token punctuation">(</span><span class="token parameter">pos</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/?value="</span> <span class="token operator">+</span> pos <span class="token operator">+</span> <span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#123;</span>Connection<span class="token operator">:</span> close<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><em>使用 script 和 /script 標籤將一些 JavaScript 代碼添加到您的 HTML 文件中。此代碼片段使用當前滑塊位置更新網頁</em></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">var slider <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"servoSlider"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>var servoP <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"servoPos"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>servoP<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> slider<span class="token punctuation">.</span>value<span class="token punctuation">;</span>slider<span class="token punctuation">.</span>oninput <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    slider<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    servoP<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下來的幾行在此特定 URL 路徑 /?value\u003d[SLIDER_POSITION]&amp; 中的 ESP IP 地址上發出 HTTP GET 請求。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">$<span class="token punctuation">.</span><span class="token function">ajaxSetup</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>timeout<span class="token operator">:</span><span class="token number">1000</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>function <span class="token function">servo</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/?value="</span> <span class="token operator">+</span> pos <span class="token operator">+</span> <span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#123;</span>Connection<span class="token operator">:</span> close<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如，當滑塊位於 0 時，您在以下 URL 上發出 HTTP GET 請求：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;192.168.1.135&#x2F;?value&#x3D;0&amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ESP32Servo.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;WiFi.h></span></span> <span class="token comment">//定義伺服馬達</span>Servo myservo<span class="token punctuation">;</span> <span class="token comment">//伺服馬達的起始值和腳位</span><span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> servoPin <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span> <span class="token comment">//WIFI</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>ssid <span class="token operator">=</span> <span class="token string">"---"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>password <span class="token operator">=</span> <span class="token string">"-----"</span><span class="token punctuation">;</span><span class="token comment">//將 Web 服務器端口號設置為 80</span>WiFiServer <span class="token function">server</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//用於存儲 HTTP 請求的變量</span>String header<span class="token punctuation">;</span> <span class="token comment">//解碼 HTTP GET 值</span>String valueString <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> pos1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> pos2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 當下的時間</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> currentTime <span class="token operator">=</span> <span class="token function">millis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 之前的時間</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> previousTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 超時</span><span class="token keyword">const</span> <span class="token keyword">long</span> timeoutTime <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//指定伺服器上的pin</span>  myservo<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>servoPin<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">2400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//連接wifi</span>  WiFi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span>ssid<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>WiFi<span class="token punctuation">.</span><span class="token function">isConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Connected successful!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"IP: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>WiFi<span class="token punctuation">.</span><span class="token function">localIP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//連接伺服器</span>  server<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//監聽客戶端傳入的資料</span>  WiFiClient client <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//如果有新客戶端連接進來,</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    currentTime <span class="token operator">=</span> <span class="token function">millis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    previousTime <span class="token operator">=</span> currentTime<span class="token punctuation">;</span>    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"New Client."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//製作一個字符串來保存來自客戶端的傳入數據</span>    String currentLine <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">connected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>currentTime <span class="token operator">-</span> previousTime <span class="token operator">&lt;=</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      currentTime <span class="token operator">=</span> <span class="token function">millis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//如果有字節要從客戶端讀取，</span>        <span class="token keyword">char</span> c <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//讀取字節</span>        Serial<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//印到序列監測窗口</span>        header <span class="token operator">+=</span> c<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//如果字節是換行符 //如果當前行為空，則表示一行中有兩個換行符。</span>          <span class="token comment">//這是客戶端 HTTP 請求的結束，因此發送響應：</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>currentLine<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HTTP/1.1 200 OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Content-type:text/html; charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Connection: close"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//接下來就是顯示網頁</span>            client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;!DOCTYPE html>&lt;html>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;head>&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;link rel=\"icon\" href=\"data:,\">"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;style>body &#123; text-align: center; font-family: \"Trebuchet MS\", Arial; margin-left:auto; margin-right:auto;&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">".slider &#123; width: 300px; &#125;&lt;/style>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\">&lt;/script>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token comment">// Web Page</span>            client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;/head>&lt;body>&lt;h1>ESP32 控制伺服馬達練習&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;p>Position: &lt;span id=\"servoPos\">&lt;/span>&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;input type=\"range\" min=\"0\" max=\"180\" class=\"slider\" id=\"servoSlider\" onchange=\"servo(this.value)\" value=\""</span><span class="token operator">+</span>valueString<span class="token operator">+</span><span class="token string">"\"/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;script>var slider = document.getElementById(\"servoSlider\");"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"var servoP = document.getElementById(\"servoPos\"); servoP.innerHTML = slider.value;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"slider.oninput = function() &#123; slider.value = this.value; servoP.innerHTML = this.value; &#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"$.ajaxSetup(&#123;timeout:1000&#125;); function servo(pos) &#123; "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"$.get(\"/?value=\" \+ pos + \"&amp;\"); &#123;Connection: close&#125;;&#125;&lt;/script>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;/body>&lt;/html>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//GET /?value=180&amp; HTTP/1.1</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"GET /?value="</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              pos1 <span class="token operator">=</span> header<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              pos2 <span class="token operator">=</span> header<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//取得=和&amp;之中的字節</span>              valueString <span class="token operator">=</span> header<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>pos1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> pos2<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">//轉換成整數後傳入伺服馬達令其動作</span>              myservo<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>valueString<span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>valueString<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>                     <span class="token comment">// The HTTP response ends with another blank line</span>            client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">//如果有一個換行符，就清除 currentLine</span>            currentLine <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token string">'\r'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//否則如果除了enter以外還有別的字串,把它加入currentLine末端</span>          currentLine <span class="token operator">+=</span> c<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 將header清空</span>    header <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">// 關閉連結</span>    client<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Client disconnected."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="video-container"><iframe src="https://www.youtube.com/embed/noDl7zL7hIM" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> servo </tag>
            
            <tag> 伺服馬達 </tag>
            
            <tag> webserver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webServer控制neopixel燈條-ESP32</title>
      <link href="/2021/08/30/webServer%E6%8E%A7%E5%88%B6neopixel%E7%87%88%E6%A2%9D-ESP32/"/>
      <url>/2021/08/30/webServer%E6%8E%A7%E5%88%B6neopixel%E7%87%88%E6%A2%9D-ESP32/</url>
      
        <content type="html"><![CDATA[<h1 id="webServer控制RGB-LED-ESP32"><a href="#webServer控制RGB-LED-ESP32" class="headerlink" title="webServer控制RGB_LED-ESP32"></a>webServer控制RGB_LED-ESP32</h1><h6 id="tags-esp32-rbg-webserver"><a href="#tags-esp32-rbg-webserver" class="headerlink" title="tags: esp32 rbg webserver"></a>tags: <code>esp32</code> <code>rbg</code> <code>webserver</code></h6><p><strong>這個項目還有點模糊,但就我的理解還是先紀錄下來</strong></p><p>**</p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/7721744657667049248?hl=zh-TW#"><img src="https://lh3.googleusercontent.com/-EGRdbV6myKU/YSMGxtZ4WBI/AAAAAAAAe2I/kzc_LU3nZIQf1s_6QrPwHXVFcsKIayS5wCNcBGAsYHQ/s1600/1629685406049224-0.png"></a></p><p>**</p><p><strong>參考-<a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/7721744657667049248?hl=zh-TW#">https://randomnerdtutorials.com/esp32-esp8266-rgb-led-strip-web-server/</a></strong></p><h2 id="控制流程"><a href="#控制流程" class="headerlink" title="控制流程"></a>控制流程</h2><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/7721744657667049248?hl=zh-TW#"><img src="https://i1.wp.com/randomnerdtutorials.com/wp-content/uploads/2019/03/color-picker-overview.png?w=750&quality=100&strip=all&ssl=1"></a></p><p><em><strong>ESP32網絡服務器顯示一個顏色選擇器。<br>選擇顏色後，瀏覽器會向包含所選顏色的 R、G 和 B 參數的 URL 發出請求。<br>ESP32接收請求並拆分每個顏色參數的值。<br>然後，它向控制條帶的 GPIO 發送具有相應值的 PWM 信號。</strong></em></p><p> <strong>如果燈條是使用8顆LED以上,要另外加5V電源獨立供電</strong></p><p>**</p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/7721744657667049248?hl=zh-TW#"><img src="https://i0.wp.com/randomnerdtutorials.com/wp-content/uploads/2019/03/ESP32-LED-strip-schematic_f.png?w=445&quality=100&strip=all&ssl=1"></a></p><hr><h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;WiFi.h></span></span><span class="token comment">//設定wifi帳密</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> ssid <span class="token operator">=</span> <span class="token string">"---"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> password <span class="token operator">=</span> <span class="token string">"----------"</span><span class="token punctuation">;</span><span class="token comment">//設定網路伺服器的port</span>WiFiServer <span class="token function">server</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//rgb的對應到網路的初始值</span>String redString <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>String greenString <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>String blueString <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span><span class="token keyword">int</span> pos1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> pos2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> pos3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> pos4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//儲存http請求的變量</span>String header<span class="token punctuation">;</span>  <span class="token comment">//RGB的PIN</span><span class="token keyword">const</span> <span class="token keyword">int</span> Rpin <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> Gpin <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> Bpin <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span><span class="token comment">//設定時間</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> previousTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> currenTime <span class="token operator">=</span> <span class="token function">millis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//配置 LED PWM 功能</span>    <span class="token function">ledcSetup</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ledcSetup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ledcSetup</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ledcAttachPin</span><span class="token punctuation">(</span>Rpin<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ledcAttachPin</span><span class="token punctuation">(</span>Gpin<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ledcAttachPin</span><span class="token punctuation">(</span>Bpin<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//帶入網路連線</span>    WiFi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span>ssid<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>WiFi<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> WL_CONNECTED<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"WiFi connceted success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>WiFi<span class="token punctuation">.</span><span class="token function">localIP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    server<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    WiFiClient client <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        currenTime <span class="token operator">=</span> <span class="token function">millis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        previousTime <span class="token operator">=</span> currenTime<span class="token punctuation">;</span>        String currentLine <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">connected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> currenTime <span class="token operator">-</span> previousTime <span class="token operator">&lt;=</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            currenTime <span class="token operator">=</span> <span class="token function">millis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">char</span> c <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Serial<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                header <span class="token operator">+=</span> c<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'\\n'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//如果字串等於0表示接收完成</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentLine<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HTTP/1.1 200 OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Content-type:text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Connection: close"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 以下網頁的部份目前對我來說難度有點高,尤其調色部份,暫借用學習對象的範例</span>                        <span class="token comment">// Display the HTML web page</span>                        client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;!DOCTYPE html>&lt;html>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;head>&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;link rel=\"icon\" href=\"data:,\">"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\">"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/jscolor/2.0.4/jscolor.min.js\">&lt;/script>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;/head>&lt;body>&lt;div class=\"container\">&lt;div class=\"row\">&lt;h1>ESP Color Picker&lt;/h1>&lt;/div>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;a class=\"btn btn-primary btn-lg\" href=\"#\" id=\"change_color\" role=\"button\">Change Color&lt;/a> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;input class=\"jscolor &#123;onFineChange:'update(this)'&#125;\" id=\"rgb\">&lt;/div>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;script>function update(picker) &#123;document.getElementById('rgb').innerHTML = Math.round(picker.rgb[0]) + ', ' +  Math.round(picker.rgb[1]) + ', ' + Math.round(picker.rgb[2]);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"document.getElementById(\\"</span>change_color\\<span class="token string">").href=\\"</span><span class="token operator">?</span>r\\<span class="token string">" + Math.round(picker.rgb[0]) + \"g\" +  Math.round(picker.rgb[1]) + \"b\" + Math.round(picker.rgb[2]) + \"&amp;\";&#125;&lt;/script>&lt;/body>&lt;/html>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// The HTTP response ends with another blank line</span>                        client<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// Request sample: /?r201g32b255&amp;</span>                        <span class="token comment">// Red = 201 | Green = 32 | Blue = 255</span>                        <span class="token comment">//搜尋字串裡的關鍵字,如果有的話就將它串接在一起</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"GET /?r"</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                            pos1 <span class="token operator">=</span> header<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            pos2 <span class="token operator">=</span> header<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'g'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            pos3 <span class="token operator">=</span> header<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            pos4 <span class="token operator">=</span> header<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            redString <span class="token operator">=</span> header<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>pos1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> pos2<span class="token punctuation">)</span><span class="token punctuation">;</span>                            greenString <span class="token operator">=</span> header<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>pos2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> pos3<span class="token punctuation">)</span><span class="token punctuation">;</span>                            blueString <span class="token operator">=</span> header<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>pos3<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> pos4<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">ledcWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> redString<span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">ledcWrite</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> greenString<span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">ledcWrite</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> blueString<span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                        <span class="token comment">//否則當前的行為空</span>                        currentLine <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token comment">//如果c為空行,則c加入當前行</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token string">'\\r'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    currentLine <span class="token operator">+=</span> c<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        header <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Client disconnected."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>**</p><div class="video-container"><iframe src="https://www.youtube.com/embed/MwvuwqJcddI" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> neopixel </tag>
            
            <tag> webServer </tag>
            
            <tag> rgb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>低功耗藍芽-BLE-ESP32</title>
      <link href="/2021/08/30/%E4%BD%8E%E5%8A%9F%E8%80%97%E8%97%8D%E8%8A%BD-BLE-ESP32/"/>
      <url>/2021/08/30/%E4%BD%8E%E5%8A%9F%E8%80%97%E8%97%8D%E8%8A%BD-BLE-ESP32/</url>
      
        <content type="html"><![CDATA[<h1 id="低功耗藍芽-BLE-ESP32"><a href="#低功耗藍芽-BLE-ESP32" class="headerlink" title="低功耗藍芽-BLE-ESP32"></a>低功耗藍芽-BLE-ESP32</h1><h6 id="tags-esp32-BLE"><a href="#tags-esp32-BLE" class="headerlink" title="tags: esp32 BLE"></a>tags: <code>esp32</code> <code>BLE</code></h6><h2 id="什麼是低功耗藍牙？"><a href="#什麼是低功耗藍牙？" class="headerlink" title="什麼是低功耗藍牙？"></a>什麼是低功耗藍牙？</h2><p>低功耗藍牙，簡稱 BLE，是藍牙的一種節能變體。 BLE 的主要應用是短距離傳輸少量數據（低帶寬）。與始終開啟的藍牙不同，BLE 始終處於睡眠模式，除非發起連接。  </p><p>這使得它消耗非常低的功率。 BLE 的功耗比藍牙低約 100 倍（取決於用例）。</p><p>由於其特性，BLE 適用於需要交換在鈕扣電池上定期運行的少量數據的應用程序。例如，BLE 在醫療保健、健身、跟踪、信標、安全和家庭自動化行業中非常有用。  </p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2973515378701882623?hl=zh-TW#"><img src="https://lh3.googleusercontent.com/-FOhL0dvy_Mg/YRNcMNCTl7I/AAAAAAAAexI/5l6KJtkQbNg7C3UMQyF4Y6WHJaVhg0KSwCNcBGAsYHQ/w478-h145/image.png"></a></p><h2 id="BLE-Server和Client"><a href="#BLE-Server和Client" class="headerlink" title="BLE-Server和Client"></a>BLE-Server和Client</h2><p>使用低功耗藍牙，有兩種類型的設備：服務器和客戶端。 ESP32 既可以作為客戶端，也可以作為服務器。  </p><p>服務器通告它的存在，因此它可以被其他設備發現，並且包含客戶端可以讀取的數據。客戶端掃描附近的設備，當它找到它正在尋找的服務器時，它會建立一個連接並監聽傳入的數據。這稱為點對點通信。</p><p>如前所述，BLE 還支持廣播模式和網狀網絡：  </p><p>廣播模式：服務器向多個連接的客戶端傳輸數據；<br>網狀網絡：所有設備都連接起來，這是一個多對多的連接。<br>儘管可以實現廣播和網狀網絡設置，但它們是最近開發的，因此目前為 ESP32 實現的示例並不多。</p><h2 id="GATT"><a href="#GATT" class="headerlink" title="GATT"></a>GATT</h2><p>GATT 代表通用屬性，它定義了暴露給連接的 BLE 設備的分層數據結構。這意味著 GATT 定義了兩個 BLE 設備發送和接收標準消息的方式。了解此層次結構很重要，因為這樣可以更輕鬆地了解如何使用 BLE 和編寫應用程序。</p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2973515378701882623?hl=zh-TW#"><img src="https://lh3.googleusercontent.com/-9tSApqWf14Y/YRNdWbNFB9I/AAAAAAAAexQ/ZkpScOpDK1kfVzgbtLfvPqT0-hwTleFvACNcBGAsYHQ/w565-h318/image.png"></a></p><hr><p>這些屬性描述瞭如何與特徵值交互。基本上，它包含可以與特徵一起使用的操作和過程：</p><p>播送<br>讀<br>寫無響應<br>寫<br>通知<br>表明<br>經過身份驗證的簽名寫入<br>擴展屬性</p><hr><h2 id="使用範例檔的”寫入”"><a href="#使用範例檔的”寫入”" class="headerlink" title="使用範例檔的”寫入”"></a>使用範例檔的”寫入”</h2><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2973515378701882623?hl=zh-TW#"><img src="https://1.bp.blogspot.com/-Oy14eF3dwdY/YRSQAYKtDBI/AAAAAAAAexc/22G5NNCu4kAgtGlxMQOpAHJWCf6zPcaBwCNcBGAsYHQ/w895-h504/1.jpg"></a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*    Based on Neil Kolban example for IDF: https://github.com/nkolban/esp32-snippets/blob/master/cpp_utils/tests/BLE%20Tests/SampleWrite.cpp    Ported to Arduino ESP32 by Evandro Copercini*/</span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;BLEDevice.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;BLEUtils.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;BLEServer.h></span></span>  <span class="token comment">// See the following for generating UUIDs:</span><span class="token comment">// https://www.uuidgenerator.net/</span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SERVICE_UUID</span> <span class="token string">"4fafc201-1fb5-459e-8fcc-c5c9c331914b"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CHARACTERISTIC_UUID</span> <span class="token string">"beb5483e-36e1-4688-b7f5-ea07361b26a8"</span></span><span class="token keyword">class</span> <span class="token class-name">MyCallbacks</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">BLECharacteristicCallbacks</span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">onWrite</span><span class="token punctuation">(</span>BLECharacteristic <span class="token operator">*</span>pCharacteristic<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      std<span class="token double-colon punctuation">::</span>string value <span class="token operator">=</span> pCharacteristic<span class="token operator">-></span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"New value: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> value<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>          Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>value\<span class="token punctuation">[</span>i\<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1- Download and install an BLE scanner app in your phone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2- Scan for BLE devices in the app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3- Connect to MyESP32"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"4- Go to CUSTOM CHARACTERISTIC in CUSTOM SERVICE and write something"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"5- See the magic =)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">BLEDevice</span><span class="token double-colon punctuation">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token string">"MyESP32"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  BLEServer <span class="token operator">*</span>pServer <span class="token operator">=</span> <span class="token class-name">BLEDevice</span><span class="token double-colon punctuation">::</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  BLEService <span class="token operator">*</span>pService <span class="token operator">=</span> pServer<span class="token operator">-></span><span class="token function">createService</span><span class="token punctuation">(</span>SERVICE_UUID<span class="token punctuation">)</span><span class="token punctuation">;</span>  BLECharacteristic <span class="token operator">*</span>pCharacteristic <span class="token operator">=</span> pService<span class="token operator">-></span><span class="token function">createCharacteristic</span><span class="token punctuation">(</span>                                         CHARACTERISTIC_UUID<span class="token punctuation">,</span>                                         BLECharacteristic<span class="token double-colon punctuation">::</span>PROPERTY_READ <span class="token operator">|</span>                                         BLECharacteristic<span class="token double-colon punctuation">::</span>PROPERTY_WRITE                                       <span class="token punctuation">)</span><span class="token punctuation">;</span>  pCharacteristic<span class="token operator">-></span><span class="token function">setCallbacks</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">MyCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  pCharacteristic<span class="token operator">-></span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  pService<span class="token operator">-></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  BLEAdvertising <span class="token operator">*</span>pAdvertising <span class="token operator">=</span> pServer<span class="token operator">-></span><span class="token function">getAdvertising</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  pAdvertising<span class="token operator">-></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// put your main code here, to run repeatedly:</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p><strong>首先導入 BLE 功能所需的庫</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;BLEDevice.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;BLEUtils.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;BLEServer.h></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>然後，您需要為 Service 和 Characteristic 定義一個 UUID,也可以流用內訂的UUID</strong></p><p><strong>或要自己創建自己的UUID可以到這個網站<a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2973515378701882623?hl=zh-TW#">https://www.uuidgenerator.net/</a></strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SERVICE_UUID</span> <span class="token string">"4fafc201-1fb5-459e-8fcc-c5c9c331914b"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CHARACTERISTIC_UUID</span> <span class="token string">"beb5483e-36e1-4688-b7f5-ea07361b26a8"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>接收字串的類</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyCallbacks</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">BLECharacteristicCallbacks</span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">onWrite</span><span class="token punctuation">(</span>BLECharacteristic <span class="token operator">*</span>pCharacteristic<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      std<span class="token double-colon punctuation">::</span>string value <span class="token operator">=</span> pCharacteristic<span class="token operator">-></span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"New value: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> value<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>          Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>value\<span class="token punctuation">[</span>i\<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>在 <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 中，它以 <span class="token number">115200</span> 的波特率啟動串行通信<span class="token operator">*</span><span class="token operator">*</span>```cpp Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>創建一個名為“MyESP32”的 BLE 設備。您可以將此名稱更改為您喜歡的任何名稱。</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token class-name">BLEDevice</span><span class="token double-colon punctuation">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token string">"MyESP32"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>在以下行中，您將 BLE 設備設置為服務器。</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">BLEServer <span class="token operator">*</span>pServer <span class="token operator">=</span> <span class="token class-name">BLEDevice</span><span class="token double-colon punctuation">::</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>在這之後，你的BLE服務器創建的UUID前面定義的服務。</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">BLEService <span class="token operator">*</span>pService <span class="token operator">=</span> pServer<span class="token operator">-></span><span class="token function">createService</span><span class="token punctuation">(</span>SERVICE_UUID<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>設置該服務的特徵。如您所見，您還使用了之前定義的 UUID，您需要將特徵的屬性作為參數傳遞。在這種情況下，它是：讀和寫。</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">BLECharacteristic <span class="token operator">*</span>pCharacteristic <span class="token operator">=</span> pService<span class="token operator">-></span><span class="token function">createCharacteristic</span><span class="token punctuation">(</span>                                         CHARACTERISTIC_UUID<span class="token punctuation">,</span>                                         BLECharacteristic<span class="token double-colon punctuation">::</span>PROPERTY_READ <span class="token operator">|</span>                                         BLECharacteristic<span class="token double-colon punctuation">::</span>PROPERTY_WRITE                                       <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>創建setCallbacks() 方法接收傳來的值或字串</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">pCharacteristic<span class="token operator">-></span><span class="token function">setCallbacks</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">MyCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>創建特徵後，您可以使用 setValue() 方法設置其值。</strong></p><p><strong>我們將值設置為文本“Hello World 說 Neil”。您可以將此文本更改為您喜歡的任何內容。例如，在未來的項目中，該文本可以是傳感器讀數或燈的狀態。</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">pCharacteristic<span class="token operator">-></span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>``<span class="token operator">*</span><span class="token operator">*</span>最後，您可以啟動服務，並進行廣告，以便其他 BLE 設備可以掃描並找到此 BLE 設備<span class="token operator">*</span><span class="token operator">*</span>  ```cppBLEAdvertising <span class="token operator">*</span>pAdvertising <span class="token operator">=</span> pServer<span class="token operator">-></span><span class="token function">getAdvertising</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  pAdvertising<span class="token operator">-></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>上傳完成之後,打開監測窗口,按一下ESP32的RESET,會出現以下畫面</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2973515378701882623?hl=zh-TW#"><img src="https://1.bp.blogspot.com/-5jO95-XvQu0/YRSSPJ9F-AI/AAAAAAAAexw/nz3F5DWsJ9oNFZmLf8xf-z7AsQZglJ_-wCNcBGAsYHQ/w767-h432/2.jpg"></a></p><p><strong>下載手機APP <a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2973515378701882623?hl=zh-TW#">nRF Connect</a> 並開啓APP</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2973515378701882623?hl=zh-TW#"><img src="https://lh3.googleusercontent.com/-qlUi7497sg4/YRSTXZb1f-I/AAAAAAAAeyE/LbzEQbE2hvs3MFDjERCYdpcVf4fDohQsACNcBGAsYHQ/s1600/1628738390279946-0.png"></a></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2973515378701882623?hl=zh-TW#"><img src="https://lh3.googleusercontent.com/-Nf9DHYKj3AM/YRSTVOlwm6I/AAAAAAAAeyA/pKUuFBbdjZo_8FGJdX2MmLcHL1c1hPLhwCNcBGAsYHQ/s1600/1628738380362595-1.png"></a></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2973515378701882623?hl=zh-TW#"><img src="https://lh3.googleusercontent.com/-1JkgS9GGNVs/YRSTS3iQbwI/AAAAAAAAex8/RXyTRNwbU58Qrr1PPOv3KNTTaf5Dj68JQCNcBGAsYHQ/s1600/1628738377493328-2.png"></a></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2973515378701882623?hl=zh-TW#"><img src="https://lh3.googleusercontent.com/-9WgHaxVf2FI/YRSTSLnMzvI/AAAAAAAAex4/Gye9ZeTj3eMmdO9UEjNMTS95IOFWJOblgCNcBGAsYHQ/s1600/1628738372129606-3.png"></a></p><p><strong>按下SEND後</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2973515378701882623?hl=zh-TW#"><img src="https://1.bp.blogspot.com/-qFsywMyHNCE/YRSToPLpGQI/AAAAAAAAeyU/WeOP7MtlzeMjBweA6cIOJIYuwvZE93XowCNcBGAsYHQ/w879-h495/3.jpg"></a></p><p>參考-<a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2973515378701882623?hl=zh-TW#">https://randomnerdtutorials.com/esp32-bluetooth-low-energy-ble-arduino-ide/</a></p>]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BLE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MQTT-Nord-RED顯示超音波測距數據+控制LED</title>
      <link href="/2021/08/30/MQTT-Nord-RED%E9%A1%AF%E7%A4%BA%E8%B6%85%E9%9F%B3%E6%B3%A2%E6%B8%AC%E8%B7%9D%E6%95%B8%E6%93%9A-%E6%8E%A7%E5%88%B6LED/"/>
      <url>/2021/08/30/MQTT-Nord-RED%E9%A1%AF%E7%A4%BA%E8%B6%85%E9%9F%B3%E6%B3%A2%E6%B8%AC%E8%B7%9D%E6%95%B8%E6%93%9A-%E6%8E%A7%E5%88%B6LED/</url>
      
        <content type="html"><![CDATA[<h2 id="MQTT-Nord-RED顯示超音波測距數據-控制LED"><a href="#MQTT-Nord-RED顯示超音波測距數據-控制LED" class="headerlink" title="MQTT-Nord-RED顯示超音波測距數據+控制LED"></a>MQTT-Nord-RED顯示超音波測距數據+控制LED</h2><h2 id="超音波模組-HC-SC04-測試回顧-點我回顧"><a href="#超音波模組-HC-SC04-測試回顧-點我回顧" class="headerlink" title="超音波模組(HC-SC04)測試回顧-點我回顧"></a>超音波模組(HC-SC04)測試回顧-<a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/3385819142688987744?hl=zh-TW#">點我回顧</a></h2><h2 id="MQTT相關布暑-點我回顧"><a href="#MQTT相關布暑-點我回顧" class="headerlink" title="MQTT相關布暑-點我回顧"></a>MQTT相關布暑-<a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/3385819142688987744?hl=zh-TW#">點我回顧</a></h2><h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#include &lt;Ultrasonic.h&gt;#include &lt;WiFi.h&gt;#include &lt;PubSubClient.h&gt;Ultrasonic ultrasonic(32, 33);const char* ssid &#x3D; &quot;---&quot;;const char* password &#x3D; &quot;-----&quot;;const char* mqttServer &#x3D; &quot;192.168.67.22&quot;;&#x2F;&#x2F;wifi客戶端及MQTT客戶端代數WiFiClient espClient;PubSubClient client(espClient);&#x2F;&#x2F;設定wifivoid wifiConn()&#123;  WiFi.begin(ssid, password);  while (WiFi.status() !&#x3D; WL_CONNECTED)&#123;    Serial.print(&quot;.&quot;);    delay(50);  &#125;  Serial.println(&quot;Connected successful!&quot;);  Serial.println(WiFi.localIP());&#125;  &#x2F;&#x2F;檢查訂閱的字串是否含有on和off,如果比對下來是&#x2F;&#x2F;nord-red裡的標頭一樣,而且包含on就開燈,off就關燈void callback(char *topic, byte *message, unsigned int length)&#123;  String messageDist;  Serial.print(&quot;Message arrived on topic: &quot;);  Serial.print(topic);  Serial.print(&quot;. Message: &quot;);  for (int i &#x3D; 0; i &lt; length; i++)  &#123;    Serial.print(char(message\[i\]));    messageDist +&#x3D; char(message\[i\]);  &#125;  Serial.println();  if (String(topic) &#x3D;&#x3D; &quot;esp32&#x2F;output&quot;)&#123;    if (messageDist &#x3D;&#x3D; &quot;on&quot;)&#123;      Serial.print(&quot;on&quot;);      digitalWrite(LED_BUILTIN, HIGH);    &#125;else if (messageDist &#x3D;&#x3D; &quot;off&quot;)&#123;      Serial.print(&quot;off&quot;);      digitalWrite(LED_BUILTIN, LOW);    &#125;  &#125;&#125;&#x2F;&#x2F;萬一連不上mqtt就重新連線void reconnect()&#123;  while (! client.connected())&#123;    Serial.print(&quot;Attempting MQTT connection...&quot;);    if (client.connect(&quot;esp32Client&quot;))&#123;      Serial.println(&quot;connected&quot;);      client.subscribe(&quot;esp32&#x2F;output&quot;);    &#125;else &#123;      Serial.print(&quot;failed connected is : &quot;);      Serial.println(client.state());      delay(2000);    &#125;  &#125;&#125;void setup() &#123;  Serial.begin(115200);  wifiConn();  client.setServer(mqttServer, 1883);  client.setCallback(callback);  pinMode(LED_BUILTIN, OUTPUT);&#125;void loop() &#123;    if (! client.connected())&#123;      reconnect();    &#125;    client.loop();    long lastTime &#x3D; 0;    long currentTime &#x3D; millis();    float distance &#x3D; 0;    if (currentTime - lastTime &gt; 3000)&#123;      lastTime &#x3D; currentTime;      distance &#x3D; ultrasonic.read(CM);      Serial.println(distance);      char distStr[8] &#x3D; &quot;&quot;;      dtostrf(distance, 1, 2, distStr);      Serial.print(&quot;Distance: &quot;);      Serial.print(distance);      Serial.println(&quot;CM&quot;);      client.publish(&quot;esp32&#x2F;distanceRead&quot;, distStr);      delay(500);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/3385819142688987744?hl=zh-TW#"><img src="https://lh3.googleusercontent.com/-rw-XPPQUrZQ/YQylpvMqgMI/AAAAAAAAeq4/AOgDSHZxzNgssqLlrKNTHm1Vxks8qHaMwCNcBGAsYHQ/w505-h1005/1628218778514172-0.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mqtt </tag>
            
            <tag> hc-sr04 </tag>
            
            <tag> nord-red </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP32-DC直流馬達測試</title>
      <link href="/2021/08/29/ESP32-DC%E7%9B%B4%E6%B5%81%E9%A6%AC%E9%81%94%E6%B8%AC%E8%A9%A6/"/>
      <url>/2021/08/29/ESP32-DC%E7%9B%B4%E6%B5%81%E9%A6%AC%E9%81%94%E6%B8%AC%E8%A9%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="ESP32-DC直流馬達測試"><a href="#ESP32-DC直流馬達測試" class="headerlink" title="ESP32-DC直流馬達測試"></a>ESP32-DC直流馬達測試</h1><h6 id="tags-esp32-dc-moto-l298n"><a href="#tags-esp32-dc-moto-l298n" class="headerlink" title="tags: esp32 dc moto l298n"></a>tags: <code>esp32</code> <code>dc moto</code> <code>l298n</code></h6><p><strong>直流馬達是微控板常常在用的元件，最常搭配的是L298N</strong></p><p><strong>驅動裝置，因為如果把馬達直接接上微控板會導致燒掉</strong></p><h2 id="L298N驅動板"><a href="#L298N驅動板" class="headerlink" title="L298N驅動板"></a>L298N驅動板</h2><p>OUT1：直流電機A+端子<br>OUT2：直流電機 A – 端子<br>OUT3：直流電機B+端子<br>OUT4：直流電機 B – 端子</p><p>這裡要特別注意的地方</p><p>在底部，您有一個帶有 +12V、GND 和 +5V 的三接線端子。 </p><p>一般用18650電池二~三顆供電的話接+12V和GND，如果要</p><p>額外接微控板例如esp32或arduino，在+5V和GND就是往外</p><p>供電給微控板的5V。</p><p>注意：如果供電超過12V，需要去掉跳線，給+5V端供電5V。</p><p>使能(Enble)引腳  </p><p>如果您向使能 A 引腳發送 HIGH 信號，則電機 A 已準備好以最大速度進行控制；<br>如果向使能 A 引腳發送 LOW 信號，則電機 A 關閉；<br>如果發送PWM信號，則可以控制電機的速度。電機速度與占空比成正比。但是，</p><p>請注意，<strong>對於小占空比，電機可能不會旋轉</strong>，並發出持續的嗡嗡聲。</p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/7079589207275388404?hl=zh-TW#"><img src="https://1.bp.blogspot.com/-P-j3FW8Xbpw/YQdexXM61HI/AAAAAAAAemw/Eg9w-rqfbS8KUP7etV1xL1O6CC0g457VwCNcBGAsYHQ/w541-h475/L298N-label.jpg"></a></p><hr><h2 id="接線"><a href="#接線" class="headerlink" title="接線"></a>接線</h2><p><strong>＊記得L298N的GND要拉一條到ESP32的GND，否則馬達不會動作</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/7079589207275388404?hl=zh-TW#"><img src="https://1.bp.blogspot.com/-emtD7l8K7IE/YQdpsc_-zqI/AAAAAAAAem8/bIDZQ1CeGIUjmlgIgJlSfQI3DE1emAINQCNcBGAsYHQ/w534-h701/ESP32_1_DC_Motor_bb.png"></a></p><hr><h2 id="程式"><a href="#程式" class="headerlink" title="程式"></a>程式</h2><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int M1 &#x3D; 27;int M2 &#x3D; 26;int enb &#x3D; 14;int duty &#x3D; 150;void setup() &#123;  Serial.begin(115200);  pinMode(M1, OUTPUT);  pinMode(M2, OUTPUT);  pinMode(enb, OUTPUT);    ledcSetup(0, 3000, 8);  ledcAttachPin(enb, 0);&#125;  void loop() &#123;  &#x2F;&#x2F;forward  Serial.println(&quot;forward&quot;);  digitalWrite(M1, LOW);  digitalWrite(M2, HIGH);  delay(2000);  &#x2F;&#x2F;stop  Serial.println(&quot;stop&quot;);  digitalWrite(M1, LOW);  digitalWrite(M2, LOW);  delay(2000);  &#x2F;&#x2F;back  Serial.println(&quot;back&quot;);  digitalWrite(M1, HIGH);  digitalWrite(M2, LOW);  delay(2000);  &#x2F;&#x2F;stop  Serial.println(&quot;stop&quot;);  digitalWrite(M1, LOW);  digitalWrite(M2, LOW);  delay(2000);  &#x2F;&#x2F;pwm forward  Serial.println(&quot;forward&quot;);  digitalWrite(M1, LOW);  digitalWrite(M2, HIGH);  delay(2000);  while (duty &lt;&#x3D; 255)&#123;    Serial.println(duty);    ledcWrite(0, duty);    duty +&#x3D; 5;    delay(500);  &#125;  delay(2000);  duty &#x3D; 150;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">&#x2F;&#x2F;馬達1的正反轉腳位int M1_IN1 &#x3D; 27;int M1_IN2 &#x3D; 26;int enb &#x3D; 14; &#x2F;&#x2F;使能控制腳位int duty &#x3D; 150; &#x2F;&#x2F;PWM的dutyclcyle預設150,不能太小,值太小馬達不會轉  void setup() &#123;  Serial.begin(115200);  pinMode(M1_IN1, OUTPUT);  pinMode(M1_IN2, OUTPUT);  pinMode(enb, OUTPUT);  &#x2F;&#x2F;頻道0, 頻率3000, 解析度8  ledcSetup(0, 3000, 8);   &#x2F;&#x2F;enblePin, 通道  ledcAttachPin(enb, 0);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>loop裡面最後有while(),因為duty最大值到255,所以要讓它從150漸增到255</strong></p><p><strong>來觀察pwm的動作</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">void loop() &#123;  &#x2F;&#x2F;forward  Serial.println(&quot;forward&quot;);  digitalWrite(M1_IN1, LOW);  digitalWrite(M1_IN2, HIGH);  delay(2000);  &#x2F;&#x2F;stop  Serial.println(&quot;stop&quot;);  digitalWrite(M1_IN1, LOW);  digitalWrite(M1_IN2, LOW);  delay(2000);  &#x2F;&#x2F;back  Serial.println(&quot;back&quot;);  digitalWrite(M1, HIGH);  digitalWrite(M2, LOW);  delay(2000);  &#x2F;&#x2F;stop  Serial.println(&quot;stop&quot;);  digitalWrite(M1_IN1, LOW);  digitalWrite(M1_IN2, LOW);  delay(2000);  &#x2F;&#x2F;pwm forward  Serial.println(&quot;forward&quot;);  digitalWrite(M1_IN1, LOW);  digitalWrite(M1_IN2, HIGH);  delay(2000);  while (duty &lt;&#x3D; 255)&#123;    Serial.println(duty);    ledcWrite(0, duty);    duty +&#x3D; 5;    delay(500);  &#125;  delay(2000);  duty &#x3D; 150;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><div class="video-container"><iframe src="https://www.youtube.com/embed/J5Chbzcz3jY" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dc moto </tag>
            
            <tag> L298N </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MQTT Publish + Node-RED + BMP280</title>
      <link href="/2021/08/29/MQTT-Publish-Node-RED-BMP280/"/>
      <url>/2021/08/29/MQTT-Publish-Node-RED-BMP280/</url>
      
        <content type="html"><![CDATA[<h1 id="MQTT-Publish-Node-RED-BMP280"><a href="#MQTT-Publish-Node-RED-BMP280" class="headerlink" title="MQTT Publish + Node-RED + BMP280"></a>MQTT Publish + Node-RED + BMP280</h1><h6 id="tags-esp32-mqtt-node-red-bmp280"><a href="#tags-esp32-mqtt-node-red-bmp280" class="headerlink" title="tags: esp32 mqtt node-red bmp280"></a>tags: <code>esp32</code> <code>mqtt</code> <code>node-red</code> <code>bmp280</code></h6><p><strong>參考文獻-<a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/5842507104876900238?hl=zh-TW#">https://randomnerdtutorials.com/esp32-mqtt-publish-subscribe-arduino-ide/</a></strong></p><p><strong>這次實作是使用MQTT發送BMP280的數據到樹莓派上的Node-RED儀錶版上</strong></p><p><strong>我是參考這篇文章-<a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/5842507104876900238?hl=zh-TW#">https://randomnerdtutorials.com/esp32-mqtt-publish-subscribe-arduino-ide/</a></strong></p><p><strong>所以會使用類似的程式碼手法來完成項目。</strong></p><p><strong>開始之前先備妥樹莓派上所須的軟硬體</strong></p><ol><li> <strong><em>安裝<a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/5842507104876900238?hl=zh-TW#">Mosquitto broker</a>(如果沒玩過樹莓派,請連結<a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/5842507104876900238?hl=zh-TW#">這裡</a>安裝樹莓派系統和<a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/5842507104876900238?hl=zh-TW#">如</a></em></strong></li><li> <strong><em><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/5842507104876900238?hl=zh-TW#">何使用SSH和VNC鏡像</a>)</em></strong></li><li> <strong><em>安裝 <a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/5842507104876900238?hl=zh-TW#">Node-RED installed</a>  和 <a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/5842507104876900238?hl=zh-TW#">Node-RED Dashboard</a>在樹莓派上。</em></strong></li><li> <strong>_備註:安裝Node-RED時若出現錯誤訊息改用下面所附下載 _****<em>bash &lt;(curl -sL <a href="https://raw.githubusercontent.com/node-red/linux-installers/master/deb/update-nodejs-and-nodered">https://raw.githubusercontent.com/node-red/linux-installers/master/deb/update-nodejs-and-nodered</a>)</em></strong></li><li><strong><em>接下來先測試BMP280是否可正常測溫度和壓力-請參考之前的紀錄(<a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/5842507104876900238?hl=zh-TW#">點我傳送</a>)。</em></strong></li></ol><p><em><strong>先來看一下整個發送原理比較容易理解自己要學的重點在哪裡</strong></em></p><p><em><strong>此次實驗我只寫從ESP32發送數據到樹莓派的Mosquitto代理接收/發送</strong></em></p><p><em><strong>然後通過MQTT通信協議去控制ESP32發送數據到Node-RED,其實我覺</strong></em></p><p><em><strong>得和ThingSpeak很類似,只是使用Node-RED更能客製化。</strong></em></p><p><em><strong>看一下這張圖</strong></em></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/5842507104876900238?hl=zh-TW#"><strong><img src="https://lh3.googleusercontent.com/-dbEK49_w9_A/YQP1Mii2utI/AAAAAAAAelI/zvaBPu6JqXIcyeXVPyqIHhOt6CVSYkCrgCNcBGAsYHQ/w642-h341/image.png"></strong></a></p><hr><p><strong><em>知道原理後就是開始進入寫程式的主軸</em></strong></p><p><strong><em>首先要有網路可以連到數莓派和ESP32，然後判斷是否已經連線</em></strong></p><p><strong><em>如果連不上就再自動重連，連上後印出IP，連上網路後，就是</em></strong></p><p><strong><em>要去和樹莓派的Mosquitto Broker連線，一樣就是判斷是否成功</em></strong></p><p><strong><em>連線做出對應的動作。WiFi和Mosquitto Broker都連線之後，就開</em></strong></p><p><strong><em>始從ESP32客戶端發送溫度和壓力的數據到Node-RED的介面上。</em></strong></p><hr><h2 id="布署Node-RED"><a href="#布署Node-RED" class="headerlink" title="布署Node-RED"></a>布署Node-RED</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/IHebAHN_E50" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#include &lt;WiFi.h&gt;#include &lt;PubSubClient.h&gt;#include &lt;Adafruit_BMP280.h&gt;#include &lt;Adafruit_Sensor.h&gt;#include &lt;Wire.h&gt;Adafruit_BMP280 bmp; &#x2F;&#x2F; I2C  WiFiClient espClient;PubSubClient client(espClient);&#x2F;&#x2F;wifi帳密const char* ssid &#x3D; &quot;---&quot;;const char* password &#x3D; &quot;------&quot;;&#x2F;&#x2F;mqttServerconst char* mqttServer &#x3D; &quot;---.---.---.--&quot;;  &#x2F;&#x2F;設定wifivoid setupWifi()&#123;  WiFi.begin(ssid, password);  while (WiFi.status() !&#x3D; WL_CONNECTED)&#123;    delay(50);    Serial.print(&quot;.&quot;);  &#125;  Serial.println(&quot;connected successful&quot;);  Serial.println(WiFi.localIP());  &#125;    void reconnect()&#123;  while (! client.connected())&#123;    Serial.print(&quot;Attempting MQTT connection...&quot;);    if (client.connect(&quot;esp32Client&quot;))&#123;      Serial.println(&quot;connected&quot;);    &#125;else &#123;      Serial.print(&quot;failed connected is : &quot;);      Serial.println(client.state());      delay(2000);    &#125;  &#125;&#125;  void setup() &#123;  Serial.begin(115200);  Serial.println(F(&quot;BMP280 test&quot;));  setupWifi();  client.setServer(mqttServer, 1883);  if (!bmp.begin()) &#123;    Serial.println(F(&quot;Could not find a valid BMP280 sensor, check wiring or &quot;                      &quot;try a different address!&quot;));    while (1) delay(10);  &#125;&#125;void loop() &#123;    if (! client.connected())&#123;      reconnect();    &#125;    client.loop();    long lastTime &#x3D; 0;    long currentTime &#x3D; millis();    float temp &#x3D; 0;    float pressure &#x3D; 0;    float humi &#x3D; 0;    if (currentTime - lastTime &gt; 5000)&#123;      lastTime &#x3D; currentTime;      temp &#x3D; bmp.readTemperature();      humi &#x3D; 1.8 * temp + 32;      pressure &#x3D; bmp.readPressure();      char tempStr\[8\] &#x3D; &quot;&quot;;      char pressStr\[24\] &#x3D; &quot;&quot;;      char humiStr\[8\] &#x3D; &quot;&quot;;      dtostrf(temp, 1, 2, tempStr);      dtostrf(pressure, 1, 2, pressStr);      dtostrf(humi, 1, 2, humiStr);      Serial.print(&quot;Temp: &quot;);      Serial.println(tempStr);      Serial.print(&quot;humi: &quot;);      Serial.println(humiStr);      Serial.print(&quot;Pressure: &quot;);      Serial.println(pressStr);      client.publish(&quot;esp32&#x2F;temp&quot;, tempStr);      client.publish(&quot;esp32&#x2F;pressure&quot;, pressStr);      client.publish(&quot;esp32&#x2F;humi&quot;, humiStr);      delay(1000);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p><strong>匯入所須的程式庫</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#include &lt;WiFi.h&gt;#include &lt;PubSubClient.h&gt;#include &lt;Adafruit_BMP280.h&gt;#include &lt;Adafruit_Sensor.h&gt;#include &lt;Wire.h&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>建立bmp280，wifi客戶端及MQTT客戶端代數</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Adafruit_BMP280 bmp; &#x2F;&#x2F; I2CWiFiClient espClient;PubSubClient client(espClient);  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>MQTTserver的IP即是樹莓派的IP</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">&#x2F;&#x2F;wifi帳密const char* ssid &#x3D; &quot;---&quot;;const char* password &#x3D; &quot;------&quot;;&#x2F;&#x2F;mqttServerconst char* mqttServer &#x3D; &quot;---.---.---.---&quot;;  &#x2F;&#x2F;設定wifivoid setupWifi()&#123;  WiFi.begin(ssid, password);  while (WiFi.status() !&#x3D; WL_CONNECTED)&#123;    delay(50);    Serial.print(&quot;.&quot;);  &#125;  Serial.println(&quot;connected successful&quot;);  Serial.println(WiFi.localIP());  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>連線至MQTT伺服器成功與無法連線的對應動作</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">void reconnect()&#123;  while (! client.connected())&#123;    Serial.print(&quot;Attempting MQTT connection...&quot;);    if (client.connect(&quot;esp32Client&quot;))&#123;      Serial.println(&quot;connected&quot;);    &#125;else &#123;      Serial.print(&quot;failed connected is : &quot;);      Serial.println(client.state());      delay(2000);    &#125;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>void setup(){}裡面的一些必要初始化</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">void setup() &#123;  Serial.begin(115200);  Serial.println(F(&quot;BMP280 test&quot;));  setupWifi();  client.setServer(mqttServer, 1883);  if (!bmp.begin()) &#123;    Serial.println(F(&quot;Could not find a valid BMP280 sensor, check wiring or &quot;                      &quot;try a different address!&quot;));    while (1) delay(10);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>void loop(){}裡</strong></p><p><strong>無法連線就重複連線</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">if (! client.connected())&#123;      reconnect();    &#125;    client.loop();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><em>關於數值轉字元的函式</em></strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">char* dtostrf(double _val,signed char _width, unsigned char prec, char* _s)  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>引數說明：<br>_val:要轉換的float或者double值。</p><p>_width:轉換後整數部分長度。</p><p>_prec：轉換後小數部分長度。</p><p>_s:儲存到該char陣列中。</p><p><strong><em>其中這個是轉成對應的字元</em></strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">char tempStr[8] &#x3D; &quot;&quot;;char pressStr[24] &#x3D; &quot;&quot;;char humiStr[8] &#x3D; &quot;&quot;;dtostrf(temp, 1, 2, tempStr);dtostrf(pressure, 1, 2, pressStr);dtostrf(humi, 1, 2, humiStr);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>取得溫度/壓力數值後每5秒發送到MQTT的Node-RED</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">if (currentTime - lastTime &gt; 5000)&#123;      lastTime &#x3D; currentTime;      temp &#x3D; bmp.readTemperature();      humi &#x3D; 1.8 * temp + 32;      pressure &#x3D; bmp.readPressure();      char tempStr[8] &#x3D; &quot;&quot;;      char pressStr[24] &#x3D; &quot;&quot;;      char humiStr[8] &#x3D; &quot;&quot;;      dtostrf(temp, 1, 2, tempStr);      dtostrf(pressure, 1, 2, pressStr);      dtostrf(humi, 1, 2, humiStr);      Serial.print(&quot;Temp: &quot;);      Serial.println(tempStr);      Serial.print(&quot;humi: &quot;);      Serial.println(humiStr);      Serial.print(&quot;Pressure: &quot;);      Serial.println(pressStr);      client.publish(&quot;esp32&#x2F;temp&quot;, tempStr);      client.publish(&quot;esp32&#x2F;pressure&quot;, pressStr);      client.publish(&quot;esp32&#x2F;humi&quot;, humiStr);      delay(1000);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/5842507104876900238?hl=zh-TW#"><img src="https://lh3.googleusercontent.com/-ysEI3JQaSG4/YQYUjIdUS-I/AAAAAAAAemY/eaOvIOCh2Zkcz5SrWboitrz4Ji02B7hegCNcBGAsYHQ/s1600/1627788424761991-0.png"></a> </p><hr>]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mqtt </tag>
            
            <tag> node-red </tag>
            
            <tag> bmp280 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DHT11/12網路監測溫濕度計-micropython</title>
      <link href="/2021/08/29/DHT11-12%E7%B6%B2%E8%B7%AF%E7%9B%A3%E6%B8%AC%E6%BA%AB%E6%BF%95%E5%BA%A6%E8%A8%88-micropython-1/"/>
      <url>/2021/08/29/DHT11-12%E7%B6%B2%E8%B7%AF%E7%9B%A3%E6%B8%AC%E6%BA%AB%E6%BF%95%E5%BA%A6%E8%A8%88-micropython-1/</url>
      
        <content type="html"><![CDATA[<h1 id="DHT11-12網路監測溫濕度計-micropython"><a href="#DHT11-12網路監測溫濕度計-micropython" class="headerlink" title="DHT11/12網路監測溫濕度計-micropython"></a>DHT11/12網路監測溫濕度計-micropython</h1><h6 id="tags-micropython-dht11-12-webserver"><a href="#tags-micropython-dht11-12-webserver" class="headerlink" title="tags: micropython dht11/12 webserver"></a>tags: <code>micropython</code> <code>dht11/12 webserver</code></h6><hr><p><strong><em>DHT11/12單純測試參考頁面-</em></strong></p><p><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/5661741645243406963?hl=zh-TW#">https://blairan-esp32-micropython.blogspot.com/2021/07/dht11dht12-micropython.html</a></p><p><em><strong>WiFi聯網參考-</strong></em><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/5661741645243406963?hl=zh-TW#">https://blairan-esp32-micropython.blogspot.com/2021/07/wifi.html</a></p><hr><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><pre class="line-numbers language-py" data-language="py"><code class="language-py">import dhtimport network, socketfrom machine import Pinfrom time import sleep  ssid&#x3D;&quot;---&quot;password&#x3D;&quot;------&quot;STA&#x3D;network.WLAN(network.STA_IF)STA.active(True)STA.connect(ssid, password)while STA.isconnected()&#x3D;&#x3D;False:    passprint(&quot;The connected successful!&quot;)print(&quot;IP:  &#123;&#125;&quot;.format(STA.ifconfig()))def readTempAndHumi():    global temp, humi    try:        sensor&#x3D;dht.DHT11(Pin(4))        sensor.measure()        temp&#x3D;sensor.temperature()        humi&#x3D;sensor.humidity()        if (isinstance(temp, float) and isinstance(humi, float)) or (isinstance(temp, int) and isinstance(humi, int)):          measureResult&#x3D;&quot;&#123;&#125;,&#123;&#125;&quot;.format(temp, humi)          return measureResult        else:          return (&quot;--&quot;)    except OSError as o:        print(&quot;--&quot;)def Htmlpage():  html&#x3D; &quot;&quot;&quot;        &lt;html&gt;    &lt;head&gt;      &lt;meta charset&#x3D;&quot;utf-8&quot; &#x2F;&gt;      &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;      &lt;style&gt;        h1  &#123;text-align: center; background-color: orange; margin-right:5px;&#125;        dl &#123; width: 320px; margin: 12px auto; &#125;        dt &#123;           font-size: 20pt; color: #444; background-color: #ddd;          margin: 6pt 0; padding: 6pt 12pt;        &#125;        dd &#123;          text-align: right; padding-right: 6pt;        &#125;        .num &#123; font-size: 36pt; color: dodgerblue; &#125;      &lt;&#x2F;style&gt;      &lt;&#x2F;head&gt;    &lt;body&gt;      &lt;p&gt;&lt;h1&gt;ESP32 DHT11&#x2F;12&lt;&#x2F;h1&gt;&lt;&#x2F;p&gt;      &lt;dl&gt;        &lt;dt&gt;Temp&lt;&#x2F;dt&gt;        &lt;dd class&#x3D;num&gt;&quot;&quot;&quot;+str(temp)+&quot;&quot;&quot;°C&lt;&#x2F;dd&gt;        &lt;dt&gt;Humi&lt;&#x2F;dt&gt;        &lt;dd class&#x3D;num&gt;&quot;&quot;&quot;+str(humi)+&quot;&quot;&quot; %&lt;&#x2F;dd&gt;      &lt;&#x2F;dl&gt;    &lt;&#x2F;body&gt;    &lt;&#x2F;html&gt;    &quot;&quot;&quot;  return html  s&#x3D;socket.socket(socket.AF_INET, socket.SOCK_STREAM)s.bind((&#39;&#39;, 80))s.listen(5)  while True:    conn, addr &#x3D; s.accept()    print(&#39;Got a connection from %s&#39; % str(addr))    req &#x3D; conn.recv(1024)    print(&#39;Content &#x3D; %s&#39; % str(req))    sensor_reading &#x3D; readTempAndHumi()    print(sensor_reading)    respone &#x3D; Htmlpage()    conn.send(&quot;http&#x2F;1.1 200 OK\n&quot;)    conn.send(&quot;Content-Type: text&#x2F;html; charset&#x3D;&#39;utf-8&#39;\n&quot;)    conn.send(&quot;Connection: close\n\n&quot;)    conn.sendall(respone)    conn.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><pre class="line-numbers language-py" data-language="py"><code class="language-py">**_載入dht,wifi,端口,pin和時間模組_**import dhtimport network, socketfrom machine import Pinfrom time import sleep<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><em>這個部份是設制WiFi的流程</em></strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">ssid&#x3D;&quot;基地台名稱&quot;password&#x3D;&quot;基地台密碼&quot;  STA&#x3D;network.WLAN(network.STA_IF)STA.active(True)STA.connect(ssid, password)  while STA.isconnected()&#x3D;&#x3D;False:    passprint(&quot;The connected successful!&quot;)print(&quot;IP:  &#123;&#125;&quot;.format(STA.ifconfig()))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><em>讀取溫溼度的函式</em></strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">def readTempAndHumi():    global temp, humi    try:        sensor&#x3D;dht.DHT11(Pin(4))        sensor.measure()        temp&#x3D;sensor.temperature()        humi&#x3D;sensor.humidity()        if (isinstance(temp, float) and isinstance(humi, float)) or (isinstance(temp, int) and isinstance(humi, int)):          measureResult&#x3D;&quot;&#123;&#125;,&#123;&#125;&quot;.format(temp, humi)          return measureResult        else:          return (&quot;--&quot;)    except OSError as o:        print(&quot;--&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>網頁前端的布置,記得要讓其讀取時可返回(return)</strong></p><p><strong>其中須注意的是讓溫溼度的值可以正顯示要使用</strong>“””+str(溫/溼度變數)+”””</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">def Htmlpage():  html= """        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">h1</span>  <span class="token punctuation">&#123;</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> background-color<span class="token punctuation">:</span> orange<span class="token punctuation">;</span> margin-right<span class="token punctuation">:</span>5px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token selector">dl</span> <span class="token punctuation">&#123;</span> width<span class="token punctuation">:</span> 320px<span class="token punctuation">;</span> margin<span class="token punctuation">:</span> 12px auto<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token selector">dt</span> <span class="token punctuation">&#123;</span>           font-size<span class="token punctuation">:</span> 20pt<span class="token punctuation">;</span> color<span class="token punctuation">:</span> #444<span class="token punctuation">;</span> background-color<span class="token punctuation">:</span> #ddd<span class="token punctuation">;</span>          margin<span class="token punctuation">:</span> 6pt 0<span class="token punctuation">;</span> padding<span class="token punctuation">:</span> 6pt 12pt<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">dd</span> <span class="token punctuation">&#123;</span>          text-align<span class="token punctuation">:</span> right<span class="token punctuation">;</span> padding-right<span class="token punctuation">:</span> 6pt<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.num</span> <span class="token punctuation">&#123;</span> font-size<span class="token punctuation">:</span> 36pt<span class="token punctuation">;</span> color<span class="token punctuation">:</span> dodgerblue<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>      </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>ESP32 DHT11/12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>Temp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>num</span><span class="token punctuation">></span></span>"""+str(temp)+"""°C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>Humi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>num</span><span class="token punctuation">></span></span>"""+str(humi)+""" %<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>    """  return html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><em>設制監聽套接端口</em></strong></p><p><strong><em>函式參考-</em></strong><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/5661741645243406963?hl=zh-TW#">我的micropython函式筆記</a></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">s&#x3D;socket.socket(socket.AF_INET, socket.SOCK_STREAM)s.bind((&#39;&#39;, 80))s.listen(5)while True:    conn, addr &#x3D; s.accept()    print(&#39;Got a connection from %s&#39; % str(addr))    req &#x3D; conn.recv(1024)    print(&#39;Content &#x3D; %s&#39; % str(req))    sensor_reading &#x3D; readTempAndHumi()    print(sensor_reading)    respone &#x3D; Htmlpage()    conn.send(&quot;http&#x2F;1.1 200 OK\n&quot;)    conn.send(&quot;Content-Type: text&#x2F;html; charset&#x3D;&#39;utf-8&#39;\n&quot;)    conn.send(&quot;Connection: close\n\n&quot;)    conn.sendall(respone)    conn.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/5661741645243406963?hl=zh-TW#"><img src="https://lh3.googleusercontent.com/-stu-h6hdsgc/YOaaTDfLfOI/AAAAAAAAeaQ/NiNjk1xHXl0YOU_J8btvb9Qd3isHo6ZvwCNcBGAsYHQ/s1600/1625725506698515-0.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> micropython </category>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dht11/dht12 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS1306實時時鐘模組-micropython</title>
      <link href="/2021/08/29/DS1306%E5%AF%A6%E6%99%82%E6%99%82%E9%90%98%E6%A8%A1%E7%B5%84-micropython/"/>
      <url>/2021/08/29/DS1306%E5%AF%A6%E6%99%82%E6%99%82%E9%90%98%E6%A8%A1%E7%B5%84-micropython/</url>
      
        <content type="html"><![CDATA[<h1 id="DS1306實時時鐘模組-micropython"><a href="#DS1306實時時鐘模組-micropython" class="headerlink" title="DS1306實時時鐘模組-micropython"></a>DS1306實時時鐘模組-micropython</h1><h6 id="tags-micropython-ds1302"><a href="#tags-micropython-ds1302" class="headerlink" title="tags: micropython ds1302"></a>tags: <code>micropython</code> <code>ds1302</code></h6><p>這是廣華電子上的介紹<br>◎ 時鐘具有能計算2100 年之前的秒、分、時、日、星期、月、年的能力，還有閏年調整的能力<br>◎ 31 8 位暫存數據存儲RAM<br>◎ 串行 I/O 口方式使得管腳數量最少<br>◎ 寬範圍工作電壓2.0 5.5V<br>◎ 工作電流 2.0V 時,小於300nA<br>◎ 讀 / 寫時鐘或RAM 數據時有兩種傳送方式單字節傳送和多字節傳送字符組方式<br>◎ 8 腳DIP 封裝或可選的8 腳SOIC 封裝根據表面裝配<br>◎ 簡單 3 線接口<br>◎ 與 TTL 相容Vcc=5V<br>◎ 雙電源管用於主電源和備份電源供應<br>◎ 電池：CR2032 電壓3V，電流260mAh<br>◎ 晶振32.768KHz，匹配電容為6pF<br>◎ DS1302為8腳直插大晶片，晶片下面有IC座，方便更換及插拔片<br>6.模塊工作電壓兼容3.3V/5V，可與5V及3.3V單片機連接<br>◎帶4個定位孔，直徑3.1mm<br>◎工作溫度：0°～70°</p><p>◎ 安裝注意!<br>1.VCC與GND千萬不要接反，以免燒壞晶片<br>2.51系列單晶片P0接腳需要連接上拉電阻，如果單晶片沒有連接上拉電阻，可以將數據線接到其他接腳</p><h2 id="步驟1"><a href="#步驟1" class="headerlink" title="步驟1:"></a>步驟1:</h2><p>下載sd1306.py並上傳到微控板上<br><a href="https://github.com/omarbenhamid/micropython-ds1302-rtc">https://github.com/omarbenhamid/micropython-ds1302-rtc</a></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">from machine import PinDS1302_REG_SECOND &#x3D; (0x80)DS1302_REG_MINUTE &#x3D; (0x82)DS1302_REG_HOUR   &#x3D; (0x84)DS1302_REG_DAY    &#x3D; (0x86)DS1302_REG_MONTH  &#x3D; (0x88)DS1302_REG_WEEKDAY&#x3D; (0x8A)DS1302_REG_YEAR   &#x3D; (0x8C)DS1302_REG_WP     &#x3D; (0x8E)DS1302_REG_CTRL   &#x3D; (0x90)DS1302_REG_RAM    &#x3D; (0xC0)class DS1302:    def __init__(self, clk, dio, cs):        self.clk &#x3D; clk        self.dio &#x3D; dio        self.cs &#x3D; cs        self.clk.init(Pin.OUT)        self.cs.init(Pin.OUT)    def _dec2hex(self, dat):        return (dat&#x2F;&#x2F;10) * 16 + (dat % 10)    def _hex2dec(self, dat):        return (dat&#x2F;&#x2F;16) * 10 + (dat % 16)    def _write_byte(self, dat):        self.dio.init(Pin.OUT)        for i in range(8):            self.dio.value((dat &gt;&gt; i) &amp; 1)            self.clk.value(1)            self.clk.value(0)    def _read_byte(self):        d &#x3D; 0        self.dio.init(Pin.IN)        for i in range(8):            d &#x3D; d | (self.dio.value() &lt;&lt; i)            self.clk.value(1)            self.clk.value(0)        return d    def _get_reg(self, reg):        self.cs.value(1)        self._write_byte(reg)        t &#x3D; self._read_byte()        self.cs.value(0)        return t    def _set_reg(self, reg, dat):        self.cs.value(1)        self._write_byte(reg)        self._write_byte(dat)        self.cs.value(0)    def _wr(self, reg, dat):        self._set_reg(DS1302_REG_WP, 0)        self._set_reg(reg, dat)        self._set_reg(DS1302_REG_WP, 0x80)    def start(self):        t &#x3D; self._get_reg(DS1302_REG_SECOND + 1)        self._wr(DS1302_REG_SECOND, t &amp; 0x7f)    def stop(self):        t &#x3D; self._get_reg(DS1302_REG_SECOND + 1)        self._wr(DS1302_REG_SECOND, t | 0x80)    def second(self, second&#x3D;None):        if second &#x3D;&#x3D; None:            return self._hex2dec(self._get_reg(DS1302_REG_SECOND+1)) % 60        else:            self._wr(DS1302_REG_SECOND, self._dec2hex(second % 60))    def minute(self, minute&#x3D;None):        if minute &#x3D;&#x3D; None:            return self._hex2dec(self._get_reg(DS1302_REG_MINUTE+1))        else:            self._wr(DS1302_REG_MINUTE, self._dec2hex(minute % 60))    def hour(self, hour&#x3D;None):        if hour &#x3D;&#x3D; None:            return self._hex2dec(self._get_reg(DS1302_REG_HOUR+1))        else:            self._wr(DS1302_REG_HOUR, self._dec2hex(hour % 24))    def weekday(self, weekday&#x3D;None):        if weekday &#x3D;&#x3D; None:            return self._hex2dec(self._get_reg(DS1302_REG_WEEKDAY+1))        else:            self._wr(DS1302_REG_WEEKDAY, self._dec2hex(weekday % 8))    def day(self, day&#x3D;None):        if day &#x3D;&#x3D; None:            return self._hex2dec(self._get_reg(DS1302_REG_DAY+1))        else:            self._wr(DS1302_REG_DAY, self._dec2hex(day % 32))    def month(self, month&#x3D;None):        if month &#x3D;&#x3D; None:            return self._hex2dec(self._get_reg(DS1302_REG_MONTH+1))        else:            self._wr(DS1302_REG_MONTH, self._dec2hex(month % 13))    def year(self, year&#x3D;None):        if year &#x3D;&#x3D; None:            return self._hex2dec(self._get_reg(DS1302_REG_YEAR+1)) + 2000        else:            self._wr(DS1302_REG_YEAR, self._dec2hex(year % 100))    def date_time(self, dat&#x3D;None):        if dat &#x3D;&#x3D; None:            return [self.year(), self.month(), self.day(), self.weekday(), self.hour(), self.minute(), self.second()]        else:            self.year(dat[0])            self.month(dat[1])            self.day(dat[2])            self.weekday(dat[3])            self.hour(dat[4])            self.minute(dat[5])            self.second(dat[6])    def ram(self, reg, dat&#x3D;None):        if dat &#x3D;&#x3D; None:            return self._get_reg(DS1302_REG_RAM + 1 + (reg % 31)*2)        else:            self._wr(DS1302_REG_RAM + (reg % 31)*2, dat)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="步驟2"><a href="#步驟2" class="headerlink" title="步驟2:"></a>步驟2:</h2><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; DS1302 CLK&#x2F;SCLK --&gt;  5&#x2F;&#x2F; DS1302 DAT&#x2F;IO --&gt;  4&#x2F;&#x2F; DS1302 RST&#x2F;CE --&gt;  2&#x2F;&#x2F; DS1302 VCC --&gt;  3.3v - 5v&#x2F;&#x2F; DS1302 GND --&gt;  GND<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="步驟3"><a href="#步驟3" class="headerlink" title="步驟3:"></a>步驟3:</h2><p>上傳程式碼</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">import ds1302from machine import PIN_WAKE, Pinimport timeds &#x3D; ds1302.DS1302(Pin(5), Pin(4), Pin(2))while True:    print(&quot;Today is &#123;&#125;&#x2F;&#123;&#125;&#x2F;&#123;&#125;&quot;.format(ds.year(), ds.month(), ds.day()))    print(&quot;Time: &#123;&#125;:&#123;&#125;:&#123;&#125;&quot;.format(ds.hour(), ds.minute(), ds.second()))    print(&quot;&#x3D;&quot;*10)    time.sleep(1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Today is 2021&#x2F;7&#x2F;28Time: 12:19:18&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Today is 2021&#x2F;7&#x2F;28Time: 12:19:19&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Today is 2021&#x2F;7&#x2F;28Time: 12:19:20&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Today is 2021&#x2F;7&#x2F;28Time: 12:19:21&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="步驟4"><a href="#步驟4" class="headerlink" title="步驟4:"></a>步驟4:</h2><p>再將ssd1306.py下載後並上傳到微控板</p><h2 id="步驟5"><a href="#步驟5" class="headerlink" title="步驟5:"></a>步驟5:</h2><p>oled接線</p><h2 id="步驟6"><a href="#步驟6" class="headerlink" title="步驟6:"></a>步驟6:</h2><pre class="line-numbers language-py" data-language="py"><code class="language-py">import ds1302, ssd1306from machine import PIN_WAKE, Pinfrom machine import SoftI2Cimport timewidth &#x3D; 128height &#x3D; 64i2c &#x3D; SoftI2C(scl&#x3D;Pin(22), sda&#x3D;Pin(21))oled &#x3D; ssd1306.SSD1306_I2C(width, height, i2c)ds &#x3D; ds1302.DS1302(Pin(5), Pin(4), Pin(2))while True:    oled.text(str(ds.year()), 0, 1)    oled.text(&quot;&#x2F;&quot;, 30, 1)    oled.text(str(ds.month()), 40, 1)    oled.text(&quot;&#x2F;&quot;, 50, 1)    oled.text(str(ds.day()), 60, 1)        oled.text(str(ds.hour()), 30, 30)    oled.text(&quot;:&quot;, 50, 30)    oled.text(str(ds.minute()), 60, 30)    oled.text(&quot;:&quot;, 80, 30)    oled.text(str(ds.second()), 90, 30)    oled.show()    time.sleep(1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="video-container"><iframe src="https://www.youtube.com/embed/HnIFDhD1DxY" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content>
      
      
      <categories>
          
          <category> micropython </category>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ds1306 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS18B20溫度感應模組+顯示網頁-micropython</title>
      <link href="/2021/08/29/DS18B20%E6%BA%AB%E5%BA%A6%E6%84%9F%E6%87%89%E6%A8%A1%E7%B5%84-%E9%A1%AF%E7%A4%BA%E7%B6%B2%E9%A0%81-micropython/"/>
      <url>/2021/08/29/DS18B20%E6%BA%AB%E5%BA%A6%E6%84%9F%E6%87%89%E6%A8%A1%E7%B5%84-%E9%A1%AF%E7%A4%BA%E7%B6%B2%E9%A0%81-micropython/</url>
      
        <content type="html"><![CDATA[<h1 id="DS18B20溫度感應模組-顯示網頁-micropython"><a href="#DS18B20溫度感應模組-顯示網頁-micropython" class="headerlink" title="DS18B20溫度感應模組+顯示網頁-micropython"></a>DS18B20溫度感應模組+顯示網頁-micropython</h1><h6 id="tags-micropython-ds18b20"><a href="#tags-micropython-ds18b20" class="headerlink" title="tags: micropython ds18b20"></a>tags: <code>micropython</code> ds18b20</h6><hr><p>DS18B20 溫度傳感器是一種單線數字溫度傳感器。這意味著它只需要一根數據線（和 GND）即可與您的 ESP32 或 ESP8266 通信。 </p><p>它可以由外部電源供電，也可以從數據線獲取電源（稱為“寄生模式”），從而無需外部電源。</p><p>以下是 DS18B20 溫度傳感器最相關規格的摘要： </p><p>通過單線總線通信<br>電源範圍：3.0V 至 5.5V<br>工作溫度範圍：-55ºC 至 +125ºC<br>精度 +/-0.5 ºC（介於 -10ºC 至 85ºC 之間）**</p><p><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/5051662257603737866?hl=zh-TW#"><img src="https://lh3.googleusercontent.com/-M5Mg46TDQM0/YPjn5-wneYI/AAAAAAAAegI/oEFR5CjjUgAsSSWao7HOggVsgpzjWt-QQCNcBGAsYHQ/w407-h266/image.png"></a></p><p><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/5051662257603737866?hl=zh-TW#"><img src="https://lh3.googleusercontent.com/-vLA_oPaKP3s/YPjoBdCR_iI/AAAAAAAAegM/JtHMyZzu1Fs78AdoOhlIBrBnbn_PR0geACNcBGAsYHQ/w457-h257/image.png"></a></p><hr><h2 id="接線"><a href="#接線" class="headerlink" title="接線"></a>接線</h2><p><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/5051662257603737866?hl=zh-TW#"><img src="https://lh3.googleusercontent.com/-PalBcnYvW7s/YPjoVWAna1I/AAAAAAAAegY/K9YqBp7hLB8BoFo-disKoJwNDmm65hd6gCNcBGAsYHQ/w457-h496/image.png"></a></p><h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><pre class="line-numbers language-py" data-language="py"><code class="language-py">from machine import Pinfrom time import sleepimport timeimport onewire, ds18x20  dsSensor&#x3D;ds18x20.DS18X20(onewire.OneWire(Pin(4)))scan&#x3D;dsSensor.scan()print(&quot;Devices: &quot;,scan)while True:    rows&#x3D;ds_sensor.scan()    print(&quot;The devices: &quot;, rows)    sleep(1)    for row in rows:      ds_sensor.convert_temp()      print(row)      temp&#x3D;ds_sensor.read_temp(row) print(temp)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解析</strong></p><p><strong>匯入Pin,sleep,單總線,溫度模組</strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">from machine import Pinfrom time import sleepimport timeimport onewire, ds18x20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><em>構造函數</em></strong></p><p><strong><em>ow=onewire.OneWire(machine.Pin(id))</em></strong></p><p><strong><em>構建單總線對象。 id:引腳編號；</em></strong></p><p><strong><em>使用方法</em></strong></p><p><strong><em>ow.scan()</em></strong></p><p><strong><em>構造函數</em></strong></p><p><strong><em>ds=ds18x20.DS18X20(ow)</em></strong></p><p><strong><em>構建 DS18B20 傳感器對象。 ow:定義好的單總線對象；</em></strong></p><p><strong><em>使用方法</em></strong></p><p><strong><em>ds.scan()</em></strong></p><p><strong><em>掃描總線上的設備。返回設備地址，支持多設備同時掛載。</em></strong></p><p><strong><em>ds.convert_temp()</em></strong></p><p><strong><em>溫度轉換。</em></strong></p><p><strong><em>ds.read_temp(rom)</em></strong></p><p><strong><em>獲取溫度值。 rom：表示對應的設備號。</em></strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">dsSensor&#x3D;ds18x20.DS18X20(onewire.OneWire(Pin(4)))scan&#x3D;dsSensor.scan()print(&quot;Devices: &quot;,scan)while True:    rows&#x3D;ds_sensor.scan()    print(&quot;The devices: &quot;, rows)    sleep(1)    for row in rows:      ds_sensor.convert_temp()      print(row)      temp&#x3D;ds_sensor.read_temp(row) print(temp)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>顯示結果</strong></p><pre class="line-numbers language-none"><code class="language-none">Devices:  \[bytearray(b&#39;(t~\\x19\\r\\x00\\x00.&#39;)\]bytearray(b&#39;(t~\\x19\\r\\x00\\x00.&#39;)26.4375bytearray(b&#39;(t~\\x19\\r\\x00\\x00.&#39;)26.375bytearray(b&#39;(t~\\x19\\r\\x00\\x00.&#39;)26.375bytearray(b&#39;(t~\\x19\\r\\x00\\x00.&#39;)26.5625    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="加上網頁顯示數據"><a href="#加上網頁顯示數據" class="headerlink" title="加上網頁顯示數據"></a>加上網頁顯示數據</h2><p><strong>首先動手寫一個html,並把它封包起來方便呼叫</strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">def web_html():  html&#x3D;&quot;&quot;&quot;&lt;!DOCTYPE html&gt;      &lt;html&gt;      &lt;head&gt;        &lt;meta charset&#x3D;&quot;utf-8&quot; &#x2F;&gt;        &lt;meta http-equiv&#x3D;&quot;refresh&quot; content&#x3D;&quot;1&quot; &#x2F;&gt;        &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;        &lt;title&gt;ESP32 TO DS18B20&lt;&#x2F;title&gt;        &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;          body &#123;            color: rgb(9, 39, 95);            background-color: rgb(214, 205, 231);            font-family: &#39;Lucida Sans&#39;, &#39;Lucida Sans Regular&#39;, &#39;Lucida Grande&#39;, &#39;Lucida Sans Unicode&#39;, Geneva, Verdana, sans-serif;          &#125;          h1 &#123;text-align: center;&#125;          h2 &#123;text-align: center; color: rgb(60, 12, 114);&#125;          h3 &#123;text-align: center; color: deeppink;&#125;          dd &#123;text-align: center;&#125;        &lt;&#x2F;style&gt;      &lt;&#x2F;head&gt;      &lt;body&gt;        &lt;h1&gt;ESP32 TO DS18D20&lt;&#x2F;h1&gt;        &lt;p Align&#x3D;center&gt;&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;media.istockphoto.com&#x2F;photos&#x2F;fahrenheit-and-celsius-scale-meteorology-thermometer-for-measuring-picture-id1138308244&quot; height&#x3D;&quot;150&quot; width&#x3D;&quot;100&quot; &gt;&lt;&#x2F;p&gt;        &lt;dl&gt;          &lt;dt&gt;&lt;h2&gt;Temperature&lt;&#x2F;h2&gt;&lt;&#x2F;dt&gt;          &lt;h3&gt;&lt;dd class&#x3D;&quot;val&quot;&gt;&quot;&quot;&quot;+str(round(temp, 2))+&quot;&quot;&quot; *C&lt;&#x2F;dd&gt;&lt;h3&gt;        &lt;&#x2F;dl&gt;        &lt;br&gt;&lt;&#x2F;br&gt;        &lt;dl&gt;          &lt;p&gt;&lt;i class&#x3D;&quot;fas fa-temperature-high&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;p&gt;          &lt;dt&gt;&lt;h2&gt;Temperature&lt;&#x2F;h2&gt;&lt;&#x2F;dt&gt;          &lt;h3&gt;&lt;dd class&#x3D;&quot;val&quot;&gt;&quot;&quot;&quot;+str(round(temp * (9&#x2F;5) + 32.0, 2))+&quot;&quot;&quot; *F&lt;&#x2F;dd&gt;&lt;&#x2F;h3&gt;        &lt;&#x2F;dl&gt;      &lt;&#x2F;body&gt;      &lt;&#x2F;html&gt;&quot;&quot;&quot;  return html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>之後加入wifi和socket套接客戶端的相關的接收和請求</strong></p><p><strong>整個程式碼如下:</strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">import socketfrom time import sleepimport timefrom machine import Pinimport onewire, ds18x20import network  ssid&#x3D;&quot;基地台名稱&quot;password&#x3D;&quot;基地台密碼&quot;def connected_wifi():  global ssid, password  wifi&#x3D;network.WLAN(network.STA_IF)  wifi.active(True)  wifi.connect(ssid, password)  while wifi.isconnected()&#x3D;&#x3D;False:    pass  print(&quot;connected successful!&quot;)  print(&quot;IP: &#123;&#125;&quot;.format(wifi.ifconfig()))def read_sensor():  global temp  ds_sensor&#x3D;ds18x20.DS18X20(onewire.OneWire(Pin(4)))  while True:    rows&#x3D;ds_sensor.scan()    print(&quot;The devices: &quot;, rows)    sleep(1)    for row in rows:      ds_sensor.convert_temp()      print(row)      temp&#x3D;ds_sensor.read_temp(row)      return tempdef web_html():  html&#x3D;&quot;&quot;&quot;&lt;!DOCTYPE html&gt;      &lt;html&gt;      &lt;head&gt;        &lt;meta charset&#x3D;&quot;utf-8&quot; &#x2F;&gt;        &lt;meta http-equiv&#x3D;&quot;refresh&quot; content&#x3D;&quot;1&quot; &#x2F;&gt;        &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;        &lt;title&gt;ESP32 TO DS18B20&lt;&#x2F;title&gt;        &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;          body &#123;            color: rgb(9, 39, 95);            background-color: rgb(214, 205, 231);            font-family: &#39;Lucida Sans&#39;, &#39;Lucida Sans Regular&#39;, &#39;Lucida Grande&#39;, &#39;Lucida Sans Unicode&#39;, Geneva, Verdana, sans-serif;          &#125;          h1 &#123;text-align: center;&#125;          h2 &#123;text-align: center; color: rgb(60, 12, 114);&#125;          h3 &#123;text-align: center; color: deeppink;&#125;          dd &#123;text-align: center;&#125;        &lt;&#x2F;style&gt;      &lt;&#x2F;head&gt;      &lt;body&gt;        &lt;h1&gt;ESP32 TO DS18D20&lt;&#x2F;h1&gt;        &lt;p Align&#x3D;center&gt;&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;media.istockphoto.com&#x2F;photos&#x2F;fahrenheit-and-celsius-scale-meteorology-thermometer-for-measuring-picture-id1138308244&quot; height&#x3D;&quot;150&quot; width&#x3D;&quot;100&quot; &gt;&lt;&#x2F;p&gt;        &lt;dl&gt;          &lt;dt&gt;&lt;h2&gt;Temperature&lt;&#x2F;h2&gt;&lt;&#x2F;dt&gt;          &lt;h3&gt;&lt;dd class&#x3D;&quot;val&quot;&gt;&quot;&quot;&quot;+str(round(temp, 2))+&quot;&quot;&quot; *C&lt;&#x2F;dd&gt;&lt;h3&gt;        &lt;&#x2F;dl&gt;        &lt;br&gt;&lt;&#x2F;br&gt;        &lt;dl&gt;          &lt;p&gt;&lt;i class&#x3D;&quot;fas fa-temperature-high&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;p&gt;          &lt;dt&gt;&lt;h2&gt;Temperature&lt;&#x2F;h2&gt;&lt;&#x2F;dt&gt;          &lt;h3&gt;&lt;dd class&#x3D;&quot;val&quot;&gt;&quot;&quot;&quot;+str(round(temp * (9&#x2F;5) + 32.0, 2))+&quot;&quot;&quot; *F&lt;&#x2F;dd&gt;&lt;&#x2F;h3&gt;        &lt;&#x2F;dl&gt;      &lt;&#x2F;body&gt;      &lt;&#x2F;html&gt;&quot;&quot;&quot;  return html  connected_wifi()s&#x3D;socket.socket(socket.AF_INET, socket.SOCK_STREAM)s.bind((&#39;&#39;, 80))s.listen(5)  while True:  conn, addr &#x3D; s.accept()  print(&#39;Got a connection from %s&#39;%str(addr))  request &#x3D; conn.recv(1024)  print(&quot;content: %s&quot;%str(request))  read_temp&#x3D;read_sensor()  print(read_temp)  res&#x3D;web_html()  conn.send(&quot;http&#x2F;1.1 200 OK\n&quot;)  conn.send(&quot;Content-Type: text&#x2F;html\n&quot;)  conn.send(&quot;Connection: close\n\n&quot;)  conn.sendall(res)  conn.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p><strong>匯入machine, sockt, network, HC_SR04模組</strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">from machine import Pin from HC_SR04 import HCSR04import socket, network<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>設定wifi連線</strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">def connected_wifi():  global ssid, password  wifi&#x3D;network.WLAN(network.STA_IF)  wifi.active(True)  wifi.connect(ssid, password)  while wifi.isconnected()&#x3D;&#x3D;False:    pass  print(&quot;connected successful!&quot;) print(&quot;IP: &#123;&#125;&quot;.format(wifi.ifconfig()))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>讀取DS18B20數據</strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">def read_sensor():  global temp  ds_sensor&#x3D;ds18x20.DS18X20(onewire.OneWire(Pin(4)))  while True:    rows&#x3D;ds_sensor.scan()    print(&quot;The devices: &quot;, rows)    sleep(1)    for row in rows:      ds_sensor.convert_temp()      print(row)      temp&#x3D;ds_sensor.read_temp(row)      return temp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>socket套接</strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">s&#x3D;socket.socket(socket.AF_INET, socket.SOCK_STREAM)s.bind((&#39;&#39;, 80))s.listen(5)while True:  conn, addr &#x3D; s.accept()  print(&#39;Got a connection from %s&#39;%str(addr))  request &#x3D; conn.recv(1024)  print(&quot;content: %s&quot;%str(request))  read_temp&#x3D;read_sensor()  print(read_temp)  res&#x3D;web_html()  conn.send(&quot;http&#x2F;1.1 200 OK\\n&quot;)  conn.send(&quot;Content-Type: text&#x2F;html\n&quot;)  conn.send(&quot;Connection: close\n\n&quot;)  conn.sendall(res)  conn.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/5051662257603737866?hl=zh-TW#"><img src="https://1.bp.blogspot.com/-2BVcuDPUyWo/YPpATv8mUUI/AAAAAAAAegs/M-2s_MNuCJ88coTfrj8QqGimPFFIcZ7RQCNcBGAsYHQ/w644-h324/2.jpg"></a></p>]]></content>
      
      
      <categories>
          
          <category> micropython </category>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DS18B20 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>溫濕度傳感器(DHT11/12)+ThingSpeak</title>
      <link href="/2021/08/29/%E6%BA%AB%E6%BF%95%E5%BA%A6%E5%82%B3%E6%84%9F%E5%99%A8-DHT11-12-ThingSpeak/"/>
      <url>/2021/08/29/%E6%BA%AB%E6%BF%95%E5%BA%A6%E5%82%B3%E6%84%9F%E5%99%A8-DHT11-12-ThingSpeak/</url>
      
        <content type="html"><![CDATA[<h1 id="溫濕度傳感器-DHT11-12-ThingSpeak"><a href="#溫濕度傳感器-DHT11-12-ThingSpeak" class="headerlink" title="溫濕度傳感器(DHT11/12)+ThingSpeak"></a>溫濕度傳感器(DHT11/12)+ThingSpeak</h1><h6 id="tags-micropython-thingspeak-dht11-dht12"><a href="#tags-micropython-thingspeak-dht11-dht12" class="headerlink" title="tags: micropython thingspeak dht11/dht12"></a>tags: <code>micropython</code> <code>thingspeak</code> <code>dht11/dht12</code></h6><p><a href="https://1.bp.blogspot.com/-wKr7F1FYVIg/YPjC09ruT-I/AAAAAAAAegA/lJ2_JcIB1eUkbiPNuHqpejBJzidrbNYEwCNcBGAsYHQ/s1920/1.jpg"><img src="https://1.bp.blogspot.com/-wKr7F1FYVIg/YPjC09ruT-I/AAAAAAAAegA/lJ2_JcIB1eUkbiPNuHqpejBJzidrbNYEwCNcBGAsYHQ/w633-h269/1.jpg"></a></p><hr><p><strong>回顧DHT11/12實作紀錄</strong></p><p><strong>基本介紹和實驗參考-</strong><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/2584628173386400659?hl=zh-TW#">https://esp32-blairan.blogspot.com/2021/07/dht11dht12-esp32.html</a></p><hr><p><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/2584628173386400659?hl=zh-TW#"><img src="http://2.bp.blogspot.com/-3syBdItbhrI/Vb6X8sJx7tI/AAAAAAAAEO8/cMmlSOV142M/s320/dht11.jpg"></a></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">import dhtfrom machine import Pinfrom time import sleepdef measureTemp():    sensor&#x3D;dht.DHT11(Pin(4))    while True:        try:            sleep(2)            sensor.measure()            t&#x3D;sensor.temperature()            t_f&#x3D;t*(9&#x2F;5)+32            h&#x3D;sensor.humidity()            print(&quot;Temp: &#123;:.1f&#125;.C&quot;.format(t))            print(&quot;Temp: &#123;:.1f&#125;.F&quot;.format(t_f))            print(&quot;Humidity: &#123;:.1f&#125;&quot;.format(h))        except OSError as o:            print(&quot;Failed to read sensor.&quot;)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    measureTemp()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>載入dht庫(內建)</strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">import dhtfrom machine import Pinfrom time import sleep<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>指定DHT11腳位給sensor變數</strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">sensor&#x3D;dht.DHT11(Pin(4))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>給予while()每2秒不斷偵測</strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">sleep(2)sensor.measure()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>攝氏溫度(t)/華氏溫度(t_f)/濕度</strong></p><p><strong>其中攝氏轉換華氏的公式:攝氏x(9/5)+32</strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">t&#x3D;sensor.temperature()t_f&#x3D;t*(9&#x2F;5)+32h&#x3D;sensor.humidity()print(&quot;Temp: &#123;:.1f&#125;.C&quot;.format(t))print(&quot;Temp: &#123;:.1f&#125;.F&quot;.format(t_f))print(&quot;Humidity: &#123;:.1f&#125;&quot;.format(h))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h2><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; Temp: 26.0.CTemp: 78.8.FHumidity: 27.0Temp: 26.0.CTemp: 78.8.FHumidity: 27.0Temp: 26.0.CTemp: 78.8.FHumidity: 27.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="如何上傳數據到ThingSpeak"><a href="#如何上傳數據到ThingSpeak" class="headerlink" title="如何上傳數據到ThingSpeak"></a>如何上傳數據到ThingSpeak</h2><p><strong>先到此<a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/2584628173386400659?hl=zh-TW#">ThingSpeak</a>網站註冊一帳號</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/2584628173386400659?hl=zh-TW#"><img src="https://1.bp.blogspot.com/-4RxhjYmlh_w/YPi8P5fsN8I/AAAAAAAAeeM/yzV1oiE05VgEVVeNwhVCtsFwQ1cfASN-gCNcBGAsYHQ/w934-h353/4.jpg"></a></p><p><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/2584628173386400659?hl=zh-TW#"><img src="https://1.bp.blogspot.com/-M_V8HTIXrOE/YPi8nmVCETI/AAAAAAAAee0/1F322PD3xF8K2cShI60AYjD5SWHSU1H8gCNcBGAsYHQ/w862-h326/3.jpg"></a></p><p><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/2584628173386400659?hl=zh-TW#"><img src="https://1.bp.blogspot.com/-g2Npin1ea78/YPi9X5a3scI/AAAAAAAAefY/NIGB1rmS9EktBe1uC1izXbW9rrMA0VrEgCNcBGAsYHQ/w659-h286/5.jpg"></a></p><p><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/2584628173386400659?hl=zh-TW#"><img src="https://1.bp.blogspot.com/-mDsWT2vL9uI/YPi9gFDE3tI/AAAAAAAAefc/TtXCW9i2P949XybIa09n606lHwmW-PnwACNcBGAsYHQ/w654-h284/6.jpg"></a></p><p><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/2584628173386400659?hl=zh-TW#"><img src="https://1.bp.blogspot.com/-mrzm6S71djU/YPi9lqFmdLI/AAAAAAAAefg/Xr5UMJs2m9wzKy6hHJvW-_NDyP5wFljYwCNcBGAsYHQ/w651-h283/7.jpg"></a></p><p><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/2584628173386400659?hl=zh-TW#"><img src="https://1.bp.blogspot.com/-Dk5fmn8xP0Q/YPi9ro_CJvI/AAAAAAAAefk/8bRay8G7aVYqN5E4szIINBNhkAm0aAYcwCNcBGAsYHQ/w692-h368/8.jpg"></a></p><hr><p><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/2584628173386400659?hl=zh-TW#"><img src="https://1.bp.blogspot.com/-FcMZGCGvGjI/YPi-kOFx8II/AAAAAAAAefw/8lNcoOipruwT3wRTrRYwn36ZL8Eldl8QQCNcBGAsYHQ/w758-h329/%25E6%2593%25B7%25E5%258F%2596_2021_07_22_08_13_19_130.jpg"></a></p><hr><h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><pre class="line-numbers language-py" data-language="py"><code class="language-py">import network, urequestsfrom machine import Pinimport dhtfrom time import sleep  ssid&#x3D;&quot;基地台名稱&quot;password&#x3D;&quot;基地台密碼&quot;api_key&#x3D;&quot;VCJQHQFVSMB-----&quot;dht11&#x3D;dht.DHT11(Pin(27))sleep(1)def wifiContent():    global ssid, password    wifi&#x3D;network.WLAN(network.STA_IF)    wifi.active(True)    wifi.connect(ssid, password)    while wifi.isconnected() &#x3D;&#x3D; False:        pass    print(&quot;connected successful!&quot;)    print(&quot;IP: &#123;&#125;&quot;.format(wifi.ifconfig()))def getDHT():    while (1):        dht11.measure()        d&#x3D;dht11.temperature()        rh&#x3D;dht11.humidity()        print(&quot;Temp: &#123;:.1f&#125;*C,  Humi: &#123;:.1f&#125;%RH&quot;.format(d, rh))        uloadUrl&#x3D;&quot;https:&#x2F;&#x2F;api.thingspeak.com&#x2F;update?api_key&#x3D;&#123;&#125;&amp;field1&#x3D;&#123;&#125;&amp;field2&#x3D;&#123;&#125;&quot;.format(api, d, rh)        try:            res&#x3D;urequests.get(uloadUrl)            print(res.text)        except OSError as e:            print(e)        sleep(16)if __name__&#x3D;&#x3D;&quot;__main__&quot;:    wifiContent()    getDHT()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p><strong><em>匯入對應的模組,其urequest是小型爬蟲,可用於抓取和上傳</em></strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">import network, urequestsfrom machine import Pinimport dhtfrom time import sleep<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><em>基地台名稱和密碼先給予變數,還有剛在ThingSpeak給的api_key</em></strong></p><p><strong><em>dht腳位設定,停止一秒使其初始化完全</em></strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">ssid&#x3D;&quot;基地台名稱&quot;password&#x3D;&quot;基地台密碼&quot;api&#x3D;&quot;VCJQHQFVSMB-----&quot;dht11&#x3D;dht.DHT11(Pin(27))sleep(1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em><strong>這個封包裡是連接wifi的流程</strong></em></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">def wifiContent():    global ssid, password    wifi&#x3D;network.WLAN(network.STA_IF)    wifi.active(True)    wifi.connect(ssid, password)    while wifi.isconnected() &#x3D;&#x3D; False:        pass    print(&quot;connected successful!&quot;)    print(&quot;IP: &#123;&#125;&quot;.format(wifi.ifconfig()))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><em>這個封包裡是讀取dht11/12數據,和上傳到ThingSpeak同步</em></strong></p><p>*<strong>如果有一個以上的數據,除了ThingSpeak網站上要設定一個以上的對應欄位,再來就是程式的網址格式,例如:</strong></p><p><strong>api_key</strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">api_key&#x3D;&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2個數據上傳到網站的2個欄位,field1代表第一個欄位,field2代表第二個欄位</strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">&amp;field1&#x3D;&#123;&#125;&amp;field2&#x3D;&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-py" data-language="py"><code class="language-py">def getDHT():    while (1):        dht11.measure()        d&#x3D;dht11.temperature()        rh&#x3D;dht11.humidity()        print(&quot;Temp: &#123;:.1f&#125;*C,  Humi: &#123;:.1f&#125;%RH&quot;.format(d, rh))        uloadUrl&#x3D;&quot;https:&#x2F;&#x2F;api.thingspeak.com&#x2F;update?api_key&#x3D;&#123;&#125;&amp;field1&#x3D;&#123;&#125;&amp;field2&#x3D;&#123;&#125;&quot;.format(api, d, rh)        try:            res&#x3D;urequests.get(uloadUrl)            print(res.text)        except OSError as e:            print(e)        sleep(16)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/2584628173386400659?hl=zh-TW#"><img src="https://1.bp.blogspot.com/-lggjIDGj9VA/YPjA-2exaYI/AAAAAAAAef4/QN52OngWLS4MVqiFHVu2lF5D_EC-BE89wCNcBGAsYHQ/w730-h410/2.jpg"></a></p>]]></content>
      
      
      <categories>
          
          <category> micropython </category>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dht11/dht12 </tag>
            
            <tag> thingSpeak </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BMP280氣壓,溫度模組-micropython</title>
      <link href="/2021/08/29/BMP280%E6%B0%A3%E5%A3%93-%E6%BA%AB%E5%BA%A6%E6%A8%A1%E7%B5%84-micropython/"/>
      <url>/2021/08/29/BMP280%E6%B0%A3%E5%A3%93-%E6%BA%AB%E5%BA%A6%E6%A8%A1%E7%B5%84-micropython/</url>
      
        <content type="html"><![CDATA[<h1 id="BMP280氣壓-溫度模組-micropython"><a href="#BMP280氣壓-溫度模組-micropython" class="headerlink" title="BMP280氣壓,溫度模組-micropython"></a>BMP280氣壓,溫度模組-micropython</h1><h6 id="tags-micropython-bmp280"><a href="#tags-micropython-bmp280" class="headerlink" title="tags: micropython bmp280"></a>tags: <code>micropython</code> <code>bmp280</code></h6><p><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/2288121610458811026?hl=zh-TW#"><img src="https://1.bp.blogspot.com/-4LdM2J8lnOY/YPV1dYnda-I/AAAAAAAAecQ/OXHYgyYLfkgCzpZzyPV9wC_xhR4CiLv2ACNcBGAsYHQ/s320/21805656779815_796.jpg"></a></p><p>**_BMP280,該傳感器可以非常準確地測量氣壓和溫度。  </p><p>您可以使用 I2C 或 SPI 連接協議將其與您的 Arduino 板連接。它有一個 3.3V 穩壓器和電平轉換，因此您可以毫無問題地將它與 3V 或 5V 邏輯微控制器一起使用。_**</p><hr><h2 id="接線"><a href="#接線" class="headerlink" title="接線"></a>接線</h2><p>| BME280 | ESP32 |<br>| Vin | 3.3V |<br>| GND | GND |<br>| SCL | GPIO 22 |<br>| SDA | GPIO 21 |</p><p><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/2288121610458811026?hl=zh-TW#"><img src="https://i0.wp.com/randomnerdtutorials.com/wp-content/uploads/2018/08/ESP32-bme280_bb_f-768x669.png?resize=768,669&quality=100&strip=all&ssl=1"></a></p><hr><p><strong>將<a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/2288121610458811026?hl=zh-TW#">bmp280.py</a>上傳到板子裡,以便可載入函式庫</strong></p><p>**</p><p><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/2288121610458811026?hl=zh-TW#"><img src="https://1.bp.blogspot.com/-1m3Ca316Awg/YPYqYTi4jhI/AAAAAAAAeco/IfQy-3mEXxslGaYpVXR_pTnkesOTuea5wCNcBGAsYHQ/w711-h400/b.jpg"></a></p><p>**</p><hr><h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><pre class="line-numbers language-py" data-language="py"><code class="language-py">from machine import SoftI2C, Pin, sleepfrom bmp280 import BMP280while True:    i2c&#x3D;SoftI2C(sda&#x3D;Pin(21), scl&#x3D;Pin(22))    bmp&#x3D;BMP280(i2c)    temp&#x3D;bmp.temperature    pressure&#x3D;bmp.pressure    print(&quot;Tempture &#x3D; &#123;&#125; *C&quot;.format(temp))    print(&quot;Pressure &#x3D; &#123;&#125; hPa&quot;.format(pressure))    print(&quot;&#x3D;&quot;*20)    sleep(1000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-none"><code class="language-none">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;   Tempture &#x3D; 24.67 *C    Pressure &#x3D; 77892.58 hPa&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> micropython </category>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bmp280 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>網頁控制LED-micropython</title>
      <link href="/2021/08/29/%E7%B6%B2%E9%A0%81%E6%8E%A7%E5%88%B6LED-micropython/"/>
      <url>/2021/08/29/%E7%B6%B2%E9%A0%81%E6%8E%A7%E5%88%B6LED-micropython/</url>
      
        <content type="html"><![CDATA[<h1 id="網頁控制LED-micropython"><a href="#網頁控制LED-micropython" class="headerlink" title="網頁控制LED-micropython"></a>網頁控制LED-micropython</h1><p><strong>因為是用內建的LED所以不用接任何杜邦線</strong></p><h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><pre class="line-numbers language-py" data-language="py"><code class="language-py">from machine import Pinimport network, socket  ssid&#x3D;&quot;---&quot;password&#x3D;&quot;------&quot;led&#x3D;Pin(2, Pin.OUT)ledState&#x3D;&quot;OFF&quot;def sw_page():    if led.value() &#x3D;&#x3D; 1:        ledState&#x3D;&quot;ON&quot;    else:        ledState&#x3D;&quot;OFF&quot;    html&#x3D;&quot;&quot;&quot;            &lt;html&gt;        &lt;head&gt;            &lt;title&gt;ESP32 網頁伺服器控制練習&lt;&#x2F;title&gt;            &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial            scale&#x3D;1&quot;&gt;            &lt;link rel&#x3D;&quot;icon&quot; href&#x3D;&quot;data:,&quot;&gt;            &lt;style&gt;                html &#123;                    text-align: center;                    font-family: Arial;                    display: inline-block;                    margin: auto;&#125;                .button &#123;                    background-color: #e0e252; &#x2F;* Green *&#x2F;                    border: none;                    color: white;                    padding: 15px 35px;                    text-align: center;                    text-decoration: none;                    display: inline-block;                    font-size: 16px;                &#125;                .button2 &#123;                    background-color: #b0b1a2; &#x2F;* Green *&#x2F;                    padding: 15px 32px;                &#125;            &lt;&#x2F;style&gt;        &lt;&#x2F;head&gt;          &lt;body&gt;            &lt;h1&gt;ESP32 網頁伺服器控制練習&lt;&#x2F;h1&gt;            &lt;p&gt;GPIO-2 狀態: &lt;strong&gt;&quot;&quot;&quot; + ledState + &quot;&quot;&quot;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;            &lt;p&gt;&lt;a href&#x3D;&quot;&#x2F;on&quot;&gt;&lt;button class&#x3D;&quot;button&quot;&gt;ON&lt;&#x2F;button&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;            &lt;p&gt;&lt;a href&#x3D;&quot;&#x2F;off&quot;&gt;&lt;button class&#x3D;&quot;button button2&quot;&gt;OFF&lt;&#x2F;button&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;        &lt;&#x2F;body&gt;        &lt;&#x2F;html&gt;    &quot;&quot;&quot;    return htmlwifi&#x3D;network.WLAN(network.STA_IF)wifi.active(True)wifi.connect(ssid, password)while wifi.isconnected()&#x3D;&#x3D;False:    passprint(&quot;connected sccessful!&quot;)print(&quot;IP: &#123;&#125;&quot;.format(wifi.ifconfig()))  s&#x3D;socket.socket(socket.AF_INET, socket.SOCK_STREAM)s.bind((&#39;&#39;, 80))s.listen(5)  while True:    conn, addr &#x3D; s.accept()    print(&quot;got a connect from %s&quot;%str(addr))    request &#x3D; conn.recv(1024)    request &#x3D; str(request)    print(&quot;context &#x3D; %s&quot;%request)    led_on &#x3D; request.find(&quot;&#x2F;on&quot;)    led_off &#x3D; request.find(&quot;&#x2F;off&quot;)    if led_on &#x3D;&#x3D; 6:        led.value(1)        print(&quot;ON&quot;)    if led_off &#x3D;&#x3D; 6:        led.value(0)        print(&quot;OFF&quot;)    respones &#x3D; sw_page()    conn.send(&quot;HTTP&#x2F;1.1 200 OK\n&quot;)    conn.send(&quot;Context-Type: text&#x2F;html\n&quot;)    conn.send(&quot;Connection: close\n\n&quot;)    conn.sendall(respones)    conn.close()  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p><strong>匯入腳位和wifi和套接的模組</strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">from machine import Pinimport network, socket<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>wifi連線設定</strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">ssid&#x3D;&quot;基地台名稱&quot;password&#x3D;&quot;基地台密碼&quot;wifi&#x3D;network.WLAN(network.STA_IF)wifi.active(True)wifi.connect(ssid, password)while wifi.isconnected()&#x3D;&#x3D;False:    passprint(&quot;connected sccessful!&quot;)print(&quot;IP: &#123;&#125;&quot;.format(wifi.ifconfig()))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>主要這裡是前端網頁,if和else是在控制網頁的開啓就顯示ON,否則顯示OFF</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> sw_page<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ifled<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>ledState<span class="token operator">=</span><span class="token string">"ON"</span><span class="token keyword">else</span><span class="token punctuation">:</span>        ledState<span class="token operator">=</span><span class="token string">"OFF"</span>    html<span class="token operator">=</span><span class="token triple-quoted-string string">"""            &lt;html>        &lt;head>            &lt;title>ESP32 網頁伺服器控制練習&lt;/title>            &lt;meta name="viewport" content="width=device-width, initial            scale=1">            &lt;link rel="icon" href="data:,">            &lt;style>                html &#123;                    text-align: center;                    font-family: Arial;                    display: inline-block;                    margin: auto;&#125;                .button &#123;                    background-color: #e0e252; /* Green */                    border: none;                    color: white;                    padding: 15px 35px;                    text-align: center;                    text-decoration: none;                    display: inline-block;                    font-size: 16px;                &#125;                .button2 &#123;                    background-color: #b0b1a2; /* Green */                    padding: 15px 32px;                &#125;            &lt;/style>        &lt;/head>          &lt;body>            &lt;h1>ESP32 網頁伺服器控制練習&lt;/h1>            &lt;p>GPIO-2 狀態: &lt;strong>"""</span> <span class="token operator">+</span> ledState <span class="token operator">+</span> <span class="token triple-quoted-string string">"""&lt;/strong>&lt;/p>            &lt;p>&lt;a href="/on">&lt;button class="button">ON&lt;/button>&lt;/a>&lt;/p>            &lt;p>&lt;a href="/off">&lt;button class="button button2">OFF&lt;/button>&lt;/a>&lt;/p>        &lt;/body>        &lt;/html>    """</span>    <span class="token keyword">return</span> html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>以下是套接</strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">s<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> s<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"got a connect from %s"</span><span class="token operator">%</span><span class="token builtin">str</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    request <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    request <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"context = %s"</span><span class="token operator">%</span>request<span class="token punctuation">)</span>    led_on <span class="token operator">=</span> request<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"/on"</span><span class="token punctuation">)</span>    led_off <span class="token operator">=</span> request<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"/off"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> led_on <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">:</span>        led<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ON"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> led_off <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">:</span>        led<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"OFF"</span><span class="token punctuation">)</span>    respones <span class="token operator">=</span> sw_page<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"HTTP/1.1 200 OK\n"</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"Context-Type: text/html\n"</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"Connection: close\n\n"</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>respones<span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="video-container"><iframe src="https://www.youtube.com/embed/OmbY4UQ8Kcc" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content>
      
      
      <categories>
          
          <category> micropython </category>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HC-SR04超音波模組&amp;網頁顯示</title>
      <link href="/2021/08/29/HC-SR04%E8%B6%85%E9%9F%B3%E6%B3%A2%E6%A8%A1%E7%B5%84-%E7%B6%B2%E9%A0%81%E9%A1%AF%E7%A4%BA/"/>
      <url>/2021/08/29/HC-SR04%E8%B6%85%E9%9F%B3%E6%B3%A2%E6%A8%A1%E7%B5%84-%E7%B6%B2%E9%A0%81%E9%A1%AF%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="HC-SR04超音波模組-amp-網頁顯示"><a href="#HC-SR04超音波模組-amp-網頁顯示" class="headerlink" title="HC-SR04超音波模組&amp;網頁顯示"></a>HC-SR04超音波模組&amp;網頁顯示</h1><h6 id="tags-micropython-‘hc-sr04’"><a href="#tags-micropython-‘hc-sr04’" class="headerlink" title="tags: micropython, ‘hc-sr04’"></a>tags: <code>micropython</code>, ‘hc-sr04’</h6><p><strong>超音波模組測試參考-</strong><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/956822760667011320#">https://blairan-esp32-micropython.blogspot.com/2021/07/blog-post.html</a></p><p><strong><em>基於以上的基本測試,加入WiFi網頁伺服器即可顯示於網頁</em></strong></p><h2 id="接線"><a href="#接線" class="headerlink" title="接線"></a>接線</h2><p>————————–    </p><p>//  * | HC-SC04 | ESP32  |    </p><p>//  * ———————    </p><p>//  * |   Vcc   |   3.3V  |    </p><p>//  * |   Trig  |   32    |  </p><p>//  * |   Echo  |   33    |     </p><p>//  * |   Gnd   |   GND   |  </p><p>//  * ———————</p><p><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/956822760667011320#"><img src="https://lemariva.com/storage/temp/public/295/644/a2e/esp32_bb__750.png"></a></p><hr><h2 id="上傳HC-SR04-py檔至板上"><a href="#上傳HC-SR04-py檔至板上" class="headerlink" title="上傳HC-SR04.py檔至板上"></a>上傳HC-SR04.py檔至板上</h2><h2 id="HC-SR04-py"><a href="#HC-SR04-py" class="headerlink" title="HC_SR04.py"></a>HC_SR04.py</h2><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">import</span> machine<span class="token punctuation">,</span> time<span class="token keyword">from</span> machine <span class="token keyword">import</span> Pin <span class="token keyword">class</span> <span class="token class-name">HCSR04</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Driver to use the untrasonic sensor HC-SR04.    The sensor range is between 2cm and 4m.    The timeouts received listening to echo pin are converted to OSError('Out of range')    """</span>    <span class="token comment"># echo_timeout_us is based in chip range limit (400cm)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> trigger_pin<span class="token punctuation">,</span> echo_pin<span class="token punctuation">,</span> echo_timeout_us<span class="token operator">=</span><span class="token number">500</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        trigger_pin: Output pin to send pulses        echo_pin: Readonly pin to measure the distance. The pin should be protected with 1k resistor        echo_timeout_us: Timeout in microseconds to listen to echo pin.         By default is based in sensor limit range (4m)        """</span>        self<span class="token punctuation">.</span>echo_timeout_us <span class="token operator">=</span> echo_timeout_us        <span class="token comment"># Init trigger pin (out)</span>        self<span class="token punctuation">.</span>trigger <span class="token operator">=</span> Pin<span class="token punctuation">(</span>trigger_pin<span class="token punctuation">,</span> mode<span class="token operator">=</span>Pin<span class="token punctuation">.</span>OUT<span class="token punctuation">,</span> pull<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>trigger<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>         <span class="token comment"># Init echo pin (in)</span>        self<span class="token punctuation">.</span>echo <span class="token operator">=</span> Pin<span class="token punctuation">(</span>echo_pin<span class="token punctuation">,</span> mode<span class="token operator">=</span>Pin<span class="token punctuation">.</span>IN<span class="token punctuation">,</span> pull<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>     <span class="token keyword">def</span> <span class="token function">_send_pulse_and_wait</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Send the pulse to trigger and listen on echo pin.        We use the method `machine.time_pulse_us()` to get the microseconds until the echo is received.        """</span>        self<span class="token punctuation">.</span>trigger<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># Stabilize the sensor</span>        time<span class="token punctuation">.</span>sleep_us<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>trigger<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment"># Send a 10us pulse.</span>        time<span class="token punctuation">.</span>sleep_us<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>trigger<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            pulse_time <span class="token operator">=</span> machine<span class="token punctuation">.</span>time_pulse_us<span class="token punctuation">(</span>self<span class="token punctuation">.</span>echo<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>echo_timeout_us<span class="token punctuation">)</span>            <span class="token keyword">return</span> pulse_time        <span class="token keyword">except</span> OSError <span class="token keyword">as</span> ex<span class="token punctuation">:</span>            <span class="token keyword">if</span> ex<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">110</span><span class="token punctuation">:</span> <span class="token comment"># 110 = ETIMEDOUT</span>                <span class="token keyword">raise</span> OSError<span class="token punctuation">(</span><span class="token string">'Out of range'</span><span class="token punctuation">)</span>            <span class="token keyword">raise</span> ex     <span class="token keyword">def</span> <span class="token function">distance_mm</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Get the distance in milimeters without floating point operations.        """</span>        pulse_time <span class="token operator">=</span> self<span class="token punctuation">.</span>_send_pulse_and_wait<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment"># To calculate the distance we get the pulse_time and divide it by 2 </span>        <span class="token comment"># (the pulse walk the distance twice) and by 29.1 becasue</span>        <span class="token comment"># the sound speed on air (343.2 m/s), that It's equivalent to</span>        <span class="token comment"># 0.34320 mm/us that is 1mm each 2.91us</span>        <span class="token comment"># pulse_time // 2 // 2.91 -> pulse_time // 5.82 -> pulse_time * 100 // 582 </span>        mm <span class="token operator">=</span> pulse_time <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">//</span> <span class="token number">582</span>        <span class="token keyword">return</span> mm     <span class="token keyword">def</span> <span class="token function">distance_cm</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Get the distance in centimeters with floating point operations.        It returns a float        """</span>        pulse_time <span class="token operator">=</span> self<span class="token punctuation">.</span>_send_pulse_and_wait<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment"># To calculate the distance we get the pulse_time and divide it by 2 </span>        <span class="token comment"># (the pulse walk the distance twice) and by 29.1 becasue</span>        <span class="token comment"># the sound speed on air (343.2 m/s), that It's equivalent to</span>        <span class="token comment"># 0.034320 cm/us that is 1cm each 29.1us</span>        cms <span class="token operator">=</span> <span class="token punctuation">(</span>pulse_time <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">29.1</span>        <span class="token keyword">return</span> cms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="主程式碼"><a href="#主程式碼" class="headerlink" title="主程式碼"></a>主程式碼</h2><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token operator">**</span>main<span class="token punctuation">.</span>py<span class="token operator">**</span><span class="token keyword">from</span> machine <span class="token keyword">import</span> Pin <span class="token comment">#匯入i2c相關模組和腳位模組</span><span class="token keyword">from</span> HC_SR04 <span class="token keyword">import</span> HCSR04<span class="token keyword">import</span> socket<span class="token punctuation">,</span> network  ssid<span class="token operator">=</span><span class="token string">"基地台名稱"</span>password<span class="token operator">=</span><span class="token string">"基地台密碼"</span>wifi <span class="token operator">=</span> network<span class="token punctuation">.</span>WLAN<span class="token punctuation">(</span>network<span class="token punctuation">.</span>STA_IF<span class="token punctuation">)</span>wifi<span class="token punctuation">.</span>active<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>wifi<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>ssid<span class="token punctuation">,</span> password<span class="token punctuation">)</span>  sensor<span class="token operator">=</span>HCSR04<span class="token punctuation">(</span>trigger_pin<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> echo_pin<span class="token operator">=</span><span class="token number">33</span><span class="token punctuation">,</span> echo\_timeout\_us<span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">)</span>  <span class="token keyword">while</span> wifi<span class="token punctuation">.</span>isconnected<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">False</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Connected Successful!"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"IP: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>wifi<span class="token punctuation">.</span>ifconfig<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> readDist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> dist    dist<span class="token operator">=</span><span class="token builtin">round</span><span class="token punctuation">(</span>sensor<span class="token punctuation">.</span>distance_cm<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The distance is &#123;:.1f&#125; cm"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>dist<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> dist  <span class="token keyword">def</span> htmlPage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    html<span class="token operator">=</span><span class="token triple-quoted-string string">"""        &lt;html>    &lt;head>      &lt;meta charset="utf-8" />      &lt;meta http-equiv="refresh" content="1" />      &lt;meta name="viewport" content="width=device-width, initial-scale=1.0" />      &lt;style>        h1  &#123;text-align: center; background-color: orange; margin-right:5px;&#125;        dl &#123; width: 320px; margin: 12px auto; &#125;        dt &#123;           font-size: 20pt; color: #444; background-color: #ddd;          margin: 6pt 0; padding: 6pt 12pt;        &#125;        dd &#123;          text-align: right; padding-right: 6pt;        &#125;        .num &#123; font-size: 36pt; color: dodgerblue; &#125;      &lt;/style>      &lt;/head>    &lt;body>      &lt;p>&lt;h1>ESP32 HC-SR04 Distance Test&lt;/h1>&lt;/p>      &lt;dl>        &lt;dt>Distance:&lt;/dt>        &lt;dd class=num>"""</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>dist<span class="token punctuation">)</span><span class="token operator">+</span><span class="token triple-quoted-string string">"""cm&lt;/dd>      &lt;/dl>    &lt;/body>    &lt;/html>    """</span>    <span class="token keyword">return</span> htmls<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> s<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Got a connection from %s'</span> <span class="token operator">%</span> <span class="token builtin">str</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    req <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Content = %s'</span> <span class="token operator">%</span> <span class="token builtin">str</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span>    DRead <span class="token operator">=</span> readDist<span class="token punctuation">(</span><span class="token punctuation">)</span>    response <span class="token operator">=</span> htmlPage<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"http/1.1 200 OK\\n"</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"Content-Type: text/html\\n"</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"Connection: close\\n\\n"</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p><strong>匯入machine, sockt, network, HC_SR04模組</strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">from</span> machine <span class="token keyword">import</span> Pin <span class="token keyword">from</span> HC_SR04 <span class="token keyword">import</span> HCSR04<span class="token keyword">import</span> socket<span class="token punctuation">,</span> network<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>設定wifi連線</strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">ssid<span class="token operator">=</span><span class="token string">"基地台名稱"</span>password<span class="token operator">=</span><span class="token string">"基地台密碼"</span>wifi <span class="token operator">=</span> network<span class="token punctuation">.</span>WLAN<span class="token punctuation">(</span>network<span class="token punctuation">.</span>STA_IF<span class="token punctuation">)</span>wifi<span class="token punctuation">.</span>active<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>wifi<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>ssid<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token keyword">while</span> wifi<span class="token punctuation">.</span>isconnected<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">False</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Connected Successful!"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"IP: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>wifi<span class="token punctuation">.</span>ifconfig<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>超音波測距</strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">sensor<span class="token operator">=</span>HCSR04<span class="token punctuation">(</span>trigger_pin<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> echo_pin<span class="token operator">=</span><span class="token number">33</span><span class="token punctuation">,</span>echo_timeout_us<span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>讀取距離的函式</strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">def</span> readDist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> dist    dist<span class="token operator">=</span><span class="token builtin">round</span><span class="token punctuation">(</span>sensor<span class="token punctuation">.</span>distance_cm<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The distance is &#123;:.1f&#125; cm"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>dist<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> dist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>前端網頁</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">def htmlPage():    html="""        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>refresh<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">h1</span>  <span class="token punctuation">&#123;</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> background-color<span class="token punctuation">:</span> orange<span class="token punctuation">;</span> margin-right<span class="token punctuation">:</span>5px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token selector">dl</span> <span class="token punctuation">&#123;</span> width<span class="token punctuation">:</span> 320px<span class="token punctuation">;</span> margin<span class="token punctuation">:</span> 12px auto<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token selector">dt</span> <span class="token punctuation">&#123;</span>           font-size<span class="token punctuation">:</span> 20pt<span class="token punctuation">;</span> color<span class="token punctuation">:</span> #444<span class="token punctuation">;</span> background-color<span class="token punctuation">:</span> #ddd<span class="token punctuation">;</span>          margin<span class="token punctuation">:</span> 6pt 0<span class="token punctuation">;</span> padding<span class="token punctuation">:</span> 6pt 12pt<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">dd</span> <span class="token punctuation">&#123;</span>          text-align<span class="token punctuation">:</span> right<span class="token punctuation">;</span> padding-right<span class="token punctuation">:</span> 6pt<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.num</span> <span class="token punctuation">&#123;</span> font-size<span class="token punctuation">:</span> 36pt<span class="token punctuation">;</span> color<span class="token punctuation">:</span> dodgerblue<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>      </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>ESP32 HC-SR04 Distance Test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>Distance:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>num</span><span class="token punctuation">></span></span>"""+str(dist)+"""cm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>    """    return html  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>socket套接</strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">s<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> s<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Got a connection from %s'</span> <span class="token operator">%</span> <span class="token builtin">str</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    req <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Content = %s'</span> <span class="token operator">%</span> <span class="token builtin">str</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span>    DRead <span class="token operator">=</span> readDist<span class="token punctuation">(</span><span class="token punctuation">)</span>    response <span class="token operator">=</span> htmlPage<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"http/1.1 200 OK\n"</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"Content-Type: text/html\n"</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"Connection: close\n\n"</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="video-container"><iframe src="https://www.youtube.com/embed/10foDr8unxo" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content>
      
      
      <categories>
          
          <category> micropython </category>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hc-sr04 </tag>
            
            <tag> web server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超音波模組&amp;0.96OLED-micropython</title>
      <link href="/2021/08/29/%E8%B6%85%E9%9F%B3%E6%B3%A2%E6%A8%A1%E7%B5%84-0-96OLED-micropython/"/>
      <url>/2021/08/29/%E8%B6%85%E9%9F%B3%E6%B3%A2%E6%A8%A1%E7%B5%84-0-96OLED-micropython/</url>
      
        <content type="html"><![CDATA[<h1 id="超音波模組-amp-0-96OLED-micropython"><a href="#超音波模組-amp-0-96OLED-micropython" class="headerlink" title="超音波模組&amp;0.96OLED-micropython"></a>超音波模組&amp;0.96OLED-micropython</h1><h6 id="tags-micropython-hcsr04-amp-0-96oled-esp32"><a href="#tags-micropython-hcsr04-amp-0-96oled-esp32" class="headerlink" title="tags: micropython hcsr04&amp;0.96oled esp32"></a>tags: <code>micropython</code> <code>hcsr04&amp;0.96oled</code> <code>esp32</code></h6><h2 id="接線"><a href="#接線" class="headerlink" title="接線"></a>接線</h2><p><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/3844235121108768211#"><img src="https://1.bp.blogspot.com/-vUSt95-nd5I/YOqB-78G3uI/AAAAAAAAebY/SOiwses8e8QZD-XSYQsYuJA3B0DTTVAMQCNcBGAsYHQ/w703-h340/MicroPython-Ultrasonic-Sensor-ESP32.jpg"></a></p><p>————————–      ———————     </p><p>//  * | HC-SC04 | ESP32  |     |  OLED | ESP32 |</p><p>//  * ———————     ———————     </p><p>//  * |   Vcc   |   3.3V  |     | Vcc | 3.3V |</p><p>//  * |   Trig  |   32    |     | Gnd | GND |</p><p>//  * |   Echo  |   33    |     | SCL | 21 |</p><p>//  * |   Gnd   |   GND   |     | SDA | 22 |</p><p>//  * --------------------- ———————-</p><hr><h2 id="將ssd1306-py-HC-SR04-py上傳至板子裡"><a href="#將ssd1306-py-HC-SR04-py上傳至板子裡" class="headerlink" title="將ssd1306.py HC_SR04.py上傳至板子裡"></a>將ssd1306.py HC_SR04.py上傳至板子裡</h2><p>**考鋇以下二檔並存成py檔 **</p><p><strong>ssd1306.py</strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token comment"># MicroPython SSD1306 OLED driver, I2C and SPI interfaces</span><span class="token keyword">from</span> micropython <span class="token keyword">import</span> const<span class="token keyword">import</span> time<span class="token keyword">import</span> framebuf<span class="token keyword">import</span> sys currentBoard<span class="token operator">=</span><span class="token string">""</span><span class="token keyword">if</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>platform<span class="token operator">==</span><span class="token string">"esp8266"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  currentBoard<span class="token operator">=</span><span class="token string">"esp8266"</span><span class="token keyword">elif</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>platform<span class="token operator">==</span><span class="token string">"esp32"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  currentBoard<span class="token operator">=</span><span class="token string">"esp32"</span><span class="token keyword">elif</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>platform<span class="token operator">==</span><span class="token string">"pyboard"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  currentBoard<span class="token operator">=</span><span class="token string">"pyboard"</span>  <span class="token keyword">import</span> pyb<span class="token comment"># register definitions</span>SET_CONTRAST        <span class="token operator">=</span> const<span class="token punctuation">(</span><span class="token number">0x81</span><span class="token punctuation">)</span>SET_ENTIRE_ON       <span class="token operator">=</span> const<span class="token punctuation">(</span><span class="token number">0xa4</span><span class="token punctuation">)</span>SET_NORM_INV        <span class="token operator">=</span> const<span class="token punctuation">(</span><span class="token number">0xa6</span><span class="token punctuation">)</span>SET_DISP            <span class="token operator">=</span> const<span class="token punctuation">(</span><span class="token number">0xae</span><span class="token punctuation">)</span>SET_MEM_ADDR        <span class="token operator">=</span> const<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span>SET_COL_ADDR        <span class="token operator">=</span> const<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span>SET_PAGE_ADDR       <span class="token operator">=</span> const<span class="token punctuation">(</span><span class="token number">0x22</span><span class="token punctuation">)</span>SET_DISP_START_LINE <span class="token operator">=</span> const<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span>SET_SEG_REMAP       <span class="token operator">=</span> const<span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token punctuation">)</span>SET_MUX_RATIO       <span class="token operator">=</span> const<span class="token punctuation">(</span><span class="token number">0xa8</span><span class="token punctuation">)</span>SET_COM_OUT_DIR     <span class="token operator">=</span> const<span class="token punctuation">(</span><span class="token number">0xc0</span><span class="token punctuation">)</span>SET_DISP_OFFSET     <span class="token operator">=</span> const<span class="token punctuation">(</span><span class="token number">0xd3</span><span class="token punctuation">)</span>SET_COM_PIN_CFG     <span class="token operator">=</span> const<span class="token punctuation">(</span><span class="token number">0xda</span><span class="token punctuation">)</span>SET_DISP_CLK_DIV    <span class="token operator">=</span> const<span class="token punctuation">(</span><span class="token number">0xd5</span><span class="token punctuation">)</span>SET_PRECHARGE       <span class="token operator">=</span> const<span class="token punctuation">(</span><span class="token number">0xd9</span><span class="token punctuation">)</span>SET_VCOM_DESEL      <span class="token operator">=</span> const<span class="token punctuation">(</span><span class="token number">0xdb</span><span class="token punctuation">)</span>SET_CHARGE_PUMP     <span class="token operator">=</span> const<span class="token punctuation">(</span><span class="token number">0x8d</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">SSD1306</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> external_vcc<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>width <span class="token operator">=</span> width    self<span class="token punctuation">.</span>height <span class="token operator">=</span> height    self<span class="token punctuation">.</span>external_vcc <span class="token operator">=</span> external_vcc    self<span class="token punctuation">.</span>pages <span class="token operator">=</span> self<span class="token punctuation">.</span>height <span class="token operator">//</span> <span class="token number">8</span>    self<span class="token punctuation">.</span><span class="token builtin">buffer</span> <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>pages <span class="token operator">*</span> self<span class="token punctuation">.</span>width<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>framebuf <span class="token operator">=</span> framebuf<span class="token punctuation">.</span>FrameBuffer<span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">buffer</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>width<span class="token punctuation">,</span> self<span class="token punctuation">.</span>height<span class="token punctuation">,</span> framebuf<span class="token punctuation">.</span>MVLSB<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>poweron<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>init_display<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">init_display</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> cmd <span class="token keyword">in</span> <span class="token punctuation">(</span>      SET_DISP <span class="token operator">|</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token comment"># off</span>      <span class="token comment"># address setting</span>      SET_MEM_ADDR<span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token comment"># horizontal</span>      <span class="token comment"># resolution and layout</span>      SET_DISP_START_LINE <span class="token operator">|</span> <span class="token number">0x00</span><span class="token punctuation">,</span>      SET_SEG_REMAP <span class="token operator">|</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token comment"># column addr 127 mapped to SEG0</span>      SET_MUX_RATIO<span class="token punctuation">,</span> self<span class="token punctuation">.</span>height <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>      SET_COM_OUT_DIR <span class="token operator">|</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token comment"># scan from COM[N] to COM0</span>      SET_DISP_OFFSET<span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>      SET_COM_PIN_CFG<span class="token punctuation">,</span> <span class="token number">0x02</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span>height <span class="token operator">==</span> <span class="token number">32</span> <span class="token keyword">else</span> <span class="token number">0x12</span><span class="token punctuation">,</span>      <span class="token comment"># timing and driving scheme</span>      SET_DISP_CLK_DIV<span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span>      SET_PRECHARGE<span class="token punctuation">,</span> <span class="token number">0x22</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span>external_vcc <span class="token keyword">else</span> <span class="token number">0xf1</span><span class="token punctuation">,</span>      SET_VCOM_DESEL<span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token comment"># 0.83*Vcc</span>      <span class="token comment"># display</span>      SET_CONTRAST<span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">,</span> <span class="token comment"># maximum</span>      SET_ENTIRE_ON<span class="token punctuation">,</span> <span class="token comment"># output follows RAM contents</span>      SET_NORM_INV<span class="token punctuation">,</span> <span class="token comment"># not inverted</span>      <span class="token comment"># charge pump</span>      SET_CHARGE_PUMP<span class="token punctuation">,</span> <span class="token number">0x10</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span>external_vcc <span class="token keyword">else</span> <span class="token number">0x14</span><span class="token punctuation">,</span>      SET_DISP <span class="token operator">|</span> <span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># on</span>      self<span class="token punctuation">.</span>write_cmd<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>fill<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">poweroff</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>write_cmd<span class="token punctuation">(</span>SET_DISP <span class="token operator">|</span> <span class="token number">0x00</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">contrast</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> contrast<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>write_cmd<span class="token punctuation">(</span>SET_CONTRAST<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>write_cmd<span class="token punctuation">(</span>contrast<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">invert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> invert<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>write_cmd<span class="token punctuation">(</span>SET_NORM_INV <span class="token operator">|</span> <span class="token punctuation">(</span>invert <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    x0 <span class="token operator">=</span> <span class="token number">0</span>    x1 <span class="token operator">=</span> self<span class="token punctuation">.</span>width <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>width <span class="token operator">==</span> <span class="token number">64</span><span class="token punctuation">:</span>      <span class="token comment"># displays with width of 64 pixels are shifted by 32</span>      x0 <span class="token operator">+=</span> <span class="token number">32</span>      x1 <span class="token operator">+=</span> <span class="token number">32</span>    self<span class="token punctuation">.</span>write_cmd<span class="token punctuation">(</span>SET_COL_ADDR<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>write_cmd<span class="token punctuation">(</span>x0<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>write_cmd<span class="token punctuation">(</span>x1<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>write_cmd<span class="token punctuation">(</span>SET_PAGE_ADDR<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>write_cmd<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>write_cmd<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pages <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>write_data<span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">buffer</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">fill</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>framebuf<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>col<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">pixel</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>framebuf<span class="token punctuation">.</span>pixel<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> col<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">scroll</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>framebuf<span class="token punctuation">.</span>scroll<span class="token punctuation">(</span>dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">text</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> string<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> col<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>framebuf<span class="token punctuation">.</span>text<span class="token punctuation">(</span>string<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> col<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">hline</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>framebuf<span class="token punctuation">.</span>hline<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> col<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">vline</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> h<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>framebuf<span class="token punctuation">.</span>vline<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> h<span class="token punctuation">,</span> col<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">line</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>framebuf<span class="token punctuation">.</span>line<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> col<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">rect</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>framebuf<span class="token punctuation">.</span>rect<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">,</span> col<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">fill_rect</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>framebuf<span class="token punctuation">.</span>fill_rect<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">,</span> col<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">blit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> fbuf<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>framebuf<span class="token punctuation">.</span>blit<span class="token punctuation">(</span>fbuf<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">class</span> <span class="token class-name">SSD1306_I2C</span><span class="token punctuation">(</span>SSD1306<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> i2c<span class="token punctuation">,</span> addr<span class="token operator">=</span><span class="token number">0x3c</span><span class="token punctuation">,</span> external_vcc<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>i2c <span class="token operator">=</span> i2c    self<span class="token punctuation">.</span>addr <span class="token operator">=</span> addr    self<span class="token punctuation">.</span>temp <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> external_vcc<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">write_cmd</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x80</span> <span class="token comment"># Co=1, D/C#=0</span>    self<span class="token punctuation">.</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> cmd    <span class="token comment">#IF SYS  :</span>    <span class="token keyword">global</span> currentBoard    <span class="token keyword">if</span> currentBoard<span class="token operator">==</span><span class="token string">"esp8266"</span> <span class="token keyword">or</span> currentBoard<span class="token operator">==</span><span class="token string">"esp32"</span><span class="token punctuation">:</span>      self<span class="token punctuation">.</span>i2c<span class="token punctuation">.</span>writeto<span class="token punctuation">(</span>self<span class="token punctuation">.</span>addr<span class="token punctuation">,</span> self<span class="token punctuation">.</span>temp<span class="token punctuation">)</span>    <span class="token keyword">elif</span> currentBoard<span class="token operator">==</span><span class="token string">"pyboard"</span><span class="token punctuation">:</span>      self<span class="token punctuation">.</span>i2c<span class="token punctuation">.</span>send<span class="token punctuation">(</span>self<span class="token punctuation">.</span>temp<span class="token punctuation">,</span>self<span class="token punctuation">.</span>addr<span class="token punctuation">)</span>    <span class="token comment">#ELSE:</span>            <span class="token keyword">def</span> <span class="token function">write_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>addr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span>    self<span class="token punctuation">.</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x40</span> <span class="token comment"># Co=0, D/C#=1</span>    <span class="token keyword">global</span> currentBoard    <span class="token keyword">if</span> currentBoard<span class="token operator">==</span><span class="token string">"esp8266"</span> <span class="token keyword">or</span> currentBoard<span class="token operator">==</span><span class="token string">"esp32"</span><span class="token punctuation">:</span>      self<span class="token punctuation">.</span>i2c<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>      self<span class="token punctuation">.</span>i2c<span class="token punctuation">.</span>write<span class="token punctuation">(</span>self<span class="token punctuation">.</span>temp<span class="token punctuation">)</span>      self<span class="token punctuation">.</span>i2c<span class="token punctuation">.</span>write<span class="token punctuation">(</span>buf<span class="token punctuation">)</span>      self<span class="token punctuation">.</span>i2c<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> currentBoard<span class="token operator">==</span><span class="token string">"pyboard"</span><span class="token punctuation">:</span>      <span class="token comment">#self.i2c.send(self.temp,self.addr)</span>      <span class="token comment">#self.i2c.send(buf,self.addr)</span>      self<span class="token punctuation">.</span>i2c<span class="token punctuation">.</span>mem_write<span class="token punctuation">(</span>buf<span class="token punctuation">,</span>self<span class="token punctuation">.</span>addr<span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">poweron</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span> <span class="token keyword">class</span> <span class="token class-name">SSD1306_SPI</span><span class="token punctuation">(</span>SSD1306<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> spi<span class="token punctuation">,</span> dc<span class="token punctuation">,</span> res<span class="token punctuation">,</span> cs<span class="token punctuation">,</span> external_vcc<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>rate <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span>    dc<span class="token punctuation">.</span>init<span class="token punctuation">(</span>dc<span class="token punctuation">.</span>OUT<span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span>init<span class="token punctuation">(</span>res<span class="token punctuation">.</span>OUT<span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    cs<span class="token punctuation">.</span>init<span class="token punctuation">(</span>cs<span class="token punctuation">.</span>OUT<span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>spi <span class="token operator">=</span> spi    self<span class="token punctuation">.</span>dc <span class="token operator">=</span> dc    self<span class="token punctuation">.</span>res <span class="token operator">=</span> res    self<span class="token punctuation">.</span>cs <span class="token operator">=</span> cs    <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> external_vcc<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">write_cmd</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> currentBoard    <span class="token keyword">if</span> currentBoard<span class="token operator">==</span><span class="token string">"esp8266"</span> <span class="token keyword">or</span> currentBoard<span class="token operator">==</span><span class="token string">"esp32"</span><span class="token punctuation">:</span>      self<span class="token punctuation">.</span>spi<span class="token punctuation">.</span>init<span class="token punctuation">(</span>baudrate<span class="token operator">=</span>self<span class="token punctuation">.</span>rate<span class="token punctuation">,</span> polarity<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> phase<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> currentBoard<span class="token operator">==</span><span class="token string">"pyboard"</span><span class="token punctuation">:</span>      self<span class="token punctuation">.</span>spi<span class="token punctuation">.</span>init<span class="token punctuation">(</span>mode <span class="token operator">=</span> pyb<span class="token punctuation">.</span>SPI<span class="token punctuation">.</span>MASTER<span class="token punctuation">,</span>baudrate<span class="token operator">=</span>self<span class="token punctuation">.</span>rate<span class="token punctuation">,</span> polarity<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> phase<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>high<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>dc<span class="token punctuation">.</span>low<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>low<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">global</span> currentBoard    <span class="token keyword">if</span> currentBoard<span class="token operator">==</span><span class="token string">"esp8266"</span> <span class="token keyword">or</span> currentBoard<span class="token operator">==</span><span class="token string">"esp32"</span><span class="token punctuation">:</span>      self<span class="token punctuation">.</span>spi<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token punctuation">[</span>cmd<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> currentBoard<span class="token operator">==</span><span class="token string">"pyboard"</span><span class="token punctuation">:</span>      self<span class="token punctuation">.</span>spi<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token punctuation">[</span>cmd<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>high<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">write_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> currentBoard    <span class="token keyword">if</span> currentBoard<span class="token operator">==</span><span class="token string">"esp8266"</span> <span class="token keyword">or</span> currentBoard<span class="token operator">==</span><span class="token string">"esp32"</span><span class="token punctuation">:</span>      self<span class="token punctuation">.</span>spi<span class="token punctuation">.</span>init<span class="token punctuation">(</span>baudrate<span class="token operator">=</span>self<span class="token punctuation">.</span>rate<span class="token punctuation">,</span> polarity<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> phase<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> currentBoard<span class="token operator">==</span><span class="token string">"pyboard"</span><span class="token punctuation">:</span>      self<span class="token punctuation">.</span>spi<span class="token punctuation">.</span>init<span class="token punctuation">(</span>mode <span class="token operator">=</span> pyb<span class="token punctuation">.</span>SPI<span class="token punctuation">.</span>MASTER<span class="token punctuation">,</span>baudrate<span class="token operator">=</span>self<span class="token punctuation">.</span>rate<span class="token punctuation">,</span> polarity<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> phase<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>high<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>dc<span class="token punctuation">.</span>high<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>low<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">global</span> currentBoard    <span class="token keyword">if</span> currentBoard<span class="token operator">==</span><span class="token string">"esp8266"</span> <span class="token keyword">or</span> currentBoard<span class="token operator">==</span><span class="token string">"esp32"</span><span class="token punctuation">:</span>      self<span class="token punctuation">.</span>spi<span class="token punctuation">.</span>write<span class="token punctuation">(</span>buf<span class="token punctuation">)</span>    <span class="token keyword">elif</span> currentBoard<span class="token operator">==</span><span class="token string">"pyboard"</span><span class="token punctuation">:</span>      self<span class="token punctuation">.</span>spi<span class="token punctuation">.</span>send<span class="token punctuation">(</span>buf<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>high<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">poweron</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>res<span class="token punctuation">.</span>high<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep_ms<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>res<span class="token punctuation">.</span>low<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep_ms<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>res<span class="token punctuation">.</span>high<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="HC-SR04-py"><a href="#HC-SR04-py" class="headerlink" title="HC_SR04.py"></a>HC_SR04.py</h2><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">import</span> machine<span class="token punctuation">,</span> time<span class="token keyword">from</span> machine <span class="token keyword">import</span> Pin <span class="token keyword">class</span> <span class="token class-name">HCSR04</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Driver to use the untrasonic sensor HC-SR04.    The sensor range is between 2cm and 4m.    The timeouts received listening to echo pin are converted to OSError('Out of range')    """</span>    <span class="token comment"># echo_timeout_us is based in chip range limit (400cm)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> trigger_pin<span class="token punctuation">,</span> echo_pin<span class="token punctuation">,</span> echo_timeout_us<span class="token operator">=</span><span class="token number">500</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        trigger_pin: Output pin to send pulses        echo_pin: Readonly pin to measure the distance. The pin should be protected with 1k resistor        echo_timeout_us: Timeout in microseconds to listen to echo pin.         By default is based in sensor limit range (4m)        """</span>        self<span class="token punctuation">.</span>echo_timeout_us <span class="token operator">=</span> echo_timeout_us        <span class="token comment"># Init trigger pin (out)</span>        self<span class="token punctuation">.</span>trigger <span class="token operator">=</span> Pin<span class="token punctuation">(</span>trigger_pin<span class="token punctuation">,</span> mode<span class="token operator">=</span>Pin<span class="token punctuation">.</span>OUT<span class="token punctuation">,</span> pull<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>trigger<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>         <span class="token comment"># Init echo pin (in)</span>        self<span class="token punctuation">.</span>echo <span class="token operator">=</span> Pin<span class="token punctuation">(</span>echo_pin<span class="token punctuation">,</span> mode<span class="token operator">=</span>Pin<span class="token punctuation">.</span>IN<span class="token punctuation">,</span> pull<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>     <span class="token keyword">def</span> <span class="token function">_send_pulse_and_wait</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Send the pulse to trigger and listen on echo pin.        We use the method `machine.time_pulse_us()` to get the microseconds until the echo is received.        """</span>        self<span class="token punctuation">.</span>trigger<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># Stabilize the sensor</span>        time<span class="token punctuation">.</span>sleep_us<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>trigger<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment"># Send a 10us pulse.</span>        time<span class="token punctuation">.</span>sleep_us<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>trigger<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            pulse_time <span class="token operator">=</span> machine<span class="token punctuation">.</span>time_pulse_us<span class="token punctuation">(</span>self<span class="token punctuation">.</span>echo<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>echo_timeout_us<span class="token punctuation">)</span>            <span class="token keyword">return</span> pulse_time        <span class="token keyword">except</span> OSError <span class="token keyword">as</span> ex<span class="token punctuation">:</span>            <span class="token keyword">if</span> ex<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">110</span><span class="token punctuation">:</span> <span class="token comment"># 110 = ETIMEDOUT</span>                <span class="token keyword">raise</span> OSError<span class="token punctuation">(</span><span class="token string">'Out of range'</span><span class="token punctuation">)</span>            <span class="token keyword">raise</span> ex     <span class="token keyword">def</span> <span class="token function">distance_mm</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Get the distance in milimeters without floating point operations.        """</span>        pulse_time <span class="token operator">=</span> self<span class="token punctuation">.</span>_send_pulse_and_wait<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment"># To calculate the distance we get the pulse_time and divide it by 2 </span>        <span class="token comment"># (the pulse walk the distance twice) and by 29.1 becasue</span>        <span class="token comment"># the sound speed on air (343.2 m/s), that It's equivalent to</span>        <span class="token comment"># 0.34320 mm/us that is 1mm each 2.91us</span>        <span class="token comment"># pulse_time // 2 // 2.91 -> pulse_time // 5.82 -> pulse_time * 100 // 582 </span>        mm <span class="token operator">=</span> pulse_time <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">//</span> <span class="token number">582</span>        <span class="token keyword">return</span> mm     <span class="token keyword">def</span> <span class="token function">distance_cm</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Get the distance in centimeters with floating point operations.        It returns a float        """</span>        pulse_time <span class="token operator">=</span> self<span class="token punctuation">.</span>_send_pulse_and_wait<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment"># To calculate the distance we get the pulse_time and divide it by 2 </span>        <span class="token comment"># (the pulse walk the distance twice) and by 29.1 becasue</span>        <span class="token comment"># the sound speed on air (343.2 m/s), that It's equivalent to</span>        <span class="token comment"># 0.034320 cm/us that is 1cm each 29.1us</span>        cms <span class="token operator">=</span> <span class="token punctuation">(</span>pulse_time <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">29.1</span>        <span class="token keyword">return</span> cms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><p><strong>main.py</strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">import</span> ssd1306 <span class="token comment">#匯入oled模組</span><span class="token keyword">from</span> machine <span class="token keyword">import</span> I2C<span class="token punctuation">,</span> Pin <span class="token comment">#匯入i2c相關模組和腳位模組</span><span class="token keyword">from</span> HC_SR04 <span class="token keyword">import</span> HCSR04i2c<span class="token operator">=</span>I2C<span class="token punctuation">(</span>scl<span class="token operator">=</span>Pin<span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sda<span class="token operator">=</span>Pin<span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">)</span>oled<span class="token operator">=</span>ssd1306<span class="token punctuation">.</span>SSD1306_I2C<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> i2c<span class="token punctuation">)</span>sensor<span class="token operator">=</span>HCSR04<span class="token punctuation">(</span>trigger_pin<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> echo_pin<span class="token operator">=</span><span class="token number">33</span><span class="token punctuation">,</span>echo_timeout_us<span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">)</span>  <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    dist<span class="token operator">=</span>sensor<span class="token punctuation">.</span>distance_cm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The distance is &#123;:.1f&#125; cm"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>dist<span class="token punctuation">)</span><span class="token punctuation">)</span>    oled<span class="token punctuation">.</span>fill<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    oled<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token string">"Distance: "</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    oled<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>    oled<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token string">"cm"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>    oled<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p><strong>匯入OLED, I2C, HC_SR04模組</strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">import</span> ssd1306 <span class="token comment">#匯入oled模組</span><span class="token keyword">from</span> machine <span class="token keyword">import</span> I2C<span class="token punctuation">,</span> Pin <span class="token comment">#匯入i2c相關模組和腳位模組</span><span class="token keyword">from</span> HC_SR04 <span class="token keyword">import</span> HCSR04<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>i2c通設定</strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">i2c<span class="token operator">=</span>I2C<span class="token punctuation">(</span>scl<span class="token operator">=</span>Pin<span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sda<span class="token operator">=</span>Pin<span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>OLED顯示</strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">oled<span class="token operator">=</span>ssd1306<span class="token punctuation">.</span>SSD1306_I2C<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> i2c<span class="token punctuation">)</span>oled<span class="token punctuation">.</span>fill<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>oled<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token string">"Distance: "</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>oled<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>oled<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token string">"cm"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>oled<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>超音波測距</strong></p><p><strong>使用while True: 形成迴圈</strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">sensor<span class="token operator">=</span>HCSR04<span class="token punctuation">(</span>trigger_pin<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> echo_pin<span class="token operator">=</span><span class="token number">33</span><span class="token punctuation">,</span>echo_timeout_us<span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">)</span>dist<span class="token operator">=</span>sensor<span class="token punctuation">.</span>distance_cm<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><div class="video-container"><iframe src="https://www.youtube.com/embed/IkzFiOHADV0" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content>
      
      
      <categories>
          
          <category> micropython </category>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 超音波模組 </tag>
            
            <tag> hc-sr04 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超音波測距(HC-SR04)&amp;網頁顯示(wifi_server)</title>
      <link href="/2021/08/29/%E8%B6%85%E9%9F%B3%E6%B3%A2%E6%B8%AC%E8%B7%9D-HC-SR04-%E7%B6%B2%E9%A0%81%E9%A1%AF%E7%A4%BA-wifi-server/"/>
      <url>/2021/08/29/%E8%B6%85%E9%9F%B3%E6%B3%A2%E6%B8%AC%E8%B7%9D-HC-SR04-%E7%B6%B2%E9%A0%81%E9%A1%AF%E7%A4%BA-wifi-server/</url>
      
        <content type="html"><![CDATA[<h1 id="超音波測距-HC-SR04-amp-網頁顯示-wifi-server"><a href="#超音波測距-HC-SR04-amp-網頁顯示-wifi-server" class="headerlink" title="超音波測距(HC-SR04)&amp;網頁顯示(wifi_server)"></a>超音波測距(HC-SR04)&amp;網頁顯示(wifi_server)</h1><h6 id="tags-micropython-HC-SR04-amp-wifi"><a href="#tags-micropython-HC-SR04-amp-wifi" class="headerlink" title="tags: micropython HC-SR04&amp;wifi"></a>tags: <code>micropython</code> <code>HC-SR04&amp;wifi</code></h6><p> <strong>超音波測距參考-</strong><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/7733761810113940833?hl=zh-TW#">https://esp32-blairan.blogspot.com/2021/07/blog-post.html</a></p><h2 id="接線"><a href="#接線" class="headerlink" title="接線"></a>接線</h2><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/7733761810113940833?hl=zh-TW#"><img src="https://lemariva.com/storage/temp/public/295/644/a2e/esp32_bb__750.png"></a></p><h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#include &lt;Arduino.h&gt;#include &lt;WiFi.h&gt;#include &lt;ESPAsyncWebServer.h&gt;#include &lt;Ultrasonic.h&gt;  &#x2F;&#x2F; ---------------------     ---------------------     -------------------&#x2F;&#x2F;  * | HC-SC04 | Arduino |     | PING))) | Arduino |     | Seeed | Arduino |&#x2F;&#x2F;  * ---------------------     ---------------------     -------------------&#x2F;&#x2F;  * |   Vcc   |   5V    |     |   Vcc   |   5V    |     |  Vcc  |   5V    |&#x2F;&#x2F;  * |   Trig  |   12    | AND |   SIG   |   10    | AND |  SIG  |    8    |&#x2F;&#x2F;  * |   Echo  |   13    |     |   Gnd   |   GND   |     |  Gnd  |   GND   |&#x2F;&#x2F;  * |   Gnd   |   GND   |     ---------------------     -------------------&#x2F;&#x2F;  * ---------------------  const char* ssid&#x3D;&quot;基地台名稱&quot;;const char* password&#x3D;&quot;基地台密碼&quot;;AsyncWebServer server(80);Ultrasonic ultrasonic1(32, 33); &#x2F;&#x2F;ultrasonic(trig, echo)  const char indexHtml\[\] PROGMEM &#x3D; R&quot;&#x3D;&#x3D;&#x3D;(    &lt;html&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;utf-8&quot; &#x2F;&gt;    &lt;meta http-equiv&#x3D;&quot;refresh&quot; content&#x3D;&quot;0.5&quot; &#x2F;&gt;    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;    &lt;style&gt;        h1 &#123;text-align: center; background-color: rgb(226, 155, 23); color: rgb(47, 49, 42); margin-right: 5px;&#125;        dl &#123;width: 320px; margin: auto;&#125;        dt &#123;font-size: 20pt; color: rgb(36, 45, 168); background-color: rgb(197, 194, 11);            margin: 6pt 0; padding: 6pt 12pt;&#125;        dd &#123;text-align: left; padding-right: 6pt;&#125;        .val &#123; font-size: 30pt; color: rgb(255, 120, 30); &#125;    &lt;&#x2F;style&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;p&gt;&lt;h1&gt;HC-SR04超音波測距實驗&lt;&#x2F;h1&gt;&lt;&#x2F;p&gt;    &lt;dl&gt;        &lt;dt&gt;偵測物體距離&lt;&#x2F;dt&gt;        &lt;dd class&#x3D;val&gt;%distance% 公分&lt;&#x2F;dd&gt;    &lt;&#x2F;dl&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;)&#x3D;&#x3D;&#x3D;&quot;;  String readDist()&#123;    unsigned int distance&#x3D;ultrasonic1.read(CM);    Serial.print(distance); Serial.println(&quot; CM&quot;);    return String(distance);&#125;String hcsr04Processors(String(value))&#123;    if (value&#x3D;&#x3D;&quot;distance&quot;)&#123;        return readDist();    &#125;&#125;  void setup()&#123;    Serial.begin(115200);    WiFi.begin(ssid, password);    while (WiFi.status() !&#x3D; WL_CONNECTED)&#123;        Serial.print(&quot;.&quot;);        delay(500);    &#125;    Serial.println(&quot;Connected successful!&quot;);    Serial.print(&quot;IP: &quot;); Serial.println(WiFi.localIP());    server.on(&quot;&#x2F;&quot;, HTTP_GET, \[\](AsyncWebServerRequest *request)&#123;        request-&gt;send_P(200, &quot;text&#x2F;html&quot;, indexHtml, hcsr04Processors);    &#125;);    server.on(&quot;&#x2F;distance&quot;, HTTP_GET, \[\](AsyncWebServerRequest *request)&#123;        request-&gt;send_P(200, &quot;text&#x2F;plain&quot;, readDist().c_str());    &#125;);    server.begin();&#125;  void loop()&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解說"><a href="#解說" class="headerlink" title="解說"></a>解說</h2><p><em><strong>匯入WiFi和超音波及網路伺服器模組</strong></em></p><pre class="line-numbers language-none"><code class="language-none">#include &lt;WiFi.h&gt;#include &lt;ESPAsyncWebServer.h&gt;#include &lt;Ultrasonic.h&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><em>定義基地台名稱和密碼,並指定端口號80埠</em></strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">const char* ssid &#x3D; &quot;基地台名稱&quot;;const char* password &#x3D; &quot;基地台密碼&quot;;AsyncWebServer server(80);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><em>這個模組是呼吸超音波用的</em></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Ultrasonic.h></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><em>設制超音波腳位</em></strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Ultrasonic ultrasonic1(32, 33); &#x2F;&#x2F;ultrasonic(trig, echo)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><em>前端網頁</em></strong></p><p>這一行是每隔0.5秒自動更新一次網頁 <meta http-equiv="refresh" content="0.5" /></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">const char indexHtml[] PROGMEM &#x3D; R&quot;&#x3D;&#x3D;&#x3D;(    &lt;html&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;utf-8&quot; &#x2F;&gt;    &lt;meta http-equiv&#x3D;&quot;refresh&quot; content&#x3D;&quot;0.5&quot; &#x2F;&gt;    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;    &lt;style&gt;        h1 &#123;text-align: center; background-color: rgb(226, 155, 23); color: rgb(47, 49, 42); margin-right: 5px;&#125;        dl &#123;width: 320px; margin: auto;&#125;        dt &#123;font-size: 20pt; color: rgb(36, 45, 168); background-color: rgb(197, 194, 11);            margin: 6pt 0; padding: 6pt 12pt;&#125;        dd &#123;text-align: left; padding-right: 6pt;&#125;        .val &#123; font-size: 30pt; color: rgb(255, 120, 30); &#125;    &lt;&#x2F;style&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;p&gt;&lt;h1&gt;HC-SR04超音波測距實驗&lt;&#x2F;h1&gt;&lt;&#x2F;p&gt;    &lt;dl&gt;        &lt;dt&gt;偵測物體距離&lt;&#x2F;dt&gt;        &lt;dd class&#x3D;val&gt;%distance% 公分&lt;&#x2F;dd&gt;    &lt;&#x2F;dl&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;)&#x3D;&#x3D;&#x3D;&quot;;  _**讀取數值和前端同步數值的函式**_String readDist()&#123; unsigned int distance&#x3D;ultrasonic1.read(CM); Serial.print(distance); Serial.println(&quot; CM&quot;); return String(distance);&#125;String hcsr04Processors(String(value))&#123; if (value&#x3D;&#x3D;&quot;distance&quot;)&#123; return readDist();    &#125;&#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><em>網路連線</em></strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">void setup()&#123;    Serial.begin(115200);    WiFi.begin(ssid, password);    while (WiFi.status() !&#x3D; WL_CONNECTED)&#123;        Serial.print(&quot;.&quot;);        delay(500);    &#125;    Serial.println(&quot;Connected successful!&quot;);    Serial.print(&quot;IP: &quot;); Serial.println(WiFi.localIP());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>網路伺服器的請求和回應</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#"> server.on(&quot;&#x2F;&quot;, HTTP_GET, [](AsyncWebServerRequest *request)&#123;        request-&gt;send_P(200, &quot;text&#x2F;html&quot;, indexHtml, hcsr04Processors);    &#125;);    server.on(&quot;&#x2F;distance&quot;, HTTP_GET, [](AsyncWebServerRequest *request)&#123;        request-&gt;send_P(200, &quot;text&#x2F;plain&quot;, readDist().c_str());    &#125;);    server.begin();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="video-container"><iframe src="https://www.youtube.com/embed/ammBs4Z-DTs" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hc-sr04 </tag>
            
            <tag> web server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0.96OLED實作-micropython</title>
      <link href="/2021/08/29/0-96OLED%E5%AF%A6%E4%BD%9C-micropython/"/>
      <url>/2021/08/29/0-96OLED%E5%AF%A6%E4%BD%9C-micropython/</url>
      
        <content type="html"><![CDATA[<h1 id="0-96OLED實作-micropython"><a href="#0-96OLED實作-micropython" class="headerlink" title="0.96OLED實作-micropython"></a>0.96OLED實作-micropython</h1><h6 id="tags-micropython-0-96oled"><a href="#tags-micropython-0-96oled" class="headerlink" title="tags: micropython 0.96oled"></a>tags: <code>micropython</code> <code>0.96oled</code></h6><h2 id="ssd1306模組"><a href="#ssd1306模組" class="headerlink" title="ssd1306模組"></a>ssd1306模組</h2><p><strong>先將<a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/2255135354625309493?hl=zh-TW#">ssd1306.py</a>檔和main.py放在一起才能呼叫到ssd1306模組</strong></p><h2 id="接線"><a href="#接線" class="headerlink" title="接線"></a>接線</h2><p><strong>21  SCL</strong></p><p><strong>22  SDA</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/2255135354625309493?hl=zh-TW#"><img src="https://i2.wp.com/randomnerdtutorials.com/wp-content/uploads/2019/05/ESP32_OLED.png?w=873&quality=100&strip=all&ssl=1"></a></p><h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">import</span> ssd1306 <span class="token comment">#匯入oled模組</span><span class="token keyword">from</span> machine <span class="token keyword">import</span> Pin<span class="token punctuation">,</span> SoftI2C <span class="token comment">#匯入i2c相關模組和腳位模組</span>  i2c<span class="token operator">=</span>SoftI2C<span class="token punctuation">(</span>scl<span class="token operator">=</span>Pin<span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sda<span class="token operator">=</span>Pin<span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#設定i2c腳位</span>width<span class="token operator">=</span><span class="token number">128</span> <span class="token comment">#oled高</span>height<span class="token operator">=</span><span class="token number">64</span> <span class="token comment">#oled寛</span>oled<span class="token operator">=</span>ssd1306<span class="token punctuation">.</span>SSD1306_I2C<span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> i2c<span class="token punctuation">)</span> <span class="token comment">#賦予變數給設制好的ssd1306模組,並給予所須參數</span>  <span class="token comment">#oled.text("文字", x, y, col=0/1)</span><span class="token comment">#x是縱軸位置</span><span class="token comment">#y是橫軸位置</span><span class="token comment">#col=是顏色,0-BLACK,1-WHITE</span>oled<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> col<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>oled<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token string">"ESP32 NICE!"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> col<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>oled<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token string">"i am CTK"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> col<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#oled.invert(True) #背景全顯</span>oled<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#顯示於oled上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/2255135354625309493?hl=zh-TW#"><img src="https://lh3.googleusercontent.com/-k9n260VQuDA/YOexfePzh5I/AAAAAAAAeag/Fu7ZGxbHb9s63zR5_q-D06nDEPyzIWOHgCNcBGAsYHQ/s1600/1625796956591112-0.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> micropython </category>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oled </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DHT11/DHT12溫溼度傳感器實驗-micropython</title>
      <link href="/2021/08/29/DHT11-DHT12%E6%BA%AB%E6%BA%BC%E5%BA%A6%E5%82%B3%E6%84%9F%E5%99%A8%E5%AF%A6%E9%A9%97-micropython/"/>
      <url>/2021/08/29/DHT11-DHT12%E6%BA%AB%E6%BA%BC%E5%BA%A6%E5%82%B3%E6%84%9F%E5%99%A8%E5%AF%A6%E9%A9%97-micropython/</url>
      
        <content type="html"><![CDATA[<h1 id="DHT11-DHT12溫溼度傳感器實驗-micropython"><a href="#DHT11-DHT12溫溼度傳感器實驗-micropython" class="headerlink" title="DHT11/DHT12溫溼度傳感器實驗-micropython"></a>DHT11/DHT12溫溼度傳感器實驗-micropython</h1><h6 id="tags-micropython-dht11-dht12"><a href="#tags-micropython-dht11-dht12" class="headerlink" title="tags: micropython dht11/dht12"></a>tags: <code>micropython</code> <code>dht11/dht12</code></h6><p><strong>基本介紹和實驗參考-</strong><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/2565290853340818706?hl=zh-TW#">https://esp32-blairan.blogspot.com/2021/07/dht11dht12-esp32.html</a></p><hr><p><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/2565290853340818706?hl=zh-TW#"><img src="http://2.bp.blogspot.com/-3syBdItbhrI/Vb6X8sJx7tI/AAAAAAAAEO8/cMmlSOV142M/s320/dht11.jpg"></a></p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">import</span> dht<span class="token keyword">from</span> machine <span class="token keyword">import</span> Pin<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">def</span> measureTemp<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sensor<span class="token operator">=</span>dht<span class="token punctuation">.</span>DHT11<span class="token punctuation">(</span>Pin<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            sensor<span class="token punctuation">.</span>measure<span class="token punctuation">(</span><span class="token punctuation">)</span>            t<span class="token operator">=</span>sensor<span class="token punctuation">.</span>temperature<span class="token punctuation">(</span><span class="token punctuation">)</span>            t_f<span class="token operator">=</span>t<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">32</span>            h<span class="token operator">=</span>sensor<span class="token punctuation">.</span>humidity<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Temp: &#123;:.1f&#125;.C"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Temp: &#123;:.1f&#125;.F"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>t_f<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Humidity: &#123;:.1f&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> OSError <span class="token keyword">as</span> o<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Failed to read sensor."</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    measureTemp<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>載入dht庫(內建)</strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">import</span> dht<span class="token keyword">from</span> machine <span class="token keyword">import</span> Pin<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>指定DHT11腳位給sensor變數</strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">sensor<span class="token operator">=</span>dht<span class="token punctuation">.</span>DHT11<span class="token punctuation">(</span>Pin<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>給予while()每2秒不斷偵測</strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>sensor<span class="token punctuation">.</span>measure<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>攝氏溫度(t)/華氏溫度(t_f)/濕度</strong></p><p><strong>其中攝氏轉換華氏的公式:攝氏x(9/5)+32</strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">t<span class="token operator">=</span>sensor<span class="token punctuation">.</span>temperature<span class="token punctuation">(</span><span class="token punctuation">)</span>t_f<span class="token operator">=</span>t<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">32</span>h<span class="token operator">=</span>sensor<span class="token punctuation">.</span>humidity<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Temp: &#123;:.1f&#125;.C"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Temp: &#123;:.1f&#125;.F"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>t_f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Humidity: &#123;:.1f&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h2><pre class="line-numbers language-none"><code class="language-none">&#x3D;&#x3D;&#x3D; Temp: 26.0.CTemp: 78.8.FHumidity: 27.0Temp: 26.0.CTemp: 78.8.FHumidity: 27.0Temp: 26.0.CTemp: 78.8.FHumidity: 27.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> micropython </category>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dht11/dht12 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWM-呼吸燈-mpython</title>
      <link href="/2021/08/29/PWM-%E5%91%BC%E5%90%B8%E7%87%88-mpython/"/>
      <url>/2021/08/29/PWM-%E5%91%BC%E5%90%B8%E7%87%88-mpython/</url>
      
        <content type="html"><![CDATA[<h1 id="PWM-呼吸燈-mpython"><a href="#PWM-呼吸燈-mpython" class="headerlink" title="PWM-呼吸燈-mpython"></a>PWM-呼吸燈-mpython</h1><h6 id="tags-micropython"><a href="#tags-micropython" class="headerlink" title="tags: micropython"></a>tags: <code>micropython</code></h6><h2 id="所需零件"><a href="#所需零件" class="headerlink" title="所需零件"></a>所需零件</h2><ul><li>  ESP32</li><li>  5mm LED</li><li>  330 歐姆電阻</li><li>  麵包板</li><li>  跳線</li></ul><p><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/7086602446312056740?hl=zh-TW#"><img src="https://i1.wp.com/randomnerdtutorials.com/wp-content/uploads/2019/04/PWM_esp32_bb.png?w=1065&quality=100&strip=all&ssl=1"></a></p><h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><p><strong><em>參照–我的</em></strong><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/7086602446312056740?hl=zh-TW#">micropython函式筆記本</a></p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">from</span> machine <span class="token keyword">import</span> Pin<span class="token punctuation">,</span> PWM<span class="token keyword">from</span> time <span class="token keyword">import</span> sleepled <span class="token operator">=</span> PWM<span class="token punctuation">(</span>Pin<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> duty_cycle1 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        led<span class="token punctuation">.</span>duty<span class="token punctuation">(</span>duty_cycle1<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">0.05</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> duty_cycle2 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        led<span class="token punctuation">.</span>duty<span class="token punctuation">(</span>duty_cycle2<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">0.05</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="video-container"><iframe src="https://www.youtube.com/embed/Hw_L3j1hgvQ" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content>
      
      
      <categories>
          
          <category> micropython </category>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 呼吸燈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP32-Cam視訊小車</title>
      <link href="/2021/08/29/ESP32-Cam%E8%A6%96%E8%A8%8A%E5%B0%8F%E8%BB%8A/"/>
      <url>/2021/08/29/ESP32-Cam%E8%A6%96%E8%A8%8A%E5%B0%8F%E8%BB%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="ESP32-Cam視訊小車"><a href="#ESP32-Cam視訊小車" class="headerlink" title="ESP32-Cam視訊小車"></a>ESP32-Cam視訊小車</h1><h6 id="tags-esp32-cam"><a href="#tags-esp32-cam" class="headerlink" title="tags: esp32-cam"></a>tags: <code>esp32-cam</code></h6><p><strong>想不到現在有了ESP32-Cam真是方便，組裝車身上整個植入</strong></p><p><strong>範例程式，大概１小時不等就全部完成。</strong></p><p><strong>我是參照一位國外的大大的製作</strong>-<a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/8416915322345407552#">https://youtu.be/Wfpvj9KlEMs</a></p><hr><h2 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h2><ol><li> <strong>馬達x1</strong></li><li> <strong>L298N x1</strong></li><li> <strong>底盤或車身 x1</strong></li><li> <strong>ESP32-Cam x1</strong></li><li> <strong>18650串接電池盒 x1</strong></li><li> <strong>18650電池 x2</strong></li><li> <strong>杜邦線</strong></li></ol><h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><ul><li>  先到此頁面最底下，下載小車範例-<a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/8416915322345407552#">https://www.viralsciencecreativity.com/post/esp32-cam-surveillance-spy-camera-car</a></li><li>  下載完後解壓縮，將整個資料夾放入Arduino裡的library資料夾裡.，然後從範例裡找到小車範例。</li><li>  更改自己的WIFI名稱和密碼，選取上傳(如果不會上傳ESP32CAM可以看一下這一篇-[<a href="https://esp32-blairan.blogspot.com/2021/04/esp32-cam.htm]">https://esp32-blairan.blogspot.com/2021/04/esp32-cam.htm]</a></li></ul><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/8416915322345407552?hl=zh-TW#"><img src="https://lh3.googleusercontent.com/-Di2phCbK_C4/YMK_QwaxbuI/AAAAAAAAeRU/c0k5do3OCBckqzA0ZeNfxX8095dSnHITQCNcBGAsYHQ/s1600/1623375629694103-0.png"></a></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/8416915322345407552?hl=zh-TW#"><img src="https://lh3.googleusercontent.com/-FB_Pb4_d9rg/YMK-fcW9RSI/AAAAAAAAeRA/C2psKg3sXnQ1MDd-YGw7C00cUNlfVb-FgCNcBGAsYHQ/s1600/1623375426928438-1.png"></a></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/8416915322345407552?hl=zh-TW#"><img src="https://lh3.googleusercontent.com/-A5IFpKhPTDA/YMK-QOJbRzI/AAAAAAAAeQ8/fXRsejo6DY4AItogU3cn1qZknIe-zw5KACNcBGAsYHQ/s1600/1623375369965993-2.png"></a></p><h2 id="接線"><a href="#接線" class="headerlink" title="接線"></a>接線</h2><ul><li>  接著就可以開始組裝車身並把腳位對應L298N插上。</li></ul><p><img src="https://static.wixstatic.com/media/c901e7_50da7f5d492a4096b8d8ec78a96e5978~mv2.png/v1/fill/w_740,h_581,al_c,q_90/c901e7_50da7f5d492a4096b8d8ec78a96e5978~mv2.webp"></p><hr><div class="video-container"><iframe src="https://www.youtube.com/embed/QT0z2qLUymk" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content>
      
      
      <categories>
          
          <category> esp32 cam </category>
          
      </categories>
      
      
        <tags>
            
            <tag> esp32 cam訊視小車 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP32-cam實作</title>
      <link href="/2021/08/29/ESP32-cam%E5%AF%A6%E4%BD%9C/"/>
      <url>/2021/08/29/ESP32-cam%E5%AF%A6%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="ESP32-cam實作"><a href="#ESP32-cam實作" class="headerlink" title="ESP32-cam實作"></a>ESP32-cam實作</h1><h6 id="tags-esp32-cam"><a href="#tags-esp32-cam" class="headerlink" title="tags: esp32-cam"></a>tags: <code>esp32-cam</code></h6><hr><p>-<strong>在臉書社團很多大大分享ESP32系列的板子，感覺小而美小而省</strong></p><p><strong>能做的事也很多，所以就集體採構了２片esp32和esp32-cam，因為</strong></p><p><strong>早先我有入手配製好的esp32的集成板，但和通用的不一樣，好像</strong></p><p><strong>是那家公司基於esp32再創研的，但我個人是不太喜歡用市面上不</strong></p><p><strong>相同規格的板子，所以才又買了esp32通用板。</strong></p><p><strong>那先從esp32-cam試起，聽說前輩們踩坑，所以利用貨還沒到先爬文</strong></p><p><strong>，好不容易過了十五天終於到貨，正式開始實作了。</strong></p><hr><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2908832685289288450#"><img src="https://1.bp.blogspot.com/-IG2vOkjYr_g/YGmJWUMFS4I/AAAAAAAAeAg/CsYgGDLlUlYE242dPXOWPTAYuJFNwRJ0QCNcBGAsYHQ/w306-h350/20210404_155013.jpg"></a><br><img src="https://i.imgur.com/I8NXL4y.png"></p><hr><h2 id="接線方式"><a href="#接線方式" class="headerlink" title="接線方式"></a>接線方式</h2><hr><h4 id="燒錄須要有USB-TTL的轉接頭"><a href="#燒錄須要有USB-TTL的轉接頭" class="headerlink" title="燒錄須要有USB TTL的轉接頭"></a>燒錄須要有USB TTL的轉接頭</h4><p><img src="https://i.imgur.com/j32bpm3.png"><br><strong>但因為我手上之前有買過類似的轉接線，所以就沒有再買轉接頭</strong></p><p><strong>唯一的缺點就是我手上這條USB-TTL轉接驅動程式已經絕版，但</strong></p><p><strong>在網上找還是可找的到，一開始插入USB是無法辨識。</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2908832685289288450#"><img src="https://1.bp.blogspot.com/-0CIJEIGrJIA/YGmOKrk2qpI/AAAAAAAAeA8/kDpzDpUbCSIo4wFcW6-gDzHLofZfBtWvQCNcBGAsYHQ/w273-h273/images.jpg"></a></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2908832685289288450#"><img src="https://1.bp.blogspot.com/-ORlRmW1ZHXc/YGmOebWesvI/AAAAAAAAeBE/wqp-XeSUeewGT8uGeW_6mdVms0DHmuqawCNcBGAsYHQ/w447-h344/1562393756-3686635058.png"></a></p><hr><p><strong>按照上圖接線後，到＂裝置管理員＂，如果是第一次安裝ＵＳＢ驅動</strong></p><p><strong>會如下顯示＂USB-serial control＂有個三角驚嘆號!</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2908832685289288450#"><img src="https://1.bp.blogspot.com/-MRS_-cK3nYg/YGmP7oNK2nI/AAAAAAAAeBM/-DDNKU9Gt8M0fB-r7YZMoOoNqZxKGF1BQCNcBGAsYHQ/w443-h249/1.jpg"></a></p><p><strong>下載<a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2908832685289288450#">PL2303_64bit_Installer</a>，進入網址後點選下圖紅框處下載驅動</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2908832685289288450#"><img src="https://1.bp.blogspot.com/-7GnCQo9ZUJg/YGmRF_ueoxI/AAAAAAAAeBU/y292EXqa5MIevfUHVO8T-3FWYCmKyjdewCNcBGAsYHQ/w427-h240/1.jpg"></a></p><p><strong>解壓後安裝軟體</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2908832685289288450#"><img src="https://1.bp.blogspot.com/-8Gl2Tfo2FcQ/YGmRdkQoW0I/AAAAAAAAeBc/y99qiFEWepsza-tYxkol_aVOHBHeSPjxACNcBGAsYHQ/w490-h276/1.jpg"></a></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2908832685289288450#"><img src="https://1.bp.blogspot.com/-T2G-LewhLQ0/YGmRrAQjMDI/AAAAAAAAeBg/gp1kamt2GWMdi8tB9gCOaGUypwRHZVWhQCNcBGAsYHQ/w426-h240/1.jpg"></a></p><p><strong>按下”finsh＂會自動重啓電腦</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2908832685289288450#"><img src="https://1.bp.blogspot.com/-Sf28JI3q4uc/YGmR92n-UDI/AAAAAAAAeBs/p99mswf_9i8ymjplFYWtHTf03L677Yl4QCNcBGAsYHQ/w424-h239/1.jpg"></a></p><p><strong>重開機後，再到”裝置管理員＂， 以我的筆電是com7就出現了</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2908832685289288450#"><img src="https://1.bp.blogspot.com/-4zSMNpvu-jI/YGmUTdUf1rI/AAAAAAAAeB0/wzwo-lTSoI87nEsncW0dmdL0nqUNxa46ACNcBGAsYHQ/w452-h254/1.jpg"></a></p><hr><h2 id="接下來到Arduino-IDE"><a href="#接下來到Arduino-IDE" class="headerlink" title="接下來到Arduino IDE"></a>接下來到Arduino IDE</h2><p><strong>因為IDE裡沒有ESP32的庫 ，所以要先擴增</strong></p><p><strong>到＂檔案-&gt;偏好設定＂裡，＂額外的開發板管理員網址＂貼上以下網址</strong></p><p><strong><a href="https://dl.espressif.com/dl/package/_esp32/_index.json%EF%BC%8C%E4%B8%A6%E6%8C%89%E7%A2%BA%E5%AE%9A">https://dl.espressif.com/dl/package\_esp32\_index.json，並按確定</a></strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2908832685289288450#"><img src="https://1.bp.blogspot.com/-Z0BIUuFp-Sk/YGmVoELnJyI/AAAAAAAAeB8/ni-B6jxLZbAG3r4OvSIiqWTiLrWoF3TngCNcBGAsYHQ/w460-h259/1.jpg"></a></p><p><strong>然後到＂工具＂—＞＂開發板管理員＂搜尋”esp32＂，會出現對應的</strong></p><p><strong>庫，選擇＂安裝＂。</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2908832685289288450#"><img src="https://1.bp.blogspot.com/-F0WNedLy2Uk/YGmZZ7xPzfI/AAAAAAAAeCE/FqUlSPxlqVkcoAA6Gx6epLibKKJsT1XbQCNcBGAsYHQ/w434-h244/2.jpg"></a></p><p><strong>安裝好後一樣在＂工具＂底下，選擇＂ESP32 Arduino＂-&gt;”ESP32 Wrrover Module”</strong></p><p><strong>並選擇對應的序列埠(com)</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2908832685289288450#"><img src="https://1.bp.blogspot.com/-rWDqD0dz2qc/YGmakbrRnGI/AAAAAAAAeCM/s3df9UK3zRIrxBhr6C5lY1v3XzpmSGkLQCNcBGAsYHQ/w479-h270/1.jpg"></a></p><p><strong>因為wifi即時的流量要比較大，且耗能，所以再另把以下這個選擇改一下</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2908832685289288450#"><img src="https://1.bp.blogspot.com/-gf7kO8q5y38/YGmbLCcvtEI/AAAAAAAAeCU/z0jC6RtDGbMVCJRXdTumt6URuxFQzT08ACNcBGAsYHQ/w421-h237/2.jpg"></a></p><p><strong>再到”範例＂底下匯入範例</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2908832685289288450#"><img src="https://1.bp.blogspot.com/-cnsDAyIqb_c/YGmcJ4-UPuI/AAAAAAAAeCc/rWqVlsd-ke4YfrkN13yliiMV2x21gPFywCNcBGAsYHQ/w478-h269/2.jpg"></a></p><p><strong>這裡有幾個地方要更改一下設置</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2908832685289288450#"><img src="https://1.bp.blogspot.com/-kaulw1wcg1w/YGmdFDhEwBI/AAAAAAAAeCk/70Ycqy_IG_0-HAHfFxRiJ4W9V3-9oN2zwCNcBGAsYHQ/w514-h289/2.jpg"></a></p><hr><p><strong>都設置好了之後，先把板子上的ＩＯ０和ＧＮＤ短接起來。</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2908832685289288450#"><img src="https://1.bp.blogspot.com/-3knPVurgzB0/YGmgfPGKXfI/AAAAAAAAeCs/c9U4ihOIFXwLNHRMvAdXPbOwRdFj7jvkgCNcBGAsYHQ/w436-h413/20210404_191546.jpg"></a></p><p><strong>接下來按下”上傳＂</strong></p><p><strong>……………………時間約6分鐘，可以喝口水</strong></p><p><strong>寫入程式後最後出現下圖，這時把短接拔掉並REST</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2908832685289288450#"><img src="https://1.bp.blogspot.com/-b_dwGskTofY/YGmiH2rDZwI/AAAAAAAAeC0/RIFbmrKvELkQLfHSEy3EZBcxpQeuwgsLgCNcBGAsYHQ/w418-h235/2.jpg"></a></p><hr><p><strong>然後開啓”監控螢幕”，它會給一組ＩＰ，用瀏覽器登入</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2908832685289288450#"><img src="https://1.bp.blogspot.com/-aIu_JpV1Vb0/YGmiv6GgpvI/AAAAAAAAeC8/qagkETKhQ0kUiqzfZLsE6TMPUO8cSiSIACNcBGAsYHQ/w441-h248/2.jpg"></a></p><p><strong>然後成功了就會進入以下畫面</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2908832685289288450#"><img src="https://1.bp.blogspot.com/-3iwr7LwXbN8/YGmkZ7oslaI/AAAAAAAAeDE/iFIaXkzSu8Yc6r-PH-_qAtYcKleMXOM3wCNcBGAsYHQ/w463-h253/2.jpg"></a></p><p><strong>畫面左下方”start stream”按下，監控頻就會出現</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2908832685289288450#"><img src="https://1.bp.blogspot.com/-GYoCegVuku0/YGmlmlN3_dI/AAAAAAAAeDM/G8yTthhipZI8i_zpatL0m7t-dcEmDL2NgCNcBGAsYHQ/w552-h272/2.jpg"></a></p><p><strong>聽說還有很多功能，例如人臉辨識，也可置入一些參數，做刷臉門禁等等….</strong></p><p>**等有空再來找找這類資料。<br>**</p>]]></content>
      
      
      <categories>
          
          <category> esp32 cam </category>
          
      </categories>
      
      
        <tags>
            
            <tag> esp32 cam </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP32連上無線基地台（ＡＰ）</title>
      <link href="/2021/08/29/ESP32%E9%80%A3%E4%B8%8A%E7%84%A1%E7%B7%9A%E5%9F%BA%E5%9C%B0%E5%8F%B0%EF%BC%88AP%EF%BC%89/"/>
      <url>/2021/08/29/ESP32%E9%80%A3%E4%B8%8A%E7%84%A1%E7%B7%9A%E5%9F%BA%E5%9C%B0%E5%8F%B0%EF%BC%88AP%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="ESP32連上無線基地台（AP）"><a href="#ESP32連上無線基地台（AP）" class="headerlink" title="ESP32連上無線基地台（ＡＰ）"></a>ESP32連上無線基地台（ＡＰ）</h1><h6 id="tags-esp32-wifi"><a href="#tags-esp32-wifi" class="headerlink" title="tags: esp32 wifi"></a>tags: <code>esp32</code> <code>wifi</code></h6><hr><h2 id="實驗說明："><a href="#實驗說明：" class="headerlink" title="實驗說明："></a>實驗說明：</h2><p><strong>用 ESP32內建Wi-Fi連到基地台，程式使用while()迴圈</strong></p><p><strong>並以WiFi.staus()判斷是否已連線,如果正在連線，會印出</strong></p><p><strong>＂.＂，如回傳為否,每隔0.5秒會再進入回迴圈掃描附近</strong></p><p><strong>配對的基地台，直到連線成功為跳出迴圈並印出”已連線</strong></p><p><strong>成功”字樣。</strong></p><hr><ul><li><strong>連線中</strong></li></ul><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/1075448515665169120#"><img src="https://1.bp.blogspot.com/-pReU1rtq-8Q/YJyl1JGCz_I/AAAAAAAAeJA/qeYtYdCBIKwjeUF62PlEbad5mVj7kqmoACNcBGAsYHQ/w609-h194/1.jpg"></a></p><ul><li><strong>已連線</strong></li></ul><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/1075448515665169120#"><img src="https://1.bp.blogspot.com/--1iFhC4mnNU/YJyl98_zwgI/AAAAAAAAeJE/MNJ4WMupFAUL0d13nyJ-k-uzZTIpvhRVACNcBGAsYHQ/w645-h214/2.jpg"></a></p><hr><h1 id="ESP32連上無線基地台（AP）-1"><a href="#ESP32連上無線基地台（AP）-1" class="headerlink" title="ESP32連上無線基地台（ＡＰ）"></a>ESP32連上無線基地台（ＡＰ）</h1><hr><h2 id="實驗說明：-1"><a href="#實驗說明：-1" class="headerlink" title="實驗說明："></a>實驗說明：</h2><p><strong>用 ESP32內建Wi-Fi連到基地台，程式使用while()迴圈</strong></p><p><strong>並以WiFi.staus()判斷是否已連線,如果正在連線，會印出</strong></p><p><strong>＂.＂，如回傳為否,每隔0.5秒會再進入回迴圈掃描附近</strong></p><p><strong>配對的基地台，直到連線成功為跳出迴圈並印出”已連線</strong></p><p><strong>成功”字樣。</strong></p><hr><h3 id="連線中"><a href="#連線中" class="headerlink" title="連線中"></a>連線中</h3><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/1075448515665169120#"><img src="https://1.bp.blogspot.com/-pReU1rtq-8Q/YJyl1JGCz_I/AAAAAAAAeJA/qeYtYdCBIKwjeUF62PlEbad5mVj7kqmoACNcBGAsYHQ/w609-h194/1.jpg"></a></p><h3 id="已連線"><a href="#已連線" class="headerlink" title="已連線"></a>已連線</h3><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/1075448515665169120#"><img src="https://1.bp.blogspot.com/--1iFhC4mnNU/YJyl98_zwgI/AAAAAAAAeJE/MNJ4WMupFAUL0d13nyJ-k-uzZTIpvhRVACNcBGAsYHQ/w645-h214/2.jpg"></a></p><hr><h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#include &lt;WiFi.h&gt; ———套用ＷｉＦｉ庫const char *ssid &#x3D; &quot;基地台名稱&quot;;const char *password &#x3D; &quot;基地台密碼&quot;;  void setup()&#123;    Serial.begin(115200);    WiFi.begin(ssid, password);    while (WiFi.status() !&#x3D; WL_CONNECTED)&#123; ———判斷是否已連線        delay(500);        Serial.print(&quot;.&quot;);    &#125;    Serial.println(&quot;已連線到Wi-Fi基地台&quot;);&#125;void loop()&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="獲取AP資訊"><a href="#獲取AP資訊" class="headerlink" title="  獲取AP資訊 "></a>  獲取AP資訊 </h2><p><strong>相關函式請參閱-<a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/1075448515665169120#">ESP32函式筆記本</a></strong></p><p><strong>基本上和上面程式碼一樣，只是多套用了取得網路相關的資訊</strong></p><p><strong>，每個能連上網路的設備都會有這些相關訊息，例如電腦，在</strong></p><p><strong>終諯機輸入ipconfig就會出現下圖:</strong></p><p><a href="https://1.bp.blogspot.com/-1J2iaS1THkk/YJzRS-H6gyI/AAAAAAAAeJQ/Z8D0k_dYVtI1pmHiwtpn5cgkguvjwvubwCNcBGAsYHQ/s1456/1.jpg"><img src="https://1.bp.blogspot.com/-1J2iaS1THkk/YJzRS-H6gyI/AAAAAAAAeJQ/Z8D0k_dYVtI1pmHiwtpn5cgkguvjwvubwCNcBGAsYHQ/w544-h275/1.jpg"></a></p><p><strong>那麼ESP32同樣可做為網路設備來說也是會有這些資訊</strong></p><p>**將程式碼上傳後即會取得相關的資訊<br>**</p><p><a href="https://1.bp.blogspot.com/-Eb5_RJ8ay48/YJzR3ZC4AII/AAAAAAAAeJY/Qi9yLfNdupghRcPWGuw7KX0AR7HOWo9ZACNcBGAsYHQ/s1541/2.jpg"><img src="https://1.bp.blogspot.com/-Eb5_RJ8ay48/YJzR3ZC4AII/AAAAAAAAeJY/Qi9yLfNdupghRcPWGuw7KX0AR7HOWo9ZACNcBGAsYHQ/w469-h283/2.jpg"></a></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#include &lt;WiFi.h&gt;const char *ssid &#x3D; &quot;基地台名稱&quot;;const char *password &#x3D; &quot;基地台密碼&quot;;  void setup()&#123;    Serial.begin(115200);    WiFi.begin(ssid, password);    while (WiFi.status() !&#x3D; WL_CONNECTED)    &#123;        delay(500);        Serial.print(&quot;.&quot;);    &#125;    Serial.println(&quot;已連上WiFi&quot;);    Serial.print(&quot;我的IP位址&quot;);    Serial.println(WiFi.localIP());      Serial.print(&quot;子遮罩網路: &quot;);    Serial.println(WiFi.subnetMask());      Serial.print(&quot;閘道網路: &quot;);    Serial.println(WiFi.gatewayIP());      Serial.print(&quot;DNS位址: &quot;);    Serial.println(WiFi.dnsIP());&#125;void loop()&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wifi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP32變成網頁伺服器,使客戶端連入網頁</title>
      <link href="/2021/08/29/ESP32%E8%AE%8A%E6%88%90%E7%B6%B2%E9%A0%81%E4%BC%BA%E6%9C%8D%E5%99%A8-%E4%BD%BF%E5%AE%A2%E6%88%B6%E7%AB%AF%E9%80%A3%E5%85%A5%E7%B6%B2%E9%A0%81/"/>
      <url>/2021/08/29/ESP32%E8%AE%8A%E6%88%90%E7%B6%B2%E9%A0%81%E4%BC%BA%E6%9C%8D%E5%99%A8-%E4%BD%BF%E5%AE%A2%E6%88%B6%E7%AB%AF%E9%80%A3%E5%85%A5%E7%B6%B2%E9%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="ESP32變成網頁伺服器-使客戶端連入網頁"><a href="#ESP32變成網頁伺服器-使客戶端連入網頁" class="headerlink" title="ESP32變成網頁伺服器,使客戶端連入網頁"></a>ESP32變成網頁伺服器,使客戶端連入網頁</h1><h6 id="tags-esp32-WiFi"><a href="#tags-esp32-WiFi" class="headerlink" title="tags: esp32 WiFi"></a>tags: <code>esp32</code> <code>WiFi</code></h6><hr><h4 id="基本上就是這篇的延伸"><a href="#基本上就是這篇的延伸" class="headerlink" title="基本上就是這篇的延伸-"></a>基本上就是這篇的延伸-</h4><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/4116986106197766676?hl=zh-TW#">https://esp32-blairan.blogspot.com/2021/05/esp32ap.html</a>  </p><h2 id="流程思惟"><a href="#流程思惟" class="headerlink" title="流程思惟"></a>流程思惟</h2><p>要先有整個流程的概念，比較不會在寫程式時搞混</p><p>用我自己的解釋是，先連上ESP32基地台，萬一連</p><p>不上，就會一直出現點點點….，試圖連上，連線成</p><p>功後會顯示＂已連線成功＂(圖1)，並配發IP位址給客戶端</p><p>此時伺服器啓動等待客戶端請求根目錄的回覆,若客</p><p>戶端連上IP,伺服器將提供根目錄預設的回覆訊息(圖2)，</p><p>如果在IP後面隨意打字，因為根目錄下沒有這個預設</p><p>目標，將會顯查無這個網頁(圖3)。</p><p>(圖1)</p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/4116986106197766676?hl=zh-TW#"><img src="https://1.bp.blogspot.com/-aHVdMYxdyUo/YLHndJOPIaI/AAAAAAAAeNU/-HZtR82h3JQIeA9oJ5JRNz8Phn_h1sDFgCNcBGAsYHQ/w500-h281/2.jpg"></a></p><p>(圖2)</p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/4116986106197766676?hl=zh-TW#"><img src="https://1.bp.blogspot.com/-LNy_a5hKhTA/YLHni6wxvNI/AAAAAAAAeNY/GL8WBynD2FocPIgJVTmzzFJW7IxpR3LTACNcBGAsYHQ/w502-h269/1.jpg"></a></p><p>(圖3)</p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/4116986106197766676?hl=zh-TW#"><img src="https://1.bp.blogspot.com/-F2vTjv5E6Uc/YLHoaliw3gI/AAAAAAAAeNk/JWP9Xp9d2h0-yFONJzfrqP3ZZdI-JHq1wCNcBGAsYHQ/w504-h267/3.jpg"></a></p><hr><h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#include &lt;WiFi.h&gt;#include &lt;WebServer.h&gt;const char *ssid&#x3D;&quot;基地台名稱&quot;;const char *password&#x3D;&quot;基地台密碼&quot;;WebServer server(80);void handleRoot()&#123;  server.send(200, &quot;text&#x2F;html; charset&#x3D;UTF-8&quot;, &quot;客戶端收到訊息!!!&quot;);&#125;void handleNotFound()&#123;  server.send(400, &quot;text&#x2F;html; charset&#x3D;UTF-8&quot;, &quot;找不到回傳的訊息&quot;);&#125;void setup(void)&#123;  Serial.begin(115200);  WiFi.begin(ssid, password);  server.begin();  while (WiFi.status() !&#x3D; WL_CONNECTED)&#123;    Serial.print(&quot;.&quot;);    delay(500);  &#125;  Serial.print(&quot;已連線至基地台&quot;);  Serial.println(ssid)  Serial.print(&quot;請於瀏覽器中開啓這個IP位址: &quot;);  Serial.println(WiFi.localIP());    server.on(&quot;&#x2F;&quot;, handleRoot);  server.onNotFound(handleNotFound);  Serial.println(&quot;HTTP伺服器已啓動&quot;);&#125;  void loop() &#123;  server.handleClient();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webserver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP32點亮內置LED</title>
      <link href="/2021/08/29/ESP32%E9%BB%9E%E4%BA%AE%E5%85%A7%E7%BD%AELED/"/>
      <url>/2021/08/29/ESP32%E9%BB%9E%E4%BA%AE%E5%85%A7%E7%BD%AELED/</url>
      
        <content type="html"><![CDATA[<h1 id="ESP32點亮內置LED"><a href="#ESP32點亮內置LED" class="headerlink" title="ESP32點亮內置LED"></a>ESP32點亮內置LED</h1><h6 id="tags-esp32"><a href="#tags-esp32" class="headerlink" title="tags: esp32"></a>tags: <code>esp32</code></h6><hr><h4 id="這是我第一次真正學習esp32系列-雖然之前有使用wemos-d1-mini但也只是照書做-用完還是覺得很模糊-玩了一陣子的Arduino-現在有空一邊研究esp系列和樹莓派-今天當做一個起始點亮板上的LED"><a href="#這是我第一次真正學習esp32系列-雖然之前有使用wemos-d1-mini但也只是照書做-用完還是覺得很模糊-玩了一陣子的Arduino-現在有空一邊研究esp系列和樹莓派-今天當做一個起始點亮板上的LED" class="headerlink" title="這是我第一次真正學習esp32系列,雖然之前有使用wemos d1 mini但也只是照書做,用完還是覺得很模糊,玩了一陣子的Arduino,現在有空一邊研究esp系列和樹莓派,今天當做一個起始點亮板上的LED."></a>這是我第一次真正學習esp32系列,雖然之前有使用wemos d1 mini但也只是照書做,用完還是覺得很模糊,玩了一陣子的Arduino,現在有空一邊研究esp系列和樹莓派,今天當做一個起始點亮板上的LED.</h4><hr><h4 id="我所使用的ESP32是淘-買的-因為這款有附單元課程-所以有一個集成板-很方便。"><a href="#我所使用的ESP32是淘-買的-因為這款有附單元課程-所以有一個集成板-很方便。" class="headerlink" title="我所使用的ESP32是淘*買的,因為這款有附單元課程,所以有一個集成板,很方便。"></a>我所使用的ESP32是淘*買的,因為這款有附單元課程,所以有一個集成板,很方便。</h4><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/5957928262171433878#"><img src="https://1.bp.blogspot.com/-EHIybPXQ1TQ/YESQWt2rOZI/AAAAAAAAd5g/dPueSjsi6HgMLS-72nLW0wTPYWWGqEHZACNcBGAsYHQ/w343-h762/20210307_162828.jpg"></a><br><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/5957928262171433878#"><img src="https://1.bp.blogspot.com/-WUH-nbqYfnU/YESTI1KqdqI/AAAAAAAAd58/5OAKs359y9spbLh5KE9AuOSuGQjegmF4ACNcBGAsYHQ/w542-h361/pyWiFi-ESP32_pinout.png"></a></p><h6 id="lt-圖片引用01Studio網站-gt"><a href="#lt-圖片引用01Studio網站-gt" class="headerlink" title="&lt;圖片引用01Studio網站&gt;"></a>&lt;圖片引用01Studio網站&gt;</h6><hr><h3 id="今天先來筆記一下使用micropython的語法"><a href="#今天先來筆記一下使用micropython的語法" class="headerlink" title="今天先來筆記一下使用micropython的語法"></a>今天先來筆記一下使用micropython的語法</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> machine <span class="token keyword">import</span> Pin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="這個是控制板上的gpio的套件"><a href="#這個是控制板上的gpio的套件" class="headerlink" title="這個是控制板上的gpio的套件"></a>這個是控制板上的gpio的套件</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">led<span class="token punctuation">(</span>變數<span class="token punctuation">)</span><span class="token operator">=</span>Pin<span class="token punctuation">(</span>腳位<span class="token punctuation">,</span> Pin<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>led<span class="token punctuation">.</span>on<span class="token punctuation">(</span>off<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 或 led<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">or</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h3 id="寫一個迴圈來控制LED閃爍"><a href="#寫一個迴圈來控制LED閃爍" class="headerlink" title="寫一個迴圈來控制LED閃爍"></a>寫一個迴圈來控制LED閃爍</h3><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">from</span> machine <span class="token keyword">import</span> Pin<span class="token keyword">import</span> timeled<span class="token operator">=</span>Pin<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> Pin<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>a<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">while</span> a<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">:</span>    led<span class="token punctuation">.</span>on<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    led<span class="token punctuation">.</span>off<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    a<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="video-container"><iframe src="https://www.youtube.com/embed/X79o9kU_hh0" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
          <category> micropython </category>
          
      </categories>
      
      
        <tags>
            
            <tag> led </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用platformIO編輯esp32更改波特率</title>
      <link href="/2021/08/29/%E4%BD%BF%E7%94%A8platformIO%E7%B7%A8%E8%BC%AFesp32%E6%9B%B4%E6%94%B9%E6%B3%A2%E7%89%B9%E7%8E%87/"/>
      <url>/2021/08/29/%E4%BD%BF%E7%94%A8platformIO%E7%B7%A8%E8%BC%AFesp32%E6%9B%B4%E6%94%B9%E6%B3%A2%E7%89%B9%E7%8E%87/</url>
      
        <content type="html"><![CDATA[<h1 id="使用platformIO編輯esp32更改波特率"><a href="#使用platformIO編輯esp32更改波特率" class="headerlink" title="使用platformIO編輯esp32更改波特率"></a>使用platformIO編輯esp32更改波特率</h1><h6 id="tags-esp32"><a href="#tags-esp32" class="headerlink" title="tags: esp32"></a>tags: <code>esp32</code></h6><h2 id="原由"><a href="#原由" class="headerlink" title="原由:"></a>原由:</h2><p><strong>因為使用VScode的外掛platformIO編程ESP32時,遇到一個問題是,波特率的預設是9600,所以在上傳ESP32只要開啓串口窗,會出現亂碼,此時只要加</strong></p><p><strong>入一行設定代碼即可。</strong></p><h2 id="方法"><a href="#方法" class="headerlink" title="方法:"></a>方法:</h2><h3 id="在platformIO的專案資料夾裡有一個platformio-ini，打開此文件。"><a href="#在platformIO的專案資料夾裡有一個platformio-ini，打開此文件。" class="headerlink" title="在platformIO的專案資料夾裡有一個platformio.ini，打開此文件。"></a>在platformIO的專案資料夾裡有一個platformio.ini，打開此文件。</h3><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/5479708402450547329#"><img src="https://1.bp.blogspot.com/-vKAPXvvPExQ/YIYxS2l229I/AAAAAAAAeFQ/kfyB0nSsx1AbRjBkrwblppLarywketgVQCNcBGAsYHQ/w591-h332/but2.jpg"></a></p><h3 id="加入monitor-speed-115200，加入後存檔即可。"><a href="#加入monitor-speed-115200，加入後存檔即可。" class="headerlink" title="加入monitor_speed=115200，加入後存檔即可。"></a>加入monitor_speed=115200，加入後存檔即可。</h3><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/5479708402450547329#"><img src="https://1.bp.blogspot.com/-4fs9OT3YkHc/YIYxS_sPvSI/AAAAAAAAeFU/--QyhpQ7P844rjcXviYpBcSACr_9LYpdACNcBGAsYHQ/w580-h326/but.jpg"></a></p>]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 波特率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP32-CAM縮時錄影</title>
      <link href="/2021/08/29/ESP32-CAM%E7%B8%AE%E6%99%82%E9%8C%84%E5%BD%B1/"/>
      <url>/2021/08/29/ESP32-CAM%E7%B8%AE%E6%99%82%E9%8C%84%E5%BD%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="ESP32-CAM縮時錄影"><a href="#ESP32-CAM縮時錄影" class="headerlink" title="ESP32-CAM縮時錄影"></a>ESP32-CAM縮時錄影</h1><h6 id="tags-esp32-esp32-cam縮時錄影"><a href="#tags-esp32-esp32-cam縮時錄影" class="headerlink" title="tags: esp32 esp32-cam縮時錄影"></a>tags: <code>esp32</code> <code>esp32-cam縮時錄影</code></h6><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><p><strong>MicroSD卡 x1</strong></p><p><strong>ESP32-CAM x1</strong></p><p><strong>USB TTL傳輸線 或 USB TTL模組</strong></p><p><strong>雙母杜邦線 x1</strong></p><hr><h2 id="下載縮時錄影的庫"><a href="#下載縮時錄影的庫" class="headerlink" title="下載縮時錄影的庫"></a>下載縮時錄影的庫</h2><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/220625865150685015#">https://github.com/jameszah/ESP32-CAM-Video-Recorder</a>  </p><p><strong>下載完後，新增到Arduino IDE的library裡</strong></p><p><strong>打開編輯器裡的範例-&gt;TimeLapse</strong></p><p>**</p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/220625865150685015#"><img src="https://1.bp.blogspot.com/-LjDyK9KNMpk/YGwIPQCplYI/AAAAAAAAeDY/mx4YiCbQDxIEx4VHjyYmzJwMRU_Gg9yrACNcBGAsYHQ/w438-h246/1.jpg"></a></p><hr><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/220625865150685015#"><img src="https://1.bp.blogspot.com/-vym3Op0cW0s/YGwI357s-KI/AAAAAAAAeDg/KZRbfinTtQESOD8tmqD9f-5VXMC4uvX2QCNcBGAsYHQ/w441-h248/1.jpg"></a></p><hr><p>將ESP32-CAM板子上的IO0和GND用雙母杜邦連接起來。**</p><h2 id="還有一些選擇的設定，往下看影片更清楚"><a href="#還有一些選擇的設定，往下看影片更清楚" class="headerlink" title="還有一些選擇的設定，往下看影片更清楚"></a><strong>還有一些選擇的設定，往下看影片更清楚</strong></h2><p>**</p><div class="video-container"><iframe src="https://www.youtube.com/embed/BJXV09NFz1U" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p><a href="https://youtu.be/BJXV09NFz1U">https://youtu.be/BJXV09NFz1U</a></p><p>有空再來補如何用ffmpeg把縮時的照片整合起來**</p>]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
          <category> esp32 cam </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESP32 CAM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初嚐ESP32-寫入軔體</title>
      <link href="/2021/08/29/%E5%88%9D%E5%9A%90ESP32-%E5%AF%AB%E5%85%A5%E8%BB%94%E9%AB%94/"/>
      <url>/2021/08/29/%E5%88%9D%E5%9A%90ESP32-%E5%AF%AB%E5%85%A5%E8%BB%94%E9%AB%94/</url>
      
        <content type="html"><![CDATA[<h1 id="初嚐ESP32—寫入軔體"><a href="#初嚐ESP32—寫入軔體" class="headerlink" title="初嚐ESP32—寫入軔體"></a>初嚐ESP32—寫入軔體</h1><h6 id="tags-esp32"><a href="#tags-esp32" class="headerlink" title="tags: esp32"></a>tags: <code>esp32</code></h6><h2 id="有點複雜但又另人想嚐試的ESP32"><a href="#有點複雜但又另人想嚐試的ESP32" class="headerlink" title="有點複雜但又另人想嚐試的ESP32"></a>有點複雜但又另人想嚐試的ESP32</h2><p>樂鑫科技-<a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/7215718092950677692#">https://www.espressif.com/zh-hans/products/devkits/esp32-devkitc/overview</a>  </p><p>玩了一陣子Arduino後，看了幾個社團推ESP32系列，</p><p>於是入手了ESP32-CAM來玩玩，對比樹莓派的人臉</p><p>辨識，只要灌入範例就能跑人臉識別，所以開始關注</p><p>ESP32系列的板子。原來它是大陸一家叫樂鑫的大廠</p><p>做的開源板，上網看了他們的網站，發現頗豐富的，</p><p>其實很多前輩老師們都已做了很詳盡的介紹，我就</p><p>不多說了。</p><p>主要我是覺得ESP32感覺有同於Arduino系列，但又有</p><p>不一樣的地方，聽說它腳位有些不能給我們正常使用，</p><p>而且只接受3.3V輸入，但好處是集結了WIFI和藍芽。</p><p>可以用micropython和C語言來編譯，但這裡我就有點</p><p>難取捨，到底要用micropython或C來寫，雖然用ｃ比較</p><p>簡單而且又有強大的範例，但也我本身是從python開始</p><p>學起的，或許有空兩種都會學學。</p><hr><h2 id="我入手的ESP32-DOIT-DEVKIT-V1"><a href="#我入手的ESP32-DOIT-DEVKIT-V1" class="headerlink" title="我入手的ESP32-DOIT-DEVKIT-V1"></a>我入手的ESP32-DOIT-DEVKIT-V1</h2><p>這裡感覺很厲害的是有許多組”觸控接腳”，以＂TOUCH＂開頭為表示</p><p>另外GPIO用Arduino的方式寫一樣是D*，而ADC1 CH0就表示A0。</p><p>還有一個要注意的是，序列插孔左右有兩個按鍵，ＥＮ代表ＲＳＴ</p><p>ＢＯＯＴ代表寫入狀態</p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/7215718092950677692#"><img src="https://1.bp.blogspot.com/-aqByH8jZaHU/YIZiXH3A6NI/AAAAAAAAeFk/ZHPxVHay7pgsHhz54ZGE8xA33kHgiIWxwCNcBGAsYHQ/w327-h294/c44b9f5d0a23649c7b352c7c1eb8b5d8.jpg"></a></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/7215718092950677692#"><img src="https://1.bp.blogspot.com/-uV84UOVkK8A/YIZij6ll2LI/AAAAAAAAeFs/jQsh0S-ZUswKm_V-HmN8tGN_i2G7bpQJwCNcBGAsYHQ/w496-h359/ESP32-DOIT-DEVKIT-V1-Board-Pinout-30-GPIOs-Copy.png"></a></p><hr><h2 id="如何寫入軔體"><a href="#如何寫入軔體" class="headerlink" title="如何寫入軔體"></a>如何寫入軔體</h2><p>參考網址</p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/7215718092950677692#">下載 windows 專用 FlashTools</a>-取自JIMI大的教學網站  </p><p>這裡要注意的是ESP32燒錄工具若一打開就跳掉，請到</p><p>＂設定＂-“時間與語言”-“地區格式”選擇為”中文(簡體,中國)＂</p><p>重開機即可執行該軟體。</p>]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 寫入軔體 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0.96吋OLED基本顯示-ESP32</title>
      <link href="/2021/08/29/0-96%E5%90%8BOLED%E5%9F%BA%E6%9C%AC%E9%A1%AF%E7%A4%BA-ESP32/"/>
      <url>/2021/08/29/0-96%E5%90%8BOLED%E5%9F%BA%E6%9C%AC%E9%A1%AF%E7%A4%BA-ESP32/</url>
      
        <content type="html"><![CDATA[<h1 id="0-96吋OLED基本顯示-ESP32"><a href="#0-96吋OLED基本顯示-ESP32" class="headerlink" title="0.96吋OLED基本顯示-ESP32"></a>0.96吋OLED基本顯示-ESP32</h1><h6 id="tags-esp32-oled"><a href="#tags-esp32-oled" class="headerlink" title="tags: esp32 oled"></a>tags: <code>esp32</code> <code>oled</code></h6><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/6459347446114782211?hl=zh-TW#"><img src="https://lh3.googleusercontent.com/-SfRPMdP0feE/YMdKWUgpKzI/AAAAAAAAeTk/DtG0FqRB7hI4Xu0suyprVmf1lSZ2c6BpwCNcBGAsYHQ/s1600/1623673410135139-0.png"></a></p><h2 id="接線方式"><a href="#接線方式" class="headerlink" title="接線方式"></a>接線方式</h2><p><strong><em>OLED</em></strong>||<strong>ESP32</strong></p><p>-----------------</p><p>VCC----3V3</p><p>GND—-GND</p><p>SCL—–D22</p><p>SDA—-D21</p><h2 id="函式參考"><a href="#函式參考" class="headerlink" title="函式參考"></a>函式參考</h2><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/6459347446114782211?hl=zh-TW#">我的函式筆記本</a>  </p><hr><h2 id="須下載及匯入以下函式庫"><a href="#須下載及匯入以下函式庫" class="headerlink" title="須下載及匯入以下函式庫"></a>須下載及匯入以下函式庫</h2><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/6459347446114782211?hl=zh-TW#">Adafruit_SSD1306</a>  </p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/6459347446114782211?hl=zh-TW#">Adafruit-GFX-Library</a>  </p><h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#include &lt;Adafruit_GFX.h&gt;#include &lt;Adafruit_SSD1306.h&gt;#include &lt;Adafruit_GrayOLED.h&gt;#include &lt;Wire.h&gt;#define SCREEN_WIDTH 128 &#x2F;&#x2F; OLED display width, in pixels#define SCREEN_HEIGHT 64 &#x2F;&#x2F; OLED display height, in pixels  #define OLED_RESET -1 &#x2F;&#x2F; Reset pin # (or -1 if sharing Arduino reset pin)#define SCREEN_ADDRESS 0x3C &#x2F;&#x2F;&#x2F;&lt; See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &amp;Wire, OLED_RESET);void setup()&#123;  Serial.begin(115200);  display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS, OLED_RESET);&#125;void loop()&#123;  display.clearDisplay();  display.setCursor(0, 0);  display.setTextSize(1);  display.setTextColor(BLACK, WHITE);  display.println(&quot;Hello!&quot;);  display.setCursor(0, 16);  display.setTextSize(2);  display.setTextColor(WHITE);  display.println(&quot;ESP32&quot;);  display.setTextSize(3);  display.setCursor(0, 32);  display.println(&quot;Arduino&quot;);  display.display();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/6459347446114782211?hl=zh-TW#"><img src="https://lh3.googleusercontent.com/-FEjaHLmo_yM/YMdNVhVTE-I/AAAAAAAAeTs/fbsZkMqTyR8UmjWzqETE6Bvx6Hce70NCACNcBGAsYHQ/s1600/1623674195093239-0.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oled </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>呼吸燈-ESP32</title>
      <link href="/2021/08/29/%E5%91%BC%E5%90%B8%E7%87%88-ESP32/"/>
      <url>/2021/08/29/%E5%91%BC%E5%90%B8%E7%87%88-ESP32/</url>
      
        <content type="html"><![CDATA[<h1 id="呼吸燈-ESP32"><a href="#呼吸燈-ESP32" class="headerlink" title="呼吸燈-ESP32"></a>呼吸燈-ESP32</h1><h2 id="接線方式"><a href="#接線方式" class="headerlink" title="接線方式"></a>接線方式</h2><h6 id="tags-esp32"><a href="#tags-esp32" class="headerlink" title="tags: esp32"></a>tags: <code>esp32</code></h6><ul><li>  <strong>電阻 10K歐姆 x1</strong></li><li>  <strong>LED x1</strong></li></ul><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/632666415205285811?hl=zh-TW#"><img src="https://1.bp.blogspot.com/-o7ZeTZikdPc/YMlLS_bH5VI/AAAAAAAAeT8/p-2FoevUIRQT9z24R3Dfjrq-w-hmE7rgwCNcBGAsYHQ/w594-h373/222251qialhmh1wlko8hz8.jpg"></a></p><h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><p><strong><em>函式說明請參考-</em></strong><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/632666415205285811?hl=zh-TW#">我的函式筆記本</a></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">void setup()&#123;    ledcSetup(0, 5000, 8);    ledcAttachPin(25, 0);&#125;void loop()&#123;    for (int i &#x3D; 0; i &lt;&#x3D;255 ; i++)    &#123;        ledcWrite(0, i);        delay(20);    &#125;    for (int j &#x3D; 255; j &gt; 0; j--)    &#123;        ledcWrite(0, j);        delay(20);    &#125;    delay(300);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 呼吸燈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PIR人體感應器</title>
      <link href="/2021/08/29/PIR%E4%BA%BA%E9%AB%94%E6%84%9F%E6%87%89%E5%99%A8/"/>
      <url>/2021/08/29/PIR%E4%BA%BA%E9%AB%94%E6%84%9F%E6%87%89%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="PIR人體感應器"><a href="#PIR人體感應器" class="headerlink" title="PIR人體感應器"></a>PIR人體感應器</h1><h6 id="tags-esp32-PIR-motion"><a href="#tags-esp32-PIR-motion" class="headerlink" title="tags: esp32 PIR_motion"></a>tags: <code>esp32</code> <code>PIR_motion</code></h6><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/5742917802289246193?hl=zh-TW#"><img src="https://1.bp.blogspot.com/-IyjhCgpFA20/YMtNtZbtNII/AAAAAAAAeUI/Yxs-05vGkwQmMKGDMdRG4OWA72p9fYW-ACNcBGAsYHQ/w403-h333/pir-01.jpg"></a><br>實驗說明</p><hr><p><em>此次實驗，以PIR感應器檢測人體運動，在高電位時使LED亮，</em></p><p><em>到達設製的時間，自動滅掉。</em></p><p><em>同時我在這個實驗裡學到中斷函式attachInterrupt()和mills()的運用</em></p><p><em>中斷函式可以運用在PIR，當檢測到變化，中斷函式會被觸發去執行所</em></p><p><em>設定的動作。同時藉由mills()替化delay()而不至於所有的過程都被delay()</em></p><p><em>暫停。</em></p><hr><h2 id="接線方式"><a href="#接線方式" class="headerlink" title="接線方式"></a>接線方式</h2><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/5742917802289246193?hl=zh-TW#"><img src="https://1.bp.blogspot.com/-kZQEvtpmUs8/YMtRIIu7vbI/AAAAAAAAeUQ/cap6CtGU6xAU2z7SGzMpPxYlg-pUY5kZQCNcBGAsYHQ/w826-h457/0d48261252092c03a3a44e37cd427709.jpg"></a></p><h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">const int led&#x3D;18;const int motionSensor&#x3D;27;unsigned long oldTime;bool startTimer&#x3D;false;void IRAM_ATTR detectedMotion()&#123;    Serial.println(&quot;detected motion....&quot;);    digitalWrite(led, HIGH);    oldTime&#x3D;millis();    startTimer&#x3D;true;&#125;void setup()&#123;    Serial.begin(115200);    pinMode(led, OUTPUT);    pinMode(motionSensor, INPUT_PULLUP);    attachInterrupt(digitalPinToInterrupt(motionSensor), detectedMotion, RISING);&#125;void loop()&#123;    unsigned long now&#x3D;millis();    if (startTimer&amp;&amp;(now-oldTime&gt;5000))&#123;        Serial.println(&quot;motion stop!!!&quot;);        digitalWrite(led, LOW);        startTimer&#x3D;false;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>特別提到這裡有一個自定義函式，它的作用是當PIR偵測到動作後，就會去執行這部份</em></p><p><em>並且使startTimer開始紀錄執行後的时間。</em></p><p><strong>注意：IRAM_ATTR 用於運行 RAM 中的中斷代碼，否則代碼存儲在 flash 中，速度較慢。</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">void IRAM_ATTR detectedMotion()&#123;    Serial.println(&quot;detected motion....&quot;);    digitalWrite(led, HIGH);    oldTime&#x3D;millis();    startTimer&#x3D;true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>中斷函式可以參考</em>-<a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/5742917802289246193?hl=zh-TW#">我的函式筆記本</a></p><pre class="line-numbers language-none"><code class="language-none">attachInterrupt(digitalPinToInterrupt(motionSensor), detectedMotion, RISING);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em>時間函式可以參考</em>-<a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/5742917802289246193?hl=zh-TW#">我的函式筆記本</a></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">unsigned long now&#x3D;millis();    if (startTimer&amp;&amp;(now-oldTime&gt;5000))&#123;        Serial.println(&quot;motion stop!!!&quot;);        digitalWrite(led, LOW);        startTimer&#x3D;false;    &#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="video-container"><iframe src="https://www.youtube.com/embed/xQr5rVHvR-k" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PIR </tag>
            
            <tag> PIR人體感應器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>網頁控制LED燈-ESP32</title>
      <link href="/2021/08/29/%E7%B6%B2%E9%A0%81%E6%8E%A7%E5%88%B6LED%E7%87%88-ESP32/"/>
      <url>/2021/08/29/%E7%B6%B2%E9%A0%81%E6%8E%A7%E5%88%B6LED%E7%87%88-ESP32/</url>
      
        <content type="html"><![CDATA[<h1 id="網頁控制LED燈-ESP32"><a href="#網頁控制LED燈-ESP32" class="headerlink" title="網頁控制LED燈-ESP32"></a>網頁控制LED燈-ESP32</h1><h6 id="tags-esp32"><a href="#tags-esp32" class="headerlink" title="tags: esp32"></a>tags: <code>esp32</code></h6><h2 id="先上程式碼"><a href="#先上程式碼" class="headerlink" title="先上程式碼"></a>先上程式碼</h2><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#include &lt;WiFi.h&gt;const char* ssid&#x3D;&quot;基地台名稱&quot;;const char* password&#x3D;&quot;基地台密碼&quot;;WiFiServer server(80);String header;String output2&#x3D;&quot;off&quot;;const int output&#x3D;2;unsigned long currentTime&#x3D;millis();unsigned long previousTime&#x3D;0;void setup()&#123;  pinMode(output, OUTPUT);  digitalWrite(output, LOW);  WiFi.begin(ssid, password);  Serial.begin(115200);  while (WiFi.status() !&#x3D; WL_CONNECTED)  &#123;    delay(500);    Serial.print(&quot;.&quot;);  &#125;  Serial.println(&quot;已連線到基地台&quot;);  Serial.print(&quot;基地台名稱: &quot;);  Serial.println(ssid);  Serial.println(WiFi.localIP());  server.begin();&#125;void loop()&#123;  WiFiClient client&#x3D;server.available();  if (client)&#123;    currentTime&#x3D;millis();    previousTime&#x3D;currentTime;    Serial.println(&quot;新的客戶端&quot;);    String currentLine&#x3D;&quot;&quot;;    while (client.connected()&amp;&amp;currentTime-previousTime&lt;&#x3D;2000)    &#123;      currentTime&#x3D;millis();      if (client.available())&#123;        char c&#x3D;client.read();        Serial.write(c);        header+&#x3D;c;        if (c&#x3D;&#x3D;&#39;\n&#39;)&#123;          if (currentLine.length()&#x3D;&#x3D;0)&#123;            client.println(&quot;HTTP&#x2F;1.1 200 OK&quot;);            client.println(&quot;Content-type:text&#x2F;html&quot;);            client.println(&quot;Connection: close&quot;);            client.println();            if (header.indexOf(&quot;GET &#x2F;2&#x2F;on&quot;)&gt;&#x3D;0)&#123;              Serial.println(&quot;on&quot;);              output2&#x3D;&quot;on&quot;;              digitalWrite(output, HIGH);            &#125;else if (header.indexOf(&quot;GET &#x2F;2&#x2F;off&quot;)&gt;&#x3D;0)&#123;              Serial.println(&quot;off&quot;);              output2&#x3D;&quot;off&quot;;              digitalWrite(output, LOW);            &#125;            client.println(&quot;&lt;!DOCTYPE html&gt;&lt;html&gt;&quot;);            client.println(&quot;&lt;style&gt;html &#123;text-align: center;font-family: Arial;display: inline-block;margin: auto;&#125;&quot;);            client.println(&quot;.button &#123;background-color: #e0e252; border: none;color: white;padding: 15px 35px;&quot;);            client.println(&quot;text-align: center;text-decoration: none;display: inline-block;font-size: 16px;&#125;&quot;);            client.println(&quot;.button2 &#123;background-color: #b0b1a2;padding: 15px 32px;&#125;&lt;&#x2F;style&gt;&lt;&#x2F;head&gt;&quot;);                        client.println(&quot;&lt;body&gt;&lt;h1&gt;ESP32 Web Server&lt;&#x2F;h1&gt;&quot;);                        client.println(&quot;&lt;p&gt;GPIO-2  &quot;+output2+&quot;&lt;&#x2F;p&gt;&quot;);                           if (output2&#x3D;&#x3D;&quot;off&quot;) &#123;              client.println(&quot;&lt;p&gt;&lt;a href&#x3D;\&quot;&#x2F;2&#x2F;on\&quot;&gt;&lt;button class&#x3D;\&quot;button\&quot;&gt;ON&lt;&#x2F;button&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;&quot;);              client.println(&quot;&lt;p&gt;&lt;a href&#x3D;\&quot;&#x2F;2&#x2F;off\&quot;&gt;&lt;button class&#x3D;\&quot;button button2\&quot;&gt;OFF&lt;&#x2F;button&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;&quot;);            &#125; else if (output2&#x3D;&#x3D;&quot;on&quot;)&#123;              client.println(&quot;&lt;p&gt;&lt;a href&#x3D;\&quot;&#x2F;2&#x2F;on\&quot;&gt;&lt;button class&#x3D;\&quot;button button2\&quot;&gt;ON&lt;&#x2F;button&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;&quot;);              client.println(&quot;&lt;p&gt;&lt;a href&#x3D;\&quot;&#x2F;2&#x2F;off\&quot;&gt;&lt;button class&#x3D;\&quot;button\&quot;&gt;OFF&lt;&#x2F;button&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;&quot;);            &#125;            client.println(&quot;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;&quot;);            client.println();            break;          &#125;else&#123;            currentLine&#x3D;&quot;&quot;;          &#125;        &#125;      &#125;    &#125;  header&#x3D;&quot;&quot;;  client.stop();  Serial.println(&quot;Client disconnected.&quot;);  Serial.println(&quot;&quot;);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>匯入WIFI的庫</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#include &lt;WiFi.h&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>定義基地台名稱和密碼</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">const char* ssid&#x3D;&quot;基地台名稱&quot;;const char* password&#x3D;&quot;基地台密碼&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>定義伺服器的端口</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">WiFiServer server(80);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>建立存放接數到的檔頭</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">String header;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>網址列預設內建LED為off<br>例如:<a href="http://localhost/off">http://localhost/off</a></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">String output2&#x3D;&quot;off&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>建立LED腳位,紀錄當下時間,和過去的時間</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">const int output&#x3D;2;unsigned long currentTime&#x3D;millis();unsigned long previousTime&#x3D;0;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>主要是建立WiFi連線到基地台的初始化<br>包含伺服端的初始化,如果連線成功後,<br>會在監控視窗上顯示IP</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">void setup()&#123;  pinMode(output, OUTPUT);  digitalWrite(output, LOW);  WiFi.begin(ssid, password);  Serial.begin(115200);  while (WiFi.status() !&#x3D; WL_CONNECTED)  &#123;    delay(500);    Serial.print(&quot;.&quot;);  &#125;  Serial.println(&quot;已連線到基地台&quot;);  Serial.print(&quot;基地台名稱: &quot;);  Serial.println(ssid);  Serial.println(WiFi.localIP());  server.begin();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在void loop(){}裡面<br>先建立客服端的監聽</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">WiFiClient client&#x3D;server.available();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果客戶端和伺服端能成功建立溝通,伺服端會一直監聽客服端所給予的請求<br>這個請求是以字串被存入變數並存放於內,如果得到on就回應開燈,女果得到off<br>就關燈</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">if (client)&#123;    currentTime&#x3D;millis();    previousTime&#x3D;currentTime;    Serial.println(&quot;新的客戶端&quot;);    String currentLine&#x3D;&quot;&quot;;    while (client.connected()&amp;&amp;currentTime-previousTime&lt;&#x3D;2000)    &#123;      currentTime&#x3D;millis();      if (client.available())&#123;        char c&#x3D;client.read();        Serial.write(c);        header+&#x3D;c;        if (c&#x3D;&#x3D;&#39;\n&#39;)&#123;          if (currentLine.length()&#x3D;&#x3D;0)&#123;            client.println(&quot;HTTP&#x2F;1.1 200 OK&quot;);            client.println(&quot;Content-type:text&#x2F;html&quot;);            client.println(&quot;Connection: close&quot;);            client.println();             if (header.indexOf(&quot;GET &#x2F;2&#x2F;on&quot;)&gt;&#x3D;0)&#123;              Serial.println(&quot;on&quot;);              output2&#x3D;&quot;on&quot;;              digitalWrite(output, HIGH);            &#125;else if (header.indexOf(&quot;GET &#x2F;2&#x2F;off&quot;)&gt;&#x3D;0)&#123;              Serial.println(&quot;off&quot;);              output2&#x3D;&quot;off&quot;;              digitalWrite(output, LOW);            &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下是html</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">client.println("<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>");client.println("<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">html</span> <span class="token punctuation">&#123;</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span> Arial<span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>"<span class="token punctuation">)</span><span class="token punctuation">;</span>client.<span class="token function">println</span><span class="token punctuation">(</span><span class="token string">".button &#123;background-color: #e0e252; border: none;color: white;padding: 15px 35px;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>client.<span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"text-align: center;text-decoration: none;display: inline-block;font-size: 16px;&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>client.<span class="token function">println</span><span class="token punctuation">(</span>".button2 <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> #b0b1a2<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> 15px 32px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>");client.println("<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>ESP32 Web Server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>");client.println("<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>GPIO-2  "+output2+"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>");   if (output2=="off") &#123;  client.println("<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&lt;a href=\"/2/on\">&lt;button class=\"button\">ON<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>");  client.println("<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&lt;a href=\"/2/off\">&lt;button class=\"button button2\">OFF<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>");&#125; else if (output2=="on")&#123;  client.println("<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&lt;a href=\"/2/on\">&lt;button class=\"button button2\">ON<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>");  client.println("<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&lt;a href=\"/2/off\">&lt;button class=\"button\">OFF<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>");&#125;client.println("<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最後完成回應,終止客戶端對伺服端的請求</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">client.stop();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="實驗結果"><a href="#實驗結果" class="headerlink" title="實驗結果"></a>實驗結果</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/OmbY4UQ8Kcc" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webserver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DeepSleep深度睡眠的實驗</title>
      <link href="/2021/08/29/DeepSleep%E6%B7%B1%E5%BA%A6%E7%9D%A1%E7%9C%A0%E7%9A%84%E5%AF%A6%E9%A9%97/"/>
      <url>/2021/08/29/DeepSleep%E6%B7%B1%E5%BA%A6%E7%9D%A1%E7%9C%A0%E7%9A%84%E5%AF%A6%E9%A9%97/</url>
      
        <content type="html"><![CDATA[<h2 id="為什麼要讓ESP32進入深度睡眠模式"><a href="#為什麼要讓ESP32進入深度睡眠模式" class="headerlink" title="為什麼要讓ESP32進入深度睡眠模式?"></a>為什麼要讓ESP32進入深度睡眠模式?</h2><p><strong><em>其實我也是最近剛學到這一塊，所以就順手紀錄下來。</em></strong></p><p><strong><em>記得以前做過一些要電池的成品，發現放一天半左右就</em></strong></p><p><strong><em>沒電了，後來網路上搜尋相關知識才知道Arduino和esp32</em></strong></p><p><strong><em>它們都有使其進入深度睡眠的方法。</em></strong></p><p><strong><em>在深度睡眠中，可以使機板降低功耗，CPU和WIFI都會</em></strong></p><p><strong>_停止運作，只有ULP還會以最低功耗運作，雖然 ESP32 _</strong></p><p><strong><em>處於深度睡眠模式，但 RTC 記憶體也仍然處於打開狀態，</em></strong></p><p><strong><em>因此我們可以為 ULP 共同處理器編寫一個程式，並將其</em></strong></p><p><strong><em>存儲在 RTC 記憶體中以訪問週邊設備、內部定時器和內</em></strong></p><p><strong><em>部感測器。</em></strong></p><h2 id="RTC引腳"><a href="#RTC引腳" class="headerlink" title="RTC引腳"></a>RTC引腳</h2><p><strong><em>下圖黃色區塊的都可以使用RTC</em></strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/4527766207386106731#"><img src="https://1.bp.blogspot.com/-Ap7xbLO-MAE/YM_mR7e9KwI/AAAAAAAAeUw/rcA6j1T1gKgaLSdPPXI5A2zfn467tEIJwCNcBGAsYHQ/w694-h412/ESP32-DOIT-DEVKIT-V1-Board-Pinout-30-GPIOs-Copy.png"></a></p><hr><h2 id="喚醒模式"><a href="#喚醒模式" class="headerlink" title="喚醒模式"></a>喚醒模式</h2><h3 id="主要有種喚醒模式"><a href="#主要有種喚醒模式" class="headerlink" title="主要有種喚醒模式"></a>主要有種喚醒模式</h3><ol><li> <em><strong>定時器喚醒</strong></em></li><li> <em><strong>觸摸喚醒</strong></em></li><li> <em><strong>外部喚醒/多種不同的外部喚醒</strong></em></li><li> <em><strong>ULP喚醒</strong></em></li></ol><hr><h2 id="1-定時器喚醒模式實驗"><a href="#1-定時器喚醒模式實驗" class="headerlink" title="1.定時器喚醒模式實驗"></a>1.定時器喚醒模式實驗</h2><p><strong><em>ESP32可進入深睡模式，並預設時間喚醒</em></strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#define us_to_s 1000000#define time__to_sleep 5  RTC_DATA_ATTR int count &#x3D; 0;  void print_wakeup_reason()&#123;  esp_sleep_wakeup_cause_t wakeup_reason;  wakeup_reason &#x3D; esp_sleep_get_wakeup_cause();  switch (wakeup_reason)  &#123;  case ESP_SLEEP_WAKEUP_EXT0:    Serial.println(&quot;Wakeup caused by external signal using RTC_IO&quot;);    break;  case ESP_SLEEP_WAKEUP_EXT1:    Serial.println(&quot;Wakeup caused by external signal using RTC_CNTL&quot;);    break;  case ESP_SLEEP_WAKEUP_TIMER:    Serial.println(&quot;Wakeup caused by timer&quot;);    break;  case ESP_SLEEP_WAKEUP_TOUCHPAD:    Serial.println(&quot;Wakeup caused by touchpad&quot;);    break;  case ESP_SLEEP_WAKEUP_ULP:    Serial.println(&quot;Wakeup caused by ULP program&quot;);    break;  default:    Serial.printf(&quot;Wakeup was not caused by deep sleep: %d\n&quot;, wakeup_reason);    break;  &#125;&#125;  void setup()&#123;  Serial.begin(115200);  delay(1000);  ++count;  Serial.println(&quot;boot num: &quot; + String(count));  print_wakeup_reason();  esp_sleep_enable_timer_wakeup(us_to_s * time_to_sleep);  delay(1000);  esp_deep_sleep_start();&#125;void loop()&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>一開始設定微秒轉成秒，也可以以直接寫成</strong>TIME_TO_SLEEP  5000000</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#define us_TO_s 1000000#define TIME_TO_SLEEP  5   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>這一段是說要在RTC上保存喚醒的次數，可以在最前面加上RTC_DATA_ATTR</strong></p><p>**_<em>但是在按下EN鍵重啓這個數據會流失掉_</em>*</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">RTC_DATA_ATTR int count &#x3D; 0;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>這個函式主要是設定”被換醒的原因”</strong></p><pre class="line-numbers language-none"><code class="language-none">rst:0x5 (DEEPSLEEP_RESET),boot:0x17 (SPI_FAST_FLASH_BOOT)configsip: 0, SPIWP:0xeeclk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00mode:DIO, clock div:2load:0x3fff0018,len:4load:0x3fff001c,len:1044load:0x40078000,len:10124load:0x40080400,len:5828entry 0x400806a8boot num: 2Wakeup caused by timerets Jun  8 2016 00:22:57  rst:0x5 (DEEPSLEEP_RESET),boot:0x17 (SPI_FAST_FLASH_BOOT)configsip: 0, SPIWP:0xeeclk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00mode:DIO, clock div:2load:0x3fff0018,len:4load:0x3fff001c,len:1044load:0x40078000,len:10124load:0x40080400,len:5828entry 0x400806a8boot num: 3Wakeup caused by timerets Jun  8 2016 00:22:57  rst:0x5 (DEEPSLEEP\_RESET),boot:0x17 (SPI\_FAST\_FLASH\_BOOT)configsip: 0, SPIWP:0xeeclk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00mode:DIO, clock div:2load:0x3fff0018,len:4load:0x3fff001c,len:1044load:0x40078000,len:10124load:0x40080400,len:5828entry 0x400806a8boot num: 4Wakeup caused by timerets Jun  8 2016 00:22:57<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>進入到void setup(){}</strong></p><p><strong>設定序列埠的波特率</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Serial.begin(115200);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>每次被喚醒，count就會加1，並被印出來</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">++count; Serial.println(&quot;Boot number: &quot;   +   String(bootCount));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>調用剛最前方那個被喚醒的原因函式</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">print_wakeup_reason()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>啓用幾秒後，調用睡眠模式的函式</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">esp_sleep_enable_timer_wakeup(TIME_TO_SLEEP * uS_TO_S_FACTOR);esp_deep_sleep_start()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="實驗結果"><a href="#實驗結果" class="headerlink" title="實驗結果"></a>實驗結果</h2><p>紅色字體是指進入深睡模式</p><p>土黃色字體是指被喚醒的次數</p><p>深藍色字體是被喚醒的原因</p><pre class="line-numbers language-none"><code class="language-none">rst:0x5 (DEEPSLEEP\_RESET),boot:0x17 (SPI\_FAST\_FLASH\_BOOT)configsip: 0, SPIWP:0xeeclk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00mode:DIO, clock div:2load:0x3fff0018,len:4load:0x3fff001c,len:1044load:0x40078000,len:10124load:0x40080400,len:5828entry 0x400806a8boot num: 2Wakeup caused by timerets Jun  8 2016 00:22:57  rst:0x5 (DEEPSLEEP\_RESET),boot:0x17 (SPI\_FAST\_FLASH\_BOOT)configsip: 0, SPIWP:0xeeclk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00mode:DIO, clock div:2load:0x3fff0018,len:4load:0x3fff001c,len:1044load:0x40078000,len:10124load:0x40080400,len:5828entry 0x400806a8boot num: 3Wakeup caused by timerets Jun  8 2016 00:22:57  rst:0x5 (DEEPSLEEP\_RESET),boot:0x17 (SPI\_FAST\_FLASH\_BOOT)configsip: 0, SPIWP:0xeeclk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00mode:DIO, clock div:2load:0x3fff0018,len:4load:0x3fff001c,len:1044load:0x40078000,len:10124load:0x40080400,len:5828entry 0x400806a8boot num: 4Wakeup caused by timerets Jun  8 2016 00:22:57<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="２-觸摸喚醒實驗"><a href="#２-觸摸喚醒實驗" class="headerlink" title="２.觸摸喚醒實驗"></a>２.觸摸喚醒實驗</h2><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/4527766207386106731#"><img src="https://i0.wp.com/randomnerdtutorials.com/wp-content/uploads/2019/02/Zero_Touch_Wake_Up_bb.png?w=858&quality=100&strip=all&ssl=1"></a></p><p>後來我發現來在Arduino IDE裡切換到ESP32的模式下，範例裡就有DEEP SLEEP的範例可用</p><p>將範例載入後，上傳。</p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/4527766207386106731#"><img src="https://1.bp.blogspot.com/-3tHh0qOHWtA/YNFMzOX5NfI/AAAAAAAAeVY/oDALi3RFu_43L-nOaPyxfx28RiB_6ypmwCNcBGAsYHQ/w603-h647/1.jpg"></a></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#define Threshold 40 RTC_DATA_ATTR int bootCount &#x3D; 0;touch_pad_t touchPin;void print_wakeup_reason()&#123;  esp_sleep_wakeup_cause_t wakeup_reason;  wakeup_reason &#x3D; esp_sleep_get_wakeup_cause();  switch(wakeup_reason)  &#123;    case ESP_SLEEP_WAKEUP_EXT0 : Serial.println(&quot;Wakeup caused by external signal using RTC_IO&quot;); break;    case ESP_SLEEP_WAKEUP_EXT1 : Serial.println(&quot;Wakeup caused by external signal using RTC_CNTL&quot;); break;    case ESP_SLEEP_WAKEUP_TIMER : Serial.println(&quot;Wakeup caused by timer&quot;); break;    case ESP_SLEEP_WAKEUP_TOUCHPAD : Serial.println(&quot;Wakeup caused by touchpad&quot;); break;    case ESP_SLEEP_WAKEUP_ULP : Serial.println(&quot;Wakeup caused by ULP program&quot;); break;    default : Serial.printf(&quot;Wakeup was not caused by deep sleep: %d\\n&quot;,wakeup_reason); break;  &#125;&#125;  void print_wakeup_touchpad()&#123;  touchPin &#x3D; esp_sleep_get_touchpad_wakeup_status();  switch(touchPin)  &#123;    case 0  : Serial.println(&quot;Touch detected on GPIO 4&quot;); break;    case 1  : Serial.println(&quot;Touch detected on GPIO 0&quot;); break;    case 2  : Serial.println(&quot;Touch detected on GPIO 2&quot;); break;    case 3  : Serial.println(&quot;Touch detected on GPIO 15&quot;); break;    case 4  : Serial.println(&quot;Touch detected on GPIO 13&quot;); break;    case 5  : Serial.println(&quot;Touch detected on GPIO 12&quot;); break;    case 6  : Serial.println(&quot;Touch detected on GPIO 14&quot;); break;    case 7  : Serial.println(&quot;Touch detected on GPIO 27&quot;); break;    case 8  : Serial.println(&quot;Touch detected on GPIO 33&quot;); break;    case 9  : Serial.println(&quot;Touch detected on GPIO 32&quot;); break;    default : Serial.println(&quot;Wakeup not by touchpad&quot;); break;  &#125;&#125;void callback()&#123;&#125;void setup()&#123;  Serial.begin(115200)  delay(1000);   ++bootCount;  Serial.println(&quot;Boot number: &quot; + String(bootCount));  print_wakeup_reason();  print_wakeup_touchpad();  touchAttachInterrupt(T4, callback, Threshold);  esp_sleep_enable_touchpad_wakeup();  Serial.println(&quot;Going to sleep now&quot;);  esp_deep_sleep_start();  Serial.println(&quot;This will never be printed&quot;);&#125;void loop()&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程式碼裡面這個是給予觸摸觸發的值</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#define Threshold   40<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>當在觸摸引腳上讀取的值低於 Threshold 變量上設置的值時，ESP32 喚醒並執行回調函數。<br>Callback() 函數只有在 ESP32 處於喚醒狀態時才會執行。</p><p>所以如果是在喚醒的狀態下壓著觸摸腳不放開，並不會執行callback()回調。</p><p>如果是在睡眠狀態下碰了一下引腳馬上放開，這樣也不會執行callback()回調。</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">touchAttachInterrupt(T3, callback, Threshold); <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>callback() 函數是空的</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">void  callback()&#123;   &#x2F;&#x2F;placeholder callback function   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下來，使用 esp_sleep_enable_touchpad_wakeup() 函數將觸摸引腳設置為喚醒源。</p><p>esp_sleep_enable_touchpad_wakeup()</p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/4527766207386106731#"><img src="https://lh3.googleusercontent.com/-gTuSGE2uzFA/YNFSKM2L1WI/AAAAAAAAeVg/mSIR56s4R8QZhOw7ylC3CoBbSPiYcyoygCNcBGAsYHQ/s1600/1624330763119130-0.png"></a> </p><hr><h2 id="3-外部喚醒-ext0"><a href="#3-外部喚醒-ext0" class="headerlink" title="3.外部喚醒 (ext0)"></a>3.外部喚醒 (ext0)</h2><p>要使用此喚醒，請使用以下函數：  </p><p>Esp_sleep_enable_ext0_wakeup（GPIO_NUM_X，level）<br>此函數接受您要使用的引腳作為第一個參數，格式為 GPIO_NUM_X，其中 X 表示該引腳的 GPIO 編號。  </p><p>第二個參數 level 可以是 1 或 0。這表示將觸發喚醒的 GPIO 狀態。</p><p>注意：使用此喚醒，只能使用 RTC GPIO 引腳。</p><blockquote><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/4527766207386106731#"><img src="https://i1.wp.com/randomnerdtutorials.com/wp-content/uploads/2019/02/external_wake_up_button_bb.png?w=1134&quality=100&strip=all&ssl=1"></a></p></blockquote><p><strong>可以在範例裡載入如下程式碼</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/4527766207386106731#"><img src="https://1.bp.blogspot.com/-E9SwEIStzFc/YNKgrFbR7fI/AAAAAAAAeVo/OtrrY-gkN-QraG7XaiuSA6VUX-pik6F2wCNcBGAsYHQ/w655-h549/2.jpg"></a></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">&gt; &#x2F;*&gt; &gt; Deep Sleep with External Wake Up&gt; &gt; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; &gt; This code displays how to use deep sleep with&gt; &gt; an external trigger as a wake up source and how&gt; &gt; to store data in RTC memory to use it over reboots&gt; &gt;   &gt; &gt; This code is under Public Domain License.&gt; &gt; &gt; Hardware Connections&gt; &gt; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; &gt; Push Button to GPIO 33 pulled down with a 10K Ohm&gt; &gt; resistor&gt;&gt; &gt; NOTE:&gt; &gt; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; &gt; Only RTC IO can be used as a source for external wake&gt; &gt; source. They are pins: 0,2,4,12-15,25-27,32-39.&gt; &gt; &gt; Author:&gt; &gt; Pranav Cherukupalli &lt;cherukupallip@gmail.com&gt;&gt; &gt; *&#x2F;&gt; &gt; &gt; #define BUTTON_PIN_BITMASK 0x200000000 &#x2F;&#x2F; 2^33 in hex&gt; &gt;   &gt; &gt; RTC_DATA_ATTR int bootCount &#x3D; 0;&gt;&gt; &gt; &#x2F;*&gt; &gt; Method to print the reason by which ESP32&gt; &gt; has been awaken from sleep&gt; &gt; *&#x2F;&gt; &gt; void print_wakeup_reason()&#123;&gt; &gt;   esp_sleep_wakeup_cause_t wakeup_reason;&gt;&gt; &gt;   wakeup_reason &#x3D; esp_sleep_get_wakeup_cause();&gt; &gt; &gt;   switch(wakeup_reason)&gt; &gt;   &#123;&gt; &gt;     case ESP_SLEEP_WAKEUP_EXT0 : Serial.println(&quot;Wakeup caused by external signal using RTC_IO&quot;); break;&gt; &gt;     case ESP_SLEEP_WAKEUP_EXT1 : Serial.println(&quot;Wakeup caused by external signal using RTC_CNTL&quot;); break;&gt; &gt;     case ESP_SLEEP_WAKEUP_TIMER : Serial.println(&quot;Wakeup caused by timer&quot;); break;&gt; &gt;     case ESP_SLEEP_WAKEUP_TOUCHPAD : Serial.println(&quot;Wakeup caused by touchpad&quot;); break;&gt; &gt;     case ESP_SLEEP_WAKEUP_ULP : Serial.println(&quot;Wakeup caused by ULP program&quot;); break;&gt; &gt;     default : Serial.printf(&quot;Wakeup was not caused by deep sleep: %d\\n&quot;,wakeup_reason); break;&gt; &gt;   &#125;&gt; &gt; &#125;&gt; &gt;   &gt; &gt; void setup()&#123;&gt; &gt;   Serial.begin(115200);&gt; &gt;   delay(1000); &#x2F;&#x2F;Take some time to open up the Serial Monitor&gt; &gt; &gt;   &#x2F;&#x2F;Increment boot number and print it every reboot&gt; &gt;   ++bootCount;&gt; &gt;   Serial.println(&quot;Boot number: &quot; + String(bootCount));&gt; &gt;   &gt;   &#x2F;&#x2F;Print the wakeup reason for ESP32&gt; &gt;   print_wakeup_reason();&gt; &gt;  &gt;   &#x2F;*&gt; &gt;   First we configure the wake up source&gt; &gt;   We set our ESP32 to wake up for an external trigger.&gt; &gt;   There are two types for ESP32, ext0 and ext1 .&gt; &gt;   ext0 uses RTC_IO to wakeup thus requires RTC peripherals&gt; &gt;   to be on while ext1 uses RTC Controller so doesnt need&gt; &gt;   peripherals to be powered on.&gt; &gt;   Note that using internal pullups&#x2F;pulldowns also requires&gt; &gt;   RTC peripherals to be turned on.&gt; &gt;   *&#x2F;&gt; &gt;   esp_sleep_enable_ext0_wakeup(GPIO_NUM_33,1); &#x2F;&#x2F;1 &#x3D; High, 0 &#x3D; Low&gt; &gt;   &gt; &gt;   &#x2F;&#x2F;If you were to use ext1, you would use it like&gt; &gt;   &#x2F;&#x2F;esp_sleep_enable_ext1_wakeup(BUTTON_PIN_BITMASK,ESP_EXT1_WAKEUP_ANY_HIGH);&gt; &gt;   &gt; &gt;   &#x2F;&#x2F;Go to sleep now&gt; &gt;   Serial.println(&quot;Going to sleep now&quot;);&gt; &gt;   esp_deep_sleep_start();&gt; &gt;   Serial.println(&quot;This will never be printed&quot;);&gt; &gt; &#125;&gt; &gt;   &gt; &gt; void loop()&#123;&gt; &gt;   &#x2F;&#x2F;This is not going to be called&gt; &gt; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在這個例子中，我們使用了在代碼開頭定義的變量 BUTTON_PIN_BITMASK：</p></blockquote><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#define   BUTTON\_PIN\_BITMASK   0x200000000 &#x2F;&#x2F; 2^33 in hex<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>按鈕連接到 GPIO 33。要獲取 GPIO 33 的十六進位碼：  </p><p>計算 2的33次方,應該得到 8589934592,將該數字 (8589934592) 轉換為十六進制。您可以轉到此轉換器來執行此操作。</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">esp_sleep_enable_ext0_wakeup(GPIO_NUM_33,1);   &#x2F;&#x2F;1 &#x3D; High, 0 &#x3D; Low<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>＃可以使用任何其他 RTC GPIO 引腳來代替 GPIO 33</p><div class="video-container"><iframe src="https://www.youtube.com/embed/twRIlLu60Y0" frameborder="0" loading="lazy" allowfullscreen></iframe></div><hr><h2 id="4-外部喚醒-ext1"><a href="#4-外部喚醒-ext1" class="headerlink" title="4.外部喚醒 (ext1)"></a>4.外部喚醒 (ext1)</h2><p>在這裡不使用esp_sleep_enable_ext0_wakeup()，而是使用</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">esp_sleep_enable_ext1_wakeup()&#96;&#96;&#96;c#&#x2F;*Deep Sleep with External Wake Up&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;This code displays how to use deep sleep withan external trigger as a wake up source and howto store data in RTC memory to use it over reboots  This code is under Public Domain License.  Hardware Connections&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Push Button to GPIO 33 pulled down with a 10K Ohmresistor  NOTE:&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Only RTC IO can be used as a source for external wakesource. They are pins: 0,2,4,12-15,25-27,32-39.  Author:Pranav Cherukupalli &lt;cherukupallip@gmail.com&gt;*&#x2F;#define BUTTON_PIN_BITMASK 0x8004 &#x2F;&#x2F; GPIOs 2 and 15RTC_DATA_ATTR int bootCount &#x3D; 0;&#x2F;*Method to print the reason by which ESP32has been awaken from sleep*&#x2F;void print_wakeup_reason()&#123;  esp_sleep_wakeup_cause_t wakeup_reason;  wakeup_reason &#x3D; esp_sleep_get_wakeup_cause();  switch(wakeup_reason)  &#123;    case ESP_SLEEP_WAKEUP_EXT0 : Serial.println(&quot;Wakeup caused by external signal using RTC_IO&quot;); break;    case ESP_SLEEP_WAKEUP_EXT1 : Serial.println(&quot;Wakeup caused by external signal using RTC_CNTL&quot;); break;    case ESP_SLEEP_WAKEUP_TIMER : Serial.println(&quot;Wakeup caused by timer&quot;); break;    case ESP_SLEEP_WAKEUP_TOUCHPAD : Serial.println(&quot;Wakeup caused by touchpad&quot;); break;    case ESP_SLEEP_WAKEUP_ULP : Serial.println(&quot;Wakeup caused by ULP program&quot;); break;    default : Serial.printf(&quot;Wakeup was not caused by deep sleep: %d\\n&quot;,wakeup_reason); break;  &#125;&#125;&#x2F;*Method to print the GPIO that triggered the wakeup*&#x2F;void print_GPIO_wake_up()&#123;  uint64_t GPIO_reason &#x3D; esp_sleep_get_ext1_wakeup_status();  Serial.print(&quot;GPIO that triggered the wake up: GPIO &quot;);  Serial.println((log(GPIO_reason))&#x2F;log(2), 0);&#125;void setup()&#123;  Serial.begin(115200);  delay(1000); &#x2F;&#x2F;Take some time to open up the Serial Monitor    &#x2F;&#x2F;Increment boot number and print it every reboot  ++bootCount;  Serial.println(&quot;Boot number: &quot; + String(bootCount));    &#x2F;&#x2F;Print the wakeup reason for ESP32  print_wakeup_reason();    &#x2F;&#x2F;Print the GPIO used to wake up  print\_GPIO\_wake_up();  &#x2F;*  First we configure the wake up source  We set our ESP32 to wake up for an external trigger.  There are two types for ESP32, ext0 and ext1 .  ext0 uses RTC_IO to wakeup thus requires RTC peripherals  to be on while ext1 uses RTC Controller so doesnt need  peripherals to be powered on.  Note that using internal pullups&#x2F;pulldowns also requires  RTC peripherals to be turned on.  *&#x2F;  &#x2F;&#x2F;esp_deep_sleep_enable_ext0_wakeup(GPIO\_NUM_15,1); &#x2F;&#x2F;1 &#x3D; High, 0 &#x3D; Low    &#x2F;&#x2F;If you were to use ext1, you would use it like  esp_sleep_enable_ext1_wakeup(BUTTON_PIN_BITMASK,ESP_EXT1_WAKEUP_ANY_HIGH);  &#x2F;&#x2F;Go to sleep now  Serial.println(&quot;Going to sleep now&quot;);  delay(1000);  esp_deep_sleep_start();  Serial.println(&quot;This will never be printed&quot;);&#125;  void loop()&#123;  &#x2F;&#x2F;This is not going to be called&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>0x8004怎麼來的?</strong></p><p>計算 2^2 + 2^15。你應該得到 32772</p><p>將該數字轉換為十六進制。你應該得到：8004</p><p>在這個例子中，我們使用了在代碼開頭定義的變量 BUTTON_PIN_BITMASK</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BUTTON_PIN_BITMASK</span>   <span class="token expression"><span class="token number">0x8004</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>當您使用多個引腳來喚醒 ESP32 時，知道是哪個引腳引起了喚醒是很有用的。為此，您可以使用以下功能：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">esp_sleep_get_ext1_wakeup_status()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>該函數返回一個基數2，與GPIO號碼作為指數：2 ^（GPIO_NUMBER）。因此，在小數得到GPIO，你需要做以下計算：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">GPIO &#x3D; log(GPIO_NUMBER)&#x2F;log(2)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>其它程式碼如同前面試驗</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/4527766207386106731#"><img src="https://i1.wp.com/randomnerdtutorials.com/wp-content/uploads/2019/02/external_wake_up_2buttons_bb.png?w=984&quality=100&strip=all&ssl=1"></a></p><p><strong>將程式碼上傳後可以看到按壓哪個GPIO會顯示在監測窗口</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/4527766207386106731#"><img src="https://1.bp.blogspot.com/-YanqfR__Opo/YNWKA45FOQI/AAAAAAAAeWE/pkp3y8n5qa8WHrloC2ZCECaWWHN5kTwuACNcBGAsYHQ/w674-h314/1.jpg"></a></p>]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deep sleep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DHT11/DHT12溫溼度傳感器實驗</title>
      <link href="/2021/08/29/DHT11-DHT12%E6%BA%AB%E6%BA%BC%E5%BA%A6%E5%82%B3%E6%84%9F%E5%99%A8%E5%AF%A6%E9%A9%97/"/>
      <url>/2021/08/29/DHT11-DHT12%E6%BA%AB%E6%BA%BC%E5%BA%A6%E5%82%B3%E6%84%9F%E5%99%A8%E5%AF%A6%E9%A9%97/</url>
      
        <content type="html"><![CDATA[<h1 id="DHT11-DHT12溫溼度傳感器實驗"><a href="#DHT11-DHT12溫溼度傳感器實驗" class="headerlink" title="DHT11/DHT12溫溼度傳感器實驗"></a>DHT11/DHT12溫溼度傳感器實驗</h1><h6 id="tags-esp32-dht11-dht12"><a href="#tags-esp32-dht11-dht12" class="headerlink" title="tags: esp32 dht11/dht12"></a>tags: <code>esp32</code> <code>dht11/dht12</code></h6><p> <strong>參考網址</strong>-[<a href="https://randomnerdtutorials.com/esp32-dht11-dht22-temperature-humidity-sensor-arduino-ide/]">https://randomnerdtutorials.com/esp32-dht11-dht22-temperature-humidity-sensor-arduino-ide/]</a>(<a href="https://draft.blo/">https://draft.blo</a> gger.com/blog/post/edit/3809681606094011522/8795709619283851665?hl=zh-TW#)</p><p><em>溫溼度傳感器在控制板學習裡是必備入門實作的課題</em></p><p><em>它包含DHT11/DHT12這兩種形式,這些傳感器包含一個</em></p><p><em>芯片，可以進行模擬到數字的轉換，並輸出帶有溫度和濕度</em></p><p><em>的數字信號。這使得它們很容易與任何微控制器一起使用。</em></p><p>_DHT11 和 DHT22 非常相似，但它們的規格不同。</p><hr><p>_DHT11 的範圍更小，精度也更低。但是，您可以每秒請求傳感器讀數。它也便宜一點。<br>_</p><p><em>DHT22傳感器具有更好的分辨率和更寬的溫濕度測量範圍。但是，它有點貴，並且您</em></p><p><em>只能以 2 秒的間隔請求讀數。</em></p><h2 id="接腳"><a href="#接腳" class="headerlink" title="接腳"></a>接腳</h2><p><em>DHT 傳感器有四個引腳，如下圖所示。但是，如果您將 DHT 傳感器安裝在分線板中，則它只有三個引腳，並且在引腳 2 上帶有一個內部上拉電阻。</em></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/8795709619283851665?hl=zh-TW#"><img src="https://i2.wp.com/randomnerdtutorials.com/wp-content/uploads/2019/04/dht22-pinout.png?resize=138,300&quality=100&strip=all&ssl=1"></a></p><p><em>下表顯示了 DHT22/DHT11 引腳排列。當傳感器面向您時，引腳編號從左到右從 1 開始</em></p><p>| DHT pin | Connect to |<br>| 1 | 3.3V |<br>| 2 | Any digital GPIO; also connect a 10k Ohm pull-up resistor |<br>| 3 | Don’t connect |<br>| 4 | GND |</p><h2 id="所須材料"><a href="#所須材料" class="headerlink" title="所須材料"></a>所須材料</h2><ul><li>  ESP32</li><li>  DHT11或DHT22溫濕度傳感器</li><li>  10k 歐姆電阻</li><li>  麵包板</li><li>  跳線</li></ul><hr><h2 id="接線圖"><a href="#接線圖" class="headerlink" title="接線圖"></a>接線圖</h2><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/8795709619283851665?hl=zh-TW#"><img src="https://i0.wp.com/randomnerdtutorials.com/wp-content/uploads/2019/04/dht_esp32_bb.png?w=714&quality=100&strip=all&ssl=1"></a></p><hr><p>下載所須的函式庫</p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/8795709619283851665?hl=zh-TW#">Adafruit_Sensor</a>  </p><p>匯入範例檔</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#include &lt;Adafruit_Sensor.h&gt;#include &lt;DHT.h&gt;#include &lt;DHT_U.h&gt;  #define DHTPIN 4     &#x2F;&#x2F; Digital pin connected to the DHT sensor &#x2F;&#x2F; Feather HUZZAH ESP8266 note: use pins 3, 4, 5, 12, 13 or 14 --&#x2F;&#x2F; Pin 15 can work but DHT must be disconnected during program upload.  &#x2F;&#x2F; Uncomment the type of sensor in use:#define DHTTYPE DHT11     &#x2F;&#x2F; DHT 11&#x2F;&#x2F;#define DHTTYPE    DHT22     &#x2F;&#x2F; DHT 22 (AM2302)&#x2F;&#x2F;#define DHTTYPE    DHT21     &#x2F;&#x2F; DHT 21 (AM2301)  &#x2F;&#x2F; See guide for details on sensor wiring and usage:&#x2F;&#x2F;   https:&#x2F;&#x2F;learn.adafruit.com&#x2F;dht&#x2F;overview  DHT_Unified dht(DHTPIN, DHTTYPE);  uint32_t delayMS;  void setup() &#123;  Serial.begin(115200);  &#x2F;&#x2F; Initialize device.  dht.begin();&#125;  void loop() &#123;  &#x2F;&#x2F; Delay between measurements.  delay(2000);  &#x2F;&#x2F; Get temperature event and print its value.  sensors\_event\_t event;  dht.temperature().getEvent(&amp;event);  if (isnan(event.temperature)) &#123;    Serial.println(F(&quot;Error reading temperature!&quot;));  &#125;  else &#123;    Serial.print(F(&quot;Temperature: &quot;));    Serial.print(event.temperature);    Serial.println(F(&quot;°C&quot;));  &#125;  &#x2F;&#x2F; Get humidity event and print its value.  dht.humidity().getEvent(&amp;event);  if (isnan(event.relative_humidity)) &#123;    Serial.println(F(&quot;Error reading humidity!&quot;));  &#125;  else &#123;    Serial.print(F(&quot;Humidity: &quot;));    Serial.print(event.relative_humidity);    Serial.println(F(&quot;%&quot;));  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/8795709619283851665?hl=zh-TW#"><img src="https://1.bp.blogspot.com/-5Zp3nVebHME/YOPu0xLelvI/AAAAAAAAeZY/hXFOvxMB5WYGya2btew2FDpecuWGw4oUQCNcBGAsYHQ/w510-h226/DHT-C.jpg"></a></p>]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dht11/dht12 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超音波&amp;0.96OLED-ESP32</title>
      <link href="/2021/08/29/%E8%B6%85%E9%9F%B3%E6%B3%A2-0-96OLED-ESP32/"/>
      <url>/2021/08/29/%E8%B6%85%E9%9F%B3%E6%B3%A2-0-96OLED-ESP32/</url>
      
        <content type="html"><![CDATA[<h1 id="超音波-amp-0-96OLED-ESP32"><a href="#超音波-amp-0-96OLED-ESP32" class="headerlink" title="超音波&amp;0.96OLED-ESP32"></a>超音波&amp;0.96OLED-ESP32</h1><h6 id="tags-esp32-HC-SR04-超音波模組"><a href="#tags-esp32-HC-SR04-超音波模組" class="headerlink" title="tags: esp32 HC-SR04 超音波模組"></a>tags: <code>esp32</code> <code>HC-SR04</code> <code>超音波模組</code></h6><p><strong>0.96OLED實作參考</strong>-<a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/4510305853656321015#">https://esp32-blairan.blogspot.com/2021/05/091oled-esp32.html</a></p><p><strong>超音波(Arduino)實作參考</strong>-<a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/4510305853656321015#">https://blairandreamwork.blogspot.com/2021/05/hc-sr04.html</a></p><p><strong>超音波和Arduino上的模組大同小義,不過我使用的模組比一般簡單多了,省去</strong></p><p><strong>計算,直接呼叫函式就能取得inc和cm。</strong></p><h2 id="接線"><a href="#接線" class="headerlink" title="接線"></a>接線</h2><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/4510305853656321015#"><img src="https://1.bp.blogspot.com/-vO1z_SK7Oh8/YOfhLRPWtII/AAAAAAAAeaw/vccMexvBlicqE1OUOSTG8UonqgV6fIe6wCNcBGAsYHQ/w698-h338/%25E4%25B8%258B%25E8%25BC%2589.jpg"></a></p><p>————————–      ———————     </p><p>//  * | HC-SC04 | ESP32  |     |  OLED | ESP32 |</p><p>//  * ———————     ———————     </p><p>//  * |   Vcc   |   3.3V  |     | Vcc | 3.3V |</p><p>//  * |   Trig  |   32    |     | Gnd | GND |</p><p>//  * |   Echo  |   33    |     | SCL | 21 |</p><p>//  * |   Gnd   |   GND   |     | SDA | 22 |</p><p>//  * --------------------- ———————-</p><hr><h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#include &lt;Ultrasonic.h&gt;#include &lt;Adafruit_SSD1306.h&gt;#include &lt;Adafruit_GFX.h&gt;#include &lt;Adafruit_GrayOLED.h&gt;#include &lt;Wire.h&gt;Ultrasonic ultrasonic1(32, 33); &#x2F;&#x2F;ultrasonic(trig, echo)#define SCREEN_WIDTH 128#define SCREEN_HEIGHT 64#define OLED_RESET -1Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &amp;Wire, OLED_RESET);void setup()&#123;    Serial.begin(115200);    display.begin(SSD1306_SWITCHCAPVCC, 0x3C, OLED_RESET);&#125;void loop()&#123;    unsigned int distance&#x3D;ultrasonic1.read(CM);    Serial.print(distance); Serial.println(&quot; CM&quot;);    display.clearDisplay();    display.setTextSize(3);    display.setTextColor(WHITE);    display.setCursor(0, 20);    display.print(distance);    display.setTextSize(2);    display.setCursor(60, 40);    display.println(&quot;CM&quot;);    display.display();    delay(500);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><em>這個模組是呼吸超音波用的</em></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Ultrasonic.h></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><em>這些是OLED使用的模組</em></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Adafruit_SSD1306.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Adafruit_GFX.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Adafruit_GrayOLED.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Wire.h></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><em>設制超音波腳位</em></strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Ultrasonic ultrasonic1(32, 33); &#x2F;&#x2F;ultrasonic(trig, echo)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><em>定義oled所須參數</em></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SCREEN_WIDTH</span> <span class="token expression"><span class="token number">128</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SCREEN_HEIGHT</span> <span class="token expression"><span class="token number">64</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">OLED_RESET</span> <span class="token expression"><span class="token operator">-</span><span class="token number">1</span></span></span>Adafruit_SSD1306 <span class="token function">display</span><span class="token punctuation">(</span>SCREEN_WIDTH<span class="token punctuation">,</span> SCREEN_HEIGHT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Wire<span class="token punctuation">,</span> OLED_RESET<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em><strong>初始化</strong></em></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">void setup()&#123;    Serial.begin(115200);    display.begin(SSD1306_SWITCHCAPVCC, 0x3C, OLED_RESET);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>void loop(){}裡面</p><p><em><strong>讀取超音波數質並賦予變數</strong></em></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">unsigned int distance&#x3D;ultrasonic1.read(CM);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>其中</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">setTextSize(3),setTextColor(WHITE),setCursor(0, 20),display.display()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><em><strong>一定要有,要不然不會顯示於OLED上</strong></em></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">display.clearDisplay();    display.setTextSize(3);    display.setTextColor(WHITE);    display.setCursor(0, 20);    display.print(distance);    display.setTextSize(2);    display.setCursor(60, 40);    display.println(&quot;CM&quot;);    display.display();    delay(500);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="video-container"><iframe src="https://www.youtube.com/embed/HDNld7TiiFQ" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HC-SC04 </tag>
            
            <tag> 超音波模組 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DHT11/12網路監測-ESP32</title>
      <link href="/2021/08/29/DHT11-12%E7%B6%B2%E8%B7%AF%E7%9B%A3%E6%B8%AC-ESP32/"/>
      <url>/2021/08/29/DHT11-12%E7%B6%B2%E8%B7%AF%E7%9B%A3%E6%B8%AC-ESP32/</url>
      
        <content type="html"><![CDATA[<head>  <meta charset="utf-8" />  <meta name="viewport" content="width=device-width, initial-scale=1.0" />  <style>    h1  {text-align: center; background-color: orange; margin-right:5px;}    dl { width: 320px; margin: 12px auto; }    dt {       font-size: 20pt; color: #444; background-color: #ddd;      margin: 6pt 0; padding: 6pt 12pt;    }    dd {      text-align: right; padding-right: 6pt;    }    .num { font-size: 36pt; color: dodgerblue; }  </style>  </head><body>  <p><h1>ESP32 溫溼度顯示計</h1></p>  <dl>    <dt>溫度</dt>    <dd class=num>%TEMP% °C</dd>    <dt>濕度</dt>    <dd class=num>%HUMI% %</dd>  </dl></body></html><p>)===”;</p><hr><p><strong><em>其中有兩個函式一個是readTemp()和readHumi()是讀取溫度和濕度</em></strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">String readTemp()&#123;  dht.temperature().getEvent(&amp;event);  if (isnan(event.temperature)) &#123;    Serial.println(F(&quot;Error reading temperature!&quot;));    return &quot;--&quot;;  &#125;  else &#123;    Serial.print(F(&quot;Temperature: &quot;));    Serial.print(float(event.temperature));    Serial.println(F(&quot;°C&quot;));    return String(float(event.temperature));  &#125;&#125;String readHumi()&#123;  dht.humidity().getEvent(&amp;event);  if (isnan(event.relative_humidity)) &#123;    Serial.println(F(&quot;Error reading humidity!&quot;));    return &quot;--&quot;;  &#125;  else &#123;    Serial.print(F(&quot;Humidity: &quot;));    Serial.print(float(event.relative_humidity));    Serial.println(F(&quot;%&quot;));    return String(float(event.relative_humidity));  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><em>這個函式意指如果讀到網頁請求的字串是TEMP就回傳readTemp()裡的溫度數值以字串回傳</em></strong></p><p><strong><em>如果網頁請求的字串是HUMI就回傳readHumi()裡的濕度數值並以字串回傳</em></strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">String tmplProcessor(const String &amp; var)&#123;  if (var &#x3D;&#x3D; &quot;TEMP&quot;)&#123;    return readTemp();  &#125;else if (var &#x3D;&#x3D; &quot;HUMI&quot;)&#123;    return readHumi();  &#125;  return String();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><em>在void stup(){ }裡</em></strong></p><p><strong><em>先把esp32連到基地台的設制寫好</em></strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Serial.begin(115200);dht.begin();WiFi.begin(ssid, password); Serial.print(&quot;基地台名稱: &quot;); Serial.println(ssid);while (WiFi.status() !&#x3D; WL_CONNECTED)&#123;   delay(1000);   Serial.println(&quot;.&quot;);&#125;Serial.print(&quot;IP: &quot;); Serial.println(WiFi.localIP());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><em>剩下就是伺服器的回應方式</em></strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">server.on(&quot;&#x2F;&quot;, HTTP_GET, [](AsyncWebServerRequest *request)&#123;    request-&gt;send_P(200, &quot;text&#x2F;html&quot;, indexHtml, tmplProcessor);&#125;);server.on(&quot;&#x2F;TEMP&quot;, HTTP_GET, [](AsyncWebServerRequest *request)&#123;    request-&gt;send_P(200, &quot;text&#x2F;plain&quot;, readTemp().c_str());  &#125;);server.on(&quot;&#x2F;HUMI&quot;, HTTP_GET, [](AsyncWebServerRequest *request)&#123;    request-&gt;send_P(200, &quot;text&#x2F;plain&quot;, readHumi().c_str());  &#125;);server.begin();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong><em>程式碼上傳後可以看在顯示的ip打開瀏覽器就會呈現如下:</em></strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/7172775240521960034?hl=zh-TW#"><img src="https://lh3.googleusercontent.com/-qC9CxO4i-Xc/YOZFdnar8PI/AAAAAAAAeaI/R8u1hTYwETYdszDZYvxurjlFGHujuNH6QCNcBGAsYHQ/s1600/1625703786581523-0.png"></a></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/7172775240521960034?hl=zh-TW#"><img src="https://1.bp.blogspot.com/-oOSgkfavhws/YOWz-Awpe-I/AAAAAAAAeZk/izEsvNIimRAk01_oxk-CKIQGdiK3c57YQCNcBGAsYHQ/w638-h349/1.jpg"></a></p>]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webserver </tag>
            
            <tag> dht11/dht12 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BMP280氣壓,溫度模組-ESP32</title>
      <link href="/2021/08/29/BMP280%E6%B0%A3%E5%A3%93-%E6%BA%AB%E5%BA%A6%E6%A8%A1%E7%B5%84-ESP32/"/>
      <url>/2021/08/29/BMP280%E6%B0%A3%E5%A3%93-%E6%BA%AB%E5%BA%A6%E6%A8%A1%E7%B5%84-ESP32/</url>
      
        <content type="html"><![CDATA[<h1 id="BMP280氣壓-溫度模組-ESP32"><a href="#BMP280氣壓-溫度模組-ESP32" class="headerlink" title="BMP280氣壓,溫度模組-ESP32"></a>BMP280氣壓,溫度模組-ESP32</h1><h6 id="tags-esp32-bmp280"><a href="#tags-esp32-bmp280" class="headerlink" title="tags: esp32 bmp280"></a>tags: <code>esp32</code> <code>bmp280</code></h6><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2010016947036646160#"><img src="https://1.bp.blogspot.com/-4LdM2J8lnOY/YPV1dYnda-I/AAAAAAAAecQ/OXHYgyYLfkgCzpZzyPV9wC_xhR4CiLv2ACNcBGAsYHQ/s320/21805656779815_796.jpg"></a></p><p>**_BMP280,該傳感器可以非常準確地測量氣壓和溫度。  </p><p>您可以使用 I2C 或 SPI 連接協議將其與您的 Arduino 板連接。它有一個 3.3V 穩壓器和電平轉換，因此您可以毫無問題地將它與 3V 或 5V 邏輯微控制器一起使用。_**</p><hr><h2 id="接線"><a href="#接線" class="headerlink" title="接線"></a>接線</h2><p>*<strong>網路上很多教學都沒有說SDO要接VCC,因為我一開始是</strong></p><p><strong>沒有接,發現一直顯示找不到Addr,後來查一下國外有人說</strong></p><p><strong>接上去才會找的到位址。</strong></p><p>| BME280       | ESP32 |</p><p>| <strong>SDO–&gt;VCC</strong>|<br> |<br>| <strong>VCC</strong>———-| 3.3V |<br>| <strong>GND</strong>———| GND |<br>| <strong>SCL</strong>———-| GPIO 22 |<br>| <strong>SDA</strong>———| GPIO 21 |</p><p>There are other versions of this sensor that can use either SPI or I2C communication protocols, like the module shown in the next figure:</p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2010016947036646160#"><img src="https://1.bp.blogspot.com/-_kyGe2Iyy2E/YPV2DIT7ndI/AAAAAAAAecY/FaJYnuihXPEGxJyZgeP-KK2B7mx4DkzEgCNcBGAsYHQ/w653-h310/1.jpg"></a></p><hr><h2 id="下載函式庫"><a href="#下載函式庫" class="headerlink" title="下載函式庫"></a>下載函式庫</h2><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2010016947036646160#">Adafruit_BME280_Library</a>  </p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2010016947036646160#">Adafruit_Sensor</a>  </p><p>將上面兩個檔解壓後,整個資料夾放入Arduino的library裡</p><hr><p>打開Arduino IDE–&gt;<strong><em>檔案</em></strong> &gt; <strong><em>範例</em></strong>&gt; <em>Adafruit BME280 library</em> &gt; <em>bme280 test</em></p><p>將此程式碼上傳</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#include &lt;Wire.h&gt;#include &lt;SPI.h&gt;#include &lt;Adafruit_BMP280.h&gt;#define BMP_SCK  (13)#define BMP_MISO (12)#define BMP_MOSI (11)#define BMP_CS   (10)Adafruit_BMP280 bmp; &#x2F;&#x2F; I2C&#x2F;&#x2F;Adafruit_BMP280 bmp(BMP_CS); &#x2F;&#x2F; hardware SPI&#x2F;&#x2F;Adafruit_BMP280 bmp(BMP_CS, BMP_MOSI, BMP_MISO,  BMP_SCK);void setup() &#123; Serial.begin(9600); Serial.println(F(&quot;BMP280 test&quot;));  &#x2F;&#x2F;if (!bmp.begin(BMP280_ADDRESS_ALT, BMP280_CHIPID)) &#123; if (!bmp.begin()) &#123;    Serial.println(F(&quot;Could not find a valid BMP280 sensor, check wiring or &quot;    &quot;try a different address!&quot;)); while (1) delay(10);  &#125;    &#x2F;* Default settings from datasheet. *&#x2F; bmp.setSampling(Adafruit_BMP280::MODE_NORMAL,     &#x2F;* Operating Mode. *&#x2F; Adafruit_BMP280::SAMPLING_X2,     &#x2F;* Temp. oversampling *&#x2F; Adafruit_BMP280::SAMPLING_X16,    &#x2F;* Pressure oversampling *&#x2F; Adafruit_BMP280::FILTER_X16,      &#x2F;* Filtering. *&#x2F; Adafruit_BMP280::STANDBY_MS_500); &#x2F;* Standby time. *&#x2F;&#125;  void loop() &#123; Serial.print(F(&quot;Temperature &#x3D; &quot;)); Serial.print(bmp.readTemperature()); Serial.println(&quot; *C&quot;); Serial.print(F(&quot;Pressure &#x3D; &quot;)); Serial.print(bmp.readPressure()); Serial.println(&quot; Pa&quot;); Serial.print(F(&quot;Approx altitude &#x3D; &quot;)); Serial.print(bmp.readAltitude(1013.25)); &#x2F;* Adjusted to local forecast! *&#x2F; Serial.println(&quot; m&quot;); Serial.println(); delay(2000);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2010016947036646160#"><img src="https://1.bp.blogspot.com/-uuCjmn1O69U/YPYNTBw5lXI/AAAAAAAAecg/PdiElAnsgXY-m87_nbhB_nYmHrFE8svHQCNcBGAsYHQ/w488-h261/bmp280-val.jpg"></a></p>]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bmp280 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BMP280+ThingSpeak IoT</title>
      <link href="/2021/08/29/BMP280-ThingSpeak-IoT/"/>
      <url>/2021/08/29/BMP280-ThingSpeak-IoT/</url>
      
        <content type="html"><![CDATA[<h1 id="BMP280-ThingSpeak-IoT"><a href="#BMP280-ThingSpeak-IoT" class="headerlink" title="BMP280+ThingSpeak IoT"></a>BMP280+ThingSpeak IoT</h1><h6 id="tags-esp32-thingspeak-bmp280"><a href="#tags-esp32-thingspeak-bmp280" class="headerlink" title="tags: esp32 thingspeak bmp280"></a>tags: <code>esp32</code> <code>thingspeak</code> <code>bmp280</code></h6><p><em>ESP32真的是個方便又神奇的版子，3個月前我還在猶豫要不要跨足</em></p><p><em>研究ESP32，帶著一份不安的心，買了一些書開始學，至今約三個月</em></p><p><em>，覺得之前有玩Arduino因為語言相通，省去了一些時間，只是比較</em></p><p><em>略顯不足的是esp32沒有5V倒是有點可惜，另外我覺得優勢是內建WIFI</em></p><p><em>和藍芽，不用又外接，並且也支援mpython，這讓我無形中不會因為只</em></p><p><em>玩esp32用了C語言，而忘了Python。</em></p><hr><p>今天呢就心血來潮想玩一下云端數據圖形化，之前看了很多網上大神們</p><p>都有提及ThingSpeak這個和感測器結合一起用，昨天剛研究了BMP280剛好</p><p>可以派上用場。</p><p>筆記連結—<a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/849309138521769078#">BMP280氣壓,溫度模組-ESP32</a></p><p><em><strong>這裡就直接接結合WIFI和ThingSpeak IoT的使用</strong></em></p><h2 id="如何申請ThingSpeak"><a href="#如何申請ThingSpeak" class="headerlink" title="如何申請ThingSpeak"></a>如何申請ThingSpeak</h2><p><strong><em>如何申請</em></strong><em><strong>ThingSpeak IoT帳號-<a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/849309138521769078#">http://web.htjh.tp.edu.tw/B4/106iot/ThingSpeak%E7%89%A9%E8%81%AF%E7%B6%B2%E5%B9%B3%E5%8F%B0.pdf</a></strong></em></p><p>_</p><hr><p>_<strong>以下因節省時間，引用別的作者的文章，出處</strong>—<a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/849309138521769078#">https://randomnerdtutorials.com/esp32-thingspeak-publish-arduino/</a></p><p>**轉到 ThingSpeak，然後單擊“免費入門”按鈕創建一個新帳戶。此帳戶與 Mathworks 帳戶相關聯。因此，如果您已有 Mathworks 帳戶，則應使用該帳戶登錄。  </p><p>創建新頻道<br>帳戶準備好後，登錄，打開“頻道”標籤並選擇“我的頻道”。**</p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/849309138521769078#"><img src="https://lh3.googleusercontent.com/-XzTxSCPscZ0/YPa4xM-M8vI/AAAAAAAAedA/zy3dDY4cQDMSnSWEP6fOfBxrGtOgNea6wCNcBGAsYHQ/w437-h257/image.png"></a></p><p><strong>按“新頻道”按鈕創建一個新頻道。</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/849309138521769078#"><img src="https://lh3.googleusercontent.com/-MJJR2oVyJQk/YPa45d0cVHI/AAAAAAAAedE/b4Qqx0Wvn7M8szBtL9iXxVv7XkY3g8KHACNcBGAsYHQ/w481-h346/image.png"></a></p><p><strong>為您的頻道輸入名稱並添加說明。</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/849309138521769078#"><img src="https://lh3.googleusercontent.com/-7eVycTiCOuQ/YPa5Gv1-SJI/AAAAAAAAedM/Q1KRU-Rqu98pbo5kkSlP8yvRTnR_zCxoACNcBGAsYHQ/w481-h325/image.png"></a></p><p><strong>可以自定義圖表，轉到您的私人視圖選項卡，然後單擊編輯圖標。</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/849309138521769078#"><img src="https://lh3.googleusercontent.com/-zJ909rDk0Lg/YPa5P7g5aiI/AAAAAAAAedU/g8BMvBNOgYIjFTkI6SE7I8gDnFP1Qs6YQCNcBGAsYHQ/w472-h474/image.png"></a></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/849309138521769078#"><img src="https://lh3.googleusercontent.com/-dT4teOJYE3I/YPa5XbOTmTI/AAAAAAAAedc/qFrNXBkcyLI_MEbT0y6lPsUrzW2qwS7cwCNcBGAsYHQ/w574-h477/image.png"></a></p><p><strong>完成後，按“保存”按鈕。</strong></p><p><strong>要將值從 ESP32 發送到 ThingSpeak，您需要寫入 API 密鑰。打開“API 密鑰”<br>選項卡並將寫入 API 密鑰複製到一個安全的地方，因為您稍後會需要它。</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/849309138521769078#"><img src="https://lh3.googleusercontent.com/-35r-wuz8QZA/YPa5nUmuVSI/AAAAAAAAedo/UXDaOoHybCMW0cC2Si6Mj7d_uKNcDv1VACNcBGAsYHQ/w729-h351/image.png"></a></p><hr><p>安裝 ThingSpeak 庫<br>要將傳感器讀數發送到 ThingSpeak，我們將使用 thingspeak-arduino 庫。您可以通過 Arduino 庫管理器安裝此庫。轉到 Sketch Include Library Manage Libraries… 並在 Library Manager 中搜索“ThingSpeak”。安裝 MathWorks 的 ThingSpeak 庫。</p><hr><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/849309138521769078#"><img src="https://lh3.googleusercontent.com/-x91vImHJl_g/YPa9gniW-2I/AAAAAAAAedw/ta8IapxF41MfqYbYSXUOIlN3IY8f_pQUQCNcBGAsYHQ/w627-h353/image.png"></a></p><h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#include &lt;WiFi.h&gt;#include &lt;Wire.h&gt;#include &lt;SPI.h&gt;#include &lt;Adafruit_BMP280.h&gt;#include &lt;ThingSpeak.h&gt;const char* ssid&#x3D;&quot;---&quot;;const char* password&#x3D;&quot;-----&quot;;const char* APIKey&#x3D;&quot;X0V369ZQ4VM9YGA8&quot;;WiFiClient client;Adafruit_BMP280 bmp; &#x2F;&#x2F; I2Cunsigned long lastTime&#x3D;0;unsigned long currenTime&#x3D;millis();void setup() &#123;  Serial.begin(115200);  if (!bmp.begin()) &#123;    Serial.println(F(&quot;Could not find a valid BMP280 sensor, check wiring or &quot;                      &quot;try a different address!&quot;));    while (1) delay(10);  &#125;  WiFi.mode(WIFI_STA);  ThingSpeak.begin(client);  WiFi.begin(ssid, password);  while (WiFi.status() !&#x3D; WL_CONNECTED)&#123;    Serial.print(&quot;.&quot;);  &#125;  Serial.println(&quot;Connected successful!&quot;);&#125;void loop() &#123;  float temp&#x3D;bmp.readTemperature();  int x&#x3D;ThingSpeak.writeField(1, 1, temp, APIKey);  if (x&#x3D;&#x3D;200)&#123;    Serial.println(&quot;request successful!&quot;);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p><strong>匯入所須的模組</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#include &lt;WiFi.h&gt;#include &lt;Wire.h&gt;#include &lt;SPI.h&gt;#include &lt;Adafruit_BMP280.h&gt;#include &lt;ThingSpeak.h&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>WIFI和API的KEY</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">const char* ssid&#x3D;&quot;基地台名稱&quot;;const char* password&#x3D;&quot;基地台密碼&quot;;const char* APIKey&#x3D;&quot;X0V36---------&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>WIFI的客戶端</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">WiFiClient client;&#96;**BMP280指定對象**Adafruit_BMP280 bmp; &#x2F;&#x2F; I2C&#96;**BMP280初始化**&#96;&#96;&#96;c#if (!bmp.begin()) &#123;    Serial.println(F(&quot;Could not find a valid BMP280 sensor, check wiring or &quot;                      &quot;try a different address!&quot;));    while (1) delay(10);  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>WIFI連線設定與設定成STA模式</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">WiFi.mode(WIFI_STA);WiFi.begin(ssid, password);  while (WiFi.status() !&#x3D; WL_CONNECTED)&#123;    Serial.print(&quot;.&quot;);  &#125;  Serial.println(&quot;Connected successful!&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ThingSpeak初始化</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">ThingSpeak.begin(client);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>loop()裡面</strong></p><p><strong>讀取溫度和上傳數至到ThingSpeak</strong></p><p><strong>如果成功發布讀數，此函數將返回代碼 200。</strong><br><strong>// 寫入 ThingSpeak。一個通道最多有 8 個字段，最多可以存儲 8 個不同的字段。<br>// 通道中的信息片段。在這裡，我們寫入字段 1。</strong></p><p><strong>//ThingSpeak.writeField(1, 1, temp, APIKey)第一個1代表頻道,第二個1代表字段</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">float temp&#x3D;bmp.readTemperature();  int x&#x3D;ThingSpeak.writeField(1, 1, temp, APIKey);  if (x&#x3D;&#x3D;200)&#123;    Serial.println(&quot;request successful!&quot;);  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/849309138521769078#"><img src="https://1.bp.blogspot.com/-I1rIMHBqD9I/YPbEIweD_4I/AAAAAAAAed4/g288Q1gyvFwLWDSlOo4WzL_wFCcgqypmgCNcBGAsYHQ/w687-h303/BMP280TEMP.jpg"></a></p>]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bmp280 </tag>
            
            <tag> ThingSpeak </tag>
            
            <tag> IOT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS1306實時時鐘模組-ESP32</title>
      <link href="/2021/08/29/DS1306%E5%AF%A6%E6%99%82%E6%99%82%E9%90%98%E6%A8%A1%E7%B5%84-ESP32/"/>
      <url>/2021/08/29/DS1306%E5%AF%A6%E6%99%82%E6%99%82%E9%90%98%E6%A8%A1%E7%B5%84-ESP32/</url>
      
        <content type="html"><![CDATA[<h2 id="DS1306實時時鐘模組-ESP32"><a href="#DS1306實時時鐘模組-ESP32" class="headerlink" title="DS1306實時時鐘模組-ESP32"></a>DS1306實時時鐘模組-ESP32</h2><h6 id="tags-esp32-ds1302"><a href="#tags-esp32-ds1302" class="headerlink" title="tags: esp32 ds1302"></a>tags: <code>esp32</code> <code>ds1302</code></h6><p>這是廣華電子上的介紹<br>◎ 時鐘具有能計算2100 年之前的秒、分、時、日、星期、月、年的能力，還有閏年調整的能力<br>◎ 31 8 位暫存數據存儲RAM<br>◎ 串行 I/O 口方式使得管腳數量最少<br>◎ 寬範圍工作電壓2.0 5.5V<br>◎ 工作電流 2.0V 時,小於300nA<br>◎ 讀 / 寫時鐘或RAM 數據時有兩種傳送方式單字節傳送和多字節傳送字符組方式<br>◎ 8 腳DIP 封裝或可選的8 腳SOIC 封裝根據表面裝配<br>◎ 簡單 3 線接口<br>◎ 與 TTL 相容Vcc=5V<br>◎ 雙電源管用於主電源和備份電源供應<br>◎ 電池：CR2032 電壓3V，電流260mAh<br>◎ 晶振32.768KHz，匹配電容為6pF<br>◎ DS1302為8腳直插大晶片，晶片下面有IC座，方便更換及插拔片<br>6.模塊工作電壓兼容3.3V/5V，可與5V及3.3V單片機連接<br>◎帶4個定位孔，直徑3.1mm<br>◎工作溫度：0°～70°</p><p>◎ 安裝注意!<br>1.VCC與GND千萬不要接反，以免燒壞晶片<br>2.51系列單晶片P0接腳需要連接上拉電阻，如果單晶片沒有連接上拉電阻，可以將數據線接到其他接腳</p><p>步驟1:<br>在Arduino IDE下載程式庫DS1302，並選好版型，COM和波特率</p><p>接線</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">&#x2F;&#x2F; DS1302 CLK&#x2F;SCLK --&gt; 5&#x2F;&#x2F; DS1302 DAT&#x2F;IO --&gt; 4&#x2F;&#x2F; DS1302 RST&#x2F;CE --&gt; 2&#x2F;&#x2F; DS1302 VCC --&gt; 3.3v - 5v&#x2F;&#x2F; DS1302 GND --&gt; GND<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程式碼</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#include &lt;ThreeWire.h&gt;  #include &lt;RtcDS1302.h&gt; ThreeWire myWire(4,5,2); &#x2F;&#x2F; IO, SCLK, CE  &#x2F;&#x2F;对应接到ESP32的IO号RtcDS1302&lt;ThreeWire&gt; Rtc(myWire); void setup () &#123;    Serial.begin(57600);    Serial.print(&quot;compiled: &quot;);    Serial.print(__DATE__); &#x2F;&#x2F;打印系统日期    Serial.println(__TIME__); &#x2F;&#x2F;打印系统时间    Rtc.Begin();  &#x2F;&#x2F;用管脚声明来初始化RTC     RtcDateTime compiled &#x3D; RtcDateTime(__DATE__, __TIME__); &#x2F;&#x2F;将系统时间声明一个时间结构    printDateTime(compiled);  &#x2F;&#x2F;打印时间    Serial.println();     if (!Rtc.IsDateTimeValid())   &#x2F;&#x2F;读RTC时间，如果没读到，就是电池没电了    &#123;        &#x2F;&#x2F; Common Causes:        &#x2F;&#x2F;    1) first time you ran and the device wasn&#39;t running yet        &#x2F;&#x2F;    2) the battery on the device is low or even missing         Serial.println(&quot;RTC lost confidence in the DateTime!&quot;);        Rtc.SetDateTime(compiled);    &#x2F;&#x2F;设置系统时间为当前时间    &#125;     if (Rtc.GetIsWriteProtected())    &#x2F;&#x2F;检查是不是写保护了    &#123;        Serial.println(&quot;RTC was write protected, enabling writing now&quot;);        Rtc.SetIsWriteProtected(false);    &#125;     if (!Rtc.GetIsRunning())  &#x2F;&#x2F;检查是不是可读    &#123;        Serial.println(&quot;RTC was not actively running, starting now&quot;);        Rtc.SetIsRunning(true);    &#125;     RtcDateTime now &#x3D; Rtc.GetDateTime();  &#x2F;&#x2F;得到RTC的时间    if (now &lt; compiled) &#x2F;&#x2F;如果读出的时间早于系统时间，则重新设置RTC时间    &#123;        Serial.println(&quot;RTC is older than compile time!  (Updating DateTime)&quot;);        Rtc.SetDateTime(compiled);    &#125;    else if (now &gt; compiled) &#x2F;&#x2F;如果读出的时间晚于系统时间，则重新设置RTC时间    &#123;        Serial.println(&quot;RTC is newer than compile time. (this is expected)&quot;);    &#125;    else if (now &#x3D;&#x3D; compiled)     &#123;        Serial.println(&quot;RTC is the same as compile time! (not expected but all is fine)&quot;);    &#125;&#125; void loop () &#123;    RtcDateTime now &#x3D; Rtc.GetDateTime();    &#x2F;&#x2F;核心函数，读当前RTC时间    printDateTime(now);    Serial.println();    if (!now.IsValid())&#123;        &#x2F;&#x2F; Common Causes:        &#x2F;&#x2F;    1) the battery on the device is low or even missing and the power line was disconnected        Serial.println(&quot;RTC lost confidence in the DateTime!&quot;);    &#125;    delay(10000); &#x2F;&#x2F; ten seconds    &#x2F;&#x2F;延时10s&#125; #define countof(a) (sizeof(a) &#x2F; sizeof(a[0]))void printDateTime(const RtcDateTime&amp; dt)   &#x2F;&#x2F;一个通过串口格式化打印日期和时间的函数&#123;    char datestring[20];     snprintf_P(datestring,                &#x2F;&#x2F;avr的一个打印格式化函数            countof(datestring),            PSTR(&quot;%04u&#x2F;%02u&#x2F;%02u %02u:%02u:%02u&quot;),    &#x2F;&#x2F;和print类似，指定长度            dt.Year(),            dt.Month(),            dt.Day(),            dt.Hour(),            dt.Minute(),            dt.Second() );    Serial.print(datestring);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DS1306實時時鐘模組+0.96OLED<br>提示:先下載這些程式庫</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#include &lt;Adafruit_SSD1306.h&gt;#include &lt;Adafruit_GFX.h&gt;#include &lt;Adafruit_GrayOLED.h&gt;#include &lt;Wire.h&gt;#include &lt;ThreeWire.h&gt;  #include &lt;RtcDS1302.h&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ds1302在範例裡面有</p><p>// CONNECTIONS:<br>// DS1302 CLK/SCLK –&gt; 5<br>// DS1302 DAT/IO –&gt; 4<br>// DS1302 RST/CE –&gt; 2<br>// DS1302 VCC –&gt; 3.3v - 5v<br>// DS1302 GND –&gt; GND</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#include &lt;SPI.h&gt;#include &lt;Adafruit_SSD1306.h&gt;#include &lt;Adafruit_GFX.h&gt;#include &lt;Adafruit_GrayOLED.h&gt;#include &lt;Wire.h&gt;#include &lt;ThreeWire.h&gt;  #include &lt;RtcDS1302.h&gt;ThreeWire myWire(4,5,2); &#x2F;&#x2F; IO, SCLK, CERtcDS1302&lt;ThreeWire&gt; Rtc(myWire);#define SCREEN_WIDTH 128#define SCREEN_HEIGHT 64#define OLED_RESET -1Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &amp;Wire, OLED_RESET);void setup () &#123;    Serial.begin(115200);    display.begin(SSD1306_SWITCHCAPVCC, 0x3C, OLED_RESET);    Serial.print(&quot;compiled: &quot;);    Serial.print(__DATE__);    Serial.println(__TIME__);    Rtc.Begin();    RtcDateTime compiled &#x3D; RtcDateTime(__DATE__, __TIME__);    printDateTime(compiled);    Serial.println();    if (!Rtc.IsDateTimeValid())     &#123;        &#x2F;&#x2F; Common Causes:        &#x2F;&#x2F;    1) first time you ran and the device wasn&#39;t running yet        &#x2F;&#x2F;    2) the battery on the device is low or even missing        Serial.println(&quot;RTC lost confidence in the DateTime!&quot;);        Rtc.SetDateTime(compiled);    &#125;    if (Rtc.GetIsWriteProtected())    &#123;        Serial.println(&quot;RTC was write protected, enabling writing now&quot;);        Rtc.SetIsWriteProtected(false);    &#125;    if (!Rtc.GetIsRunning())    &#123;        Serial.println(&quot;RTC was not actively running, starting now&quot;);        Rtc.SetIsRunning(true);    &#125;    RtcDateTime now &#x3D; Rtc.GetDateTime();    if (now &lt; compiled)     &#123;        Serial.println(&quot;RTC is older than compile time!  (Updating DateTime)&quot;);        Rtc.SetDateTime(compiled);    &#125;    else if (now &gt; compiled)     &#123;        Serial.println(&quot;RTC is newer than compile time. (this is expected)&quot;);    &#125;    else if (now &#x3D;&#x3D; compiled)     &#123;        Serial.println(&quot;RTC is the same as compile time! (not expected but all is fine)&quot;);    &#125;&#125;void loop () &#123;    RtcDateTime now &#x3D; Rtc.GetDateTime();    printDateTime(now);    Serial.println();    if (!now.IsValid())    &#123;        &#x2F;&#x2F; Common Causes:        &#x2F;&#x2F;    1) the battery on the device is low or even missing and the power line was disconnected        Serial.println(&quot;RTC lost confidence in the DateTime!&quot;);    &#125;    display.clearDisplay();    display.setTextSize(2);    display.setTextColor(WHITE);    display.setCursor(0, 0);    display.print(now.Year()); display.print(&quot;&#x2F;&quot;); display.print(now.Month()); display.print(&quot;&#x2F;&quot;); display.println(now.Day());    display.setCursor(0, 20);    display.setTextSize(2);    display.setTextColor(WHITE);    display.print(now.Hour()); display.print(&quot;:&quot;); display.print(now.Minute()); display.print(&quot;:&quot;); display.println(now.Second());    display.display();    delay(1000); &#x2F;&#x2F; ten seconds&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="video-container"><iframe src="https://www.youtube.com/embed/8HeV3ZOpPSI" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DS1306 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搖桿模組-ESP32</title>
      <link href="/2021/08/29/%E6%90%96%E6%A1%BF%E6%A8%A1%E7%B5%84-ESP32/"/>
      <url>/2021/08/29/%E6%90%96%E6%A1%BF%E6%A8%A1%E7%B5%84-ESP32/</url>
      
        <content type="html"><![CDATA[<h1 id="搖桿模組-ESP32"><a href="#搖桿模組-ESP32" class="headerlink" title="搖桿模組-ESP32"></a>搖桿模組-ESP32</h1><h6 id="tags-esp32-搖桿"><a href="#tags-esp32-搖桿" class="headerlink" title="tags: esp32 搖桿"></a>tags: <code>esp32</code> <code>搖桿</code></h6><hr><h2 id="搖桿模組"><a href="#搖桿模組" class="headerlink" title="搖桿模組"></a>搖桿模組</h2><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2467346807906815384#"><img src="https://1.bp.blogspot.com/-liS9OQ7lsPg/YIkRkqPRvrI/AAAAAAAAeGQ/AzkfR9Z0sy4i-gdxKveKbMqg4GFCYR4igCNcBGAsYHQ/w186-h331/20210428_152206.jpg"></a></p><h3 id="搖桿模組大都用於機械手臂或控制有伺服馬達的地方，它有２組軸（X和Y）和一個按鍵-，ESP32和Arduino上是使用類比訊號測量，不過在ESP32上只有3-3V所以類比訊號會到4059-必須轉換到1023，後來才發現ESP32有幾個內鍵轉換的函式不錯用，就不用一直死呆呆的用-map-來轉換。然後它的原理和可調電阻一樣，所以沒什麼特別要強調的。"><a href="#搖桿模組大都用於機械手臂或控制有伺服馬達的地方，它有２組軸（X和Y）和一個按鍵-，ESP32和Arduino上是使用類比訊號測量，不過在ESP32上只有3-3V所以類比訊號會到4059-必須轉換到1023，後來才發現ESP32有幾個內鍵轉換的函式不錯用，就不用一直死呆呆的用-map-來轉換。然後它的原理和可調電阻一樣，所以沒什麼特別要強調的。" class="headerlink" title="搖桿模組大都用於機械手臂或控制有伺服馬達的地方，它有２組軸（Ｘ和Ｙ）和一個按鍵 ，ESP32和Arduino上是使用類比訊號測量，不過在ESP32上只有3.3V所以類比訊號會到4059  必須轉換到1023，後來才發現ESP32有幾個內鍵轉換的函式不錯用，就不用一直死呆呆的用  map()來轉換。然後它的原理和可調電阻一樣，所以沒什麼特別要強調的。"></a>搖桿模組大都用於機械手臂或控制有伺服馬達的地方，它有２組軸（Ｘ和Ｙ）和一個按鍵 ，ESP32和Arduino上是使用類比訊號測量，不過在ESP32上只有3.3V所以類比訊號會到4059  必須轉換到1023，後來才發現ESP32有幾個內鍵轉換的函式不錯用，就不用一直死呆呆的用  map()來轉換。然後它的原理和可調電阻一樣，所以沒什麼特別要強調的。</h3><hr><h2 id="接線"><a href="#接線" class="headerlink" title="接線"></a>接線</h2><h3 id="X–-gt-D33-A5"><a href="#X–-gt-D33-A5" class="headerlink" title="X–&gt;D33(A5)"></a>X–&gt;D33(A5)</h3><h3 id="Y–-gt-D32-A4"><a href="#Y–-gt-D32-A4" class="headerlink" title="Y–&gt;D32(A4)"></a>Y–&gt;D32(A4)</h3><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2467346807906815384#"><img src="https://1.bp.blogspot.com/-eo9WBofHtSo/YIkUVUGy3qI/AAAAAAAAeGY/UINLcUssojkL362WOFOI2wTBFM4P68OtACNcBGAsYHQ/w568-h472/1.jpg"></a></p><h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><p>esp32函式筆記本-<a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2467346807906815384#">https://esp32-blairan.blogspot.com/2021/04/esp32_26.html</a></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#define posX 33#define posY 32void setup()&#123;  Serial.begin(115200);  analogSetAttenuation(ADC_11db);  analogSetWidth(10);&#125;void loop()&#123;  int valx&#x3D;analogRead(posX);  int valy&#x3D;analogRead(posY);  delay(500);  Serial.printf(&quot;posX的搖桿值為: %d  &#x2F;&#x2F; posY的搖桿值為: %d\\n&quot;,valx, valy);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><div class="video-container"><iframe src="https://www.youtube.com/embed/kJ70IxVJXVo" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 遙桿模組 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>按鈕開關控制LED明滅</title>
      <link href="/2021/08/29/%E6%8C%89%E9%88%95%E9%96%8B%E9%97%9C%E6%8E%A7%E5%88%B6LED%E6%98%8E%E6%BB%85/"/>
      <url>/2021/08/29/%E6%8C%89%E9%88%95%E9%96%8B%E9%97%9C%E6%8E%A7%E5%88%B6LED%E6%98%8E%E6%BB%85/</url>
      
        <content type="html"><![CDATA[<h1 id="按鈕開關控制LED明滅"><a href="#按鈕開關控制LED明滅" class="headerlink" title="按鈕開關控制LED明滅 "></a>按鈕開關控制LED明滅 </h1><h6 id="tags-esp32-按鈕開關-led"><a href="#tags-esp32-按鈕開關-led" class="headerlink" title="tags: esp32 按鈕開關 led"></a>tags: <code>esp32</code> <code>按鈕開關</code> <code>led</code></h6><h2 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h2><p><strong>LED x1</strong></p><p><strong>按鈕開關 x1</strong></p><p><strong>220歐姆電阻 x1</strong></p><p><strong>ESP32</strong></p><p><a href="https://lh3.googleusercontent.com/-Yc_T7233Jvo/YJDgE6FwwII/AAAAAAAAeHA/etFpI543t8ErXzzDlgCpLc3ME02Ex294gCNcBGAsYHQ/s1600/1620107250751841-0.png"><img src="https://lh3.googleusercontent.com/-Yc_T7233Jvo/YJDgE6FwwII/AAAAAAAAeHA/etFpI543t8ErXzzDlgCpLc3ME02Ex294gCNcBGAsYHQ/w204-h362/1620107250751841-0.png"></a></p><h3 id="按鈕開關原理"><a href="#按鈕開關原理" class="headerlink" title="按鈕開關原理"></a>按鈕開關原理</h3><p><a href="https://1.bp.blogspot.com/-KqBfr6zKGPs/YJDkUqq4rnI/AAAAAAAAeHI/RVPN3_dsIssR8ebADpEl8eSYkreF9OWXQCNcBGAsYHQ/s946/1715185-1FP216354U55.jpg"><img src="https://1.bp.blogspot.com/-KqBfr6zKGPs/YJDkUqq4rnI/AAAAAAAAeHI/RVPN3_dsIssR8ebADpEl8eSYkreF9OWXQCNcBGAsYHQ/w400-h240/1715185-1FP216354U55.jpg"></a></p><p><a href="https://1.bp.blogspot.com/-czSSM3yjims/YJDkaJ8V4yI/AAAAAAAAeHM/lfjKT3t-kiQRnBU3CUVd6fsRfUwBkLp5wCNcBGAsYHQ/s318/%25E4%25B8%258B%25E8%25BC%2589.jpg"><img src="https://1.bp.blogspot.com/-czSSM3yjims/YJDkaJ8V4yI/AAAAAAAAeHM/lfjKT3t-kiQRnBU3CUVd6fsRfUwBkLp5wCNcBGAsYHQ/w418-h209/%25E4%25B8%258B%25E8%25BC%2589.jpg"></a></p><h2 id="實驗目的"><a href="#實驗目的" class="headerlink" title="實驗目的"></a>實驗目的</h2><p><strong>利用按鈕開關切換ESP32內鍵LED明滅</strong></p><p><strong>主要是練習消除按下按鈕時的彈跳雜訊</strong></p><h3 id="動作要求"><a href="#動作要求" class="headerlink" title="動作要求"></a>動作要求</h3><p><strong>按一下開關:點亮LED</strong></p><p><strong>再按一下開關:關閉LED</strong></p><h2 id="接線圖"><a href="#接線圖" class="headerlink" title="接線圖"></a><strong>接線圖</strong></h2><p>**</p><p><a href="https://1.bp.blogspot.com/-VuvcXgXf6uw/YJDtVXFoJTI/AAAAAAAAeHY/Wi1KlYE0rOkmBEIeS1Ao7vAbXkUatJgiwCNcBGAsYHQ/s1187/B.jpg"><img src="https://1.bp.blogspot.com/-VuvcXgXf6uw/YJDtVXFoJTI/AAAAAAAAeHY/Wi1KlYE0rOkmBEIeS1Ao7vAbXkUatJgiwCNcBGAsYHQ/w453-h225/B.jpg"></a></p><p> **</p><h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">byte sw &#x3D; 4;byte button &#x3D; LOW; &#x2F;&#x2F;按鈕預設低電位byte toggle &#x3D; LOW; &#x2F;&#x2F;暫存紀錄預設低電位 void setup()&#123;    Serial.begin(115200);    pinMode(LED_BUILTIN, OUTPUT);    pinMode(sw, INPUT);&#125;void loop()&#123;    bool b &#x3D; digitalRead(sw);    if (b)&#123;        delay(20); &#x2F;&#x2F;消除彈跳        button &#x3D; b;    &#125;    if (b !&#x3D; button)&#123;        toggle &#x3D;! toggle;        digitalWrite(LED_BUILTIN, toggle);        button &#x3D; LOW;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="實驗結果"><a href="#實驗結果" class="headerlink" title="實驗結果"></a>實驗結果</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/NGC4oxTKZm0" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 控鈕開關 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LED跑馬燈-ESP32</title>
      <link href="/2021/08/29/LED%E8%B7%91%E9%A6%AC%E7%87%88-ESP32/"/>
      <url>/2021/08/29/LED%E8%B7%91%E9%A6%AC%E7%87%88-ESP32/</url>
      
        <content type="html"><![CDATA[<h1 id="LED跑馬燈-ESP32"><a href="#LED跑馬燈-ESP32" class="headerlink" title="LED跑馬燈-ESP32"></a>LED跑馬燈-ESP32</h1><h6 id="tags-esp32-led"><a href="#tags-esp32-led" class="headerlink" title="tags: esp32 led"></a>tags: <code>esp32</code> <code>led</code></h6><h2 id="實驗目的"><a href="#實驗目的" class="headerlink" title="實驗目的"></a>實驗目的</h2><h4 id="了解迴圈運用和陣列的宣告-https-esp32-blairan-blogspot-com-2021-04-esp32-26-html"><a href="#了解迴圈運用和陣列的宣告-https-esp32-blairan-blogspot-com-2021-04-esp32-26-html" class="headerlink" title="了解迴圈運用和陣列的宣告 -https://esp32-blairan.blogspot.com/2021/04/esp32_26.html"></a>了解<strong>迴圈</strong>運用和<strong>陣列</strong>的宣告 -<a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/6656678562008851992#">https://esp32-blairan.blogspot.com/2021/04/esp32_26.html</a></h4><h2 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h2><p><strong>LED×4</strong></p><p><strong>220歐姆電阻×4</strong></p><p><strong>杜邦線</strong></p><p><strong>ESP32</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/6656678562008851992#"><img src="https://lh3.googleusercontent.com/-_YYwfEof1D0/YI5jHSJ3t6I/AAAAAAAAeG0/_k5HrzCSfV80legdS9URTnUH0Ad7Kmo7QCNcBGAsYHQ/s1600/1619944218044458-0.png"></a></p><hr><h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><h4 id="陣列宣告-https-esp32-blairan-blogspot-com-2021-04-esp32-26-html"><a href="#陣列宣告-https-esp32-blairan-blogspot-com-2021-04-esp32-26-html" class="headerlink" title="陣列宣告 https://esp32-blairan.blogspot.com/2021/04/esp32_26.html"></a>陣列宣告 <a href="https://esp32-blairan.blogspot.com/2021/04/esp32_26.html">https://esp32-blairan.blogspot.com/2021/04/esp32_26.html</a></h4><h4 id="for迴圈-https-esp32-blairan-blogspot-com-2021-04-esp32-26-html"><a href="#for迴圈-https-esp32-blairan-blogspot-com-2021-04-esp32-26-html" class="headerlink" title="for迴圈 https://esp32-blairan.blogspot.com/2021/04/esp32_26.html"></a>for迴圈 <a href="https://esp32-blairan.blogspot.com/2021/04/esp32_26.html">https://esp32-blairan.blogspot.com/2021/04/esp32_26.html</a></h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">const byte led\[\]&#x3D;&#123;35, 32, 33, 25&#125;;void setup() &#123;  Serial.begin(115200);  for (int i &#x3D; 0; i &lt;&#x3D;3; i++)&#123;    pinMode(led\[i\], OUTPUT);  &#125;&#125;void loop() &#123;  for (int i &#x3D; 0; i &lt;&#x3D;3; i++)  &#123;    digitalWrite(led\[i\], HIGH);    delay(100);    digitalWrite(led\[i\], LOW);  &#125;   for (int i &#x3D; 3; i &gt;&#x3D; 0; i--)  &#123;    digitalWrite(led\[i\], HIGH);    delay(100);    digitalWrite(led\[i\], LOW);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><div class="video-container"><iframe src="https://www.youtube.com/embed/lDSiaGsfrE4" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> led跑馬燈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DHT11/12網路監測溫濕度計-micropython</title>
      <link href="/2021/08/29/DHT11-12%E7%B6%B2%E8%B7%AF%E7%9B%A3%E6%B8%AC%E6%BA%AB%E6%BF%95%E5%BA%A6%E8%A8%88-micropython/"/>
      <url>/2021/08/29/DHT11-12%E7%B6%B2%E8%B7%AF%E7%9B%A3%E6%B8%AC%E6%BA%AB%E6%BF%95%E5%BA%A6%E8%A8%88-micropython/</url>
      
        <content type="html"><![CDATA[<h2 id="DHT11-12網路監測溫濕度計-micropython"><a href="#DHT11-12網路監測溫濕度計-micropython" class="headerlink" title="DHT11/12網路監測溫濕度計-micropython"></a>DHT11/12網路監測溫濕度計-micropython</h2><h6 id="tags-micropython-dht11-12-webserver"><a href="#tags-micropython-dht11-12-webserver" class="headerlink" title="tags: micropython dht11/12 webserver"></a>tags: <code>micropython</code> <code>dht11/12 webserver</code></h6><hr><p><strong><em>DHT11/12單純測試參考頁面-</em></strong></p><p><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/5661741645243406963?hl=zh-TW#">https://blairan-esp32-micropython.blogspot.com/2021/07/dht11dht12-micropython.html</a></p><p><em><strong>WiFi聯網參考-</strong></em><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/5661741645243406963?hl=zh-TW#">https://blairan-esp32-micropython.blogspot.com/2021/07/wifi.html</a></p><hr><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> dht<span class="token keyword">import</span> network<span class="token punctuation">,</span> socket<span class="token keyword">from</span> machine <span class="token keyword">import</span> Pin<span class="token keyword">from</span> time <span class="token keyword">import</span> sleepssid<span class="token operator">=</span><span class="token string">"---"</span>password<span class="token operator">=</span><span class="token string">"------"</span>STA<span class="token operator">=</span>network<span class="token punctuation">.</span>WLAN<span class="token punctuation">(</span>network<span class="token punctuation">.</span>STA_IF<span class="token punctuation">)</span>STA<span class="token punctuation">.</span>active<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>STA<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>ssid<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token keyword">while</span> STA<span class="token punctuation">.</span>isconnected<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">False</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The connected successful!"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"IP:  &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>STA<span class="token punctuation">.</span>ifconfig<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> readTempAndHumi<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> temp<span class="token punctuation">,</span> humi    <span class="token keyword">try</span><span class="token punctuation">:</span>        sensor<span class="token operator">=</span>dht<span class="token punctuation">.</span>DHT11<span class="token punctuation">(</span>Pin<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        sensor<span class="token punctuation">.</span>measure<span class="token punctuation">(</span><span class="token punctuation">)</span>        temp<span class="token operator">=</span>sensor<span class="token punctuation">.</span>temperature<span class="token punctuation">(</span><span class="token punctuation">)</span>        humi<span class="token operator">=</span>sensor<span class="token punctuation">.</span>humidity<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>humi<span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>humi<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          measureResult<span class="token operator">=</span><span class="token string">"&#123;&#125;,&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> humi<span class="token punctuation">)</span>          <span class="token keyword">return</span> measureResult        <span class="token keyword">else</span><span class="token punctuation">:</span>          <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">"--"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> OSError <span class="token keyword">as</span> o<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"--"</span><span class="token punctuation">)</span><span class="token keyword">def</span> Htmlpage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  html<span class="token operator">=</span> <span class="token triple-quoted-string string">"""        &lt;html>    &lt;head>      &lt;meta charset="utf-8" />      &lt;meta name="viewport" content="width=device-width, initial-scale=1.0" />      &lt;style>        h1  &#123;text-align: center; background-color: orange; margin-right:5px;&#125;        dl &#123; width: 320px; margin: 12px auto; &#125;        dt &#123;           font-size: 20pt; color: #444; background-color: #ddd;          margin: 6pt 0; padding: 6pt 12pt;        &#125;        dd &#123;          text-align: right; padding-right: 6pt;        &#125;        .num &#123; font-size: 36pt; color: dodgerblue; &#125;      &lt;/style>      &lt;/head>    &lt;body>      &lt;p>&lt;h1>ESP32 DHT11/12&lt;/h1>&lt;/p>      &lt;dl>        &lt;dt>Temp&lt;/dt>        &lt;dd class=num>"""</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token operator">+</span><span class="token triple-quoted-string string">"""°C&lt;/dd>        &lt;dt>Humi&lt;/dt>        &lt;dd class=num>"""</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>humi<span class="token punctuation">)</span><span class="token operator">+</span><span class="token triple-quoted-string string">""" %&lt;/dd>      &lt;/dl>    &lt;/body>    &lt;/html>    """</span>  <span class="token keyword">return</span> htmls<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> s<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Got a connection from %s'</span> <span class="token operator">%</span> <span class="token builtin">str</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    req <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Content = %s'</span> <span class="token operator">%</span> <span class="token builtin">str</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span>    sensor_reading <span class="token operator">=</span> readTempAndHumi<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sensor_reading<span class="token punctuation">)</span>    respone <span class="token operator">=</span> Htmlpage<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"http/1.1 200 OK\\n"</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"Content-Type: text/html; charset='utf-8'\\n"</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"Connection: close\\n\\n"</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>respone<span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">**</span>_載入dht<span class="token punctuation">,</span>wifi<span class="token punctuation">,</span>端口<span class="token punctuation">,</span>pin和時間模組_<span class="token operator">**</span><span class="token keyword">import</span> dht<span class="token keyword">import</span> network<span class="token punctuation">,</span> socket<span class="token keyword">from</span> machine <span class="token keyword">import</span> Pin<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><em>這個部份是設制WiFi的流程</em></strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ssid<span class="token operator">=</span><span class="token string">"基地台名稱"</span>password<span class="token operator">=</span><span class="token string">"基地台密碼"</span>STA<span class="token operator">=</span>network<span class="token punctuation">.</span>WLAN<span class="token punctuation">(</span>network<span class="token punctuation">.</span>STA_IF<span class="token punctuation">)</span>STA<span class="token punctuation">.</span>active<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>STA<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>ssid<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token keyword">while</span> STA<span class="token punctuation">.</span>isconnected<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">False</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The connected successful!"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"IP:  &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>STA<span class="token punctuation">.</span>ifconfig<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><em>讀取溫溼度的函式</em></strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> readTempAndHumi<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> temp<span class="token punctuation">,</span> humi    <span class="token keyword">try</span><span class="token punctuation">:</span>        sensor<span class="token operator">=</span>dht<span class="token punctuation">.</span>DHT11<span class="token punctuation">(</span>Pin<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        sensor<span class="token punctuation">.</span>measure<span class="token punctuation">(</span><span class="token punctuation">)</span>        temp<span class="token operator">=</span>sensor<span class="token punctuation">.</span>temperature<span class="token punctuation">(</span><span class="token punctuation">)</span>        humi<span class="token operator">=</span>sensor<span class="token punctuation">.</span>humidity<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>humi<span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>humi<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        measureResult<span class="token operator">=</span><span class="token string">"&#123;&#125;,&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> humi<span class="token punctuation">)</span>            <span class="token keyword">return</span> measureResult        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">"--"</span><span class="token punctuation">)</span>     <span class="token keyword">except</span> OSError <span class="token keyword">as</span> o<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"--"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>網頁前端的布置,記得要讓其讀取時可返回(return)</strong></p><p><strong>其中須注意的是讓溫溼度的值可以正顯示要使用</strong>“””+str(溫/溼度變數)+”””</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> Htmlpage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  html<span class="token operator">=</span> <span class="token triple-quoted-string string">"""        &lt;html>    &lt;head>      &lt;meta charset="utf-8" />      &lt;meta name="viewport" content="width=device-width, initial-scale=1.0" />      &lt;style>        h1  &#123;text-align: center; background-color: orange; margin-right:5px;&#125;        dl &#123; width: 320px; margin: 12px auto; &#125;        dt &#123;           font-size: 20pt; color: #444; background-color: #ddd;          margin: 6pt 0; padding: 6pt 12pt;        &#125;        dd &#123;          text-align: right; padding-right: 6pt;        &#125;        .num &#123; font-size: 36pt; color: dodgerblue; &#125;      &lt;/style>      &lt;/head>    &lt;body>      &lt;p>&lt;h1>ESP32 DHT11/12&lt;/h1>&lt;/p>      &lt;dl>        &lt;dt>Temp&lt;/dt>        &lt;dd class=num>"""</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token operator">+</span><span class="token triple-quoted-string string">"""°C&lt;/dd>        &lt;dt>Humi&lt;/dt>        &lt;dd class=num>"""</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>humi<span class="token punctuation">)</span><span class="token operator">+</span><span class="token triple-quoted-string string">""" %&lt;/dd>      &lt;/dl>    &lt;/body>    &lt;/html>    """</span>  <span class="token keyword">return</span> html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><em>設制監聽套接端口</em></strong></p><p><strong><em>函式參考-</em></strong><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/5661741645243406963?hl=zh-TW#">我的micropython函式筆記</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> s<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Got a connection from %s'</span> <span class="token operator">%</span> <span class="token builtin">str</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    req <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Content = %s'</span> <span class="token operator">%</span> <span class="token builtin">str</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span>    sensor_reading <span class="token operator">=</span> readTempAndHumi<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sensor_reading<span class="token punctuation">)</span>    respone <span class="token operator">=</span> Htmlpage<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"http/1.1 200 OK\\n"</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"Content-Type: text/html; charset='utf-8'\\n"</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"Connection: close\\n\\n"</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>respone<span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/5661741645243406963?hl=zh-TW#"><img src="https://lh3.googleusercontent.com/-stu-h6hdsgc/YOaaTDfLfOI/AAAAAAAAeaQ/NiNjk1xHXl0YOU_J8btvb9Qd3isHo6ZvwCNcBGAsYHQ/s1600/1625725506698515-0.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> micropython </category>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DHT11/DHT12 </tag>
            
            <tag> webserver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWM控制板上內建LED-ESP32</title>
      <link href="/2021/08/29/PWM%E6%8E%A7%E5%88%B6%E6%9D%BF%E4%B8%8A%E5%85%A7%E5%BB%BALED-ESP32/"/>
      <url>/2021/08/29/PWM%E6%8E%A7%E5%88%B6%E6%9D%BF%E4%B8%8A%E5%85%A7%E5%BB%BALED-ESP32/</url>
      
        <content type="html"><![CDATA[<h1 id="PWM控制板上內建LED-ESP32"><a href="#PWM控制板上內建LED-ESP32" class="headerlink" title="PWM控制板上內建LED-ESP32"></a>PWM控制板上內建LED-ESP32</h1><h6 id="tags-esp32-led-pwm"><a href="#tags-esp32-led-pwm" class="headerlink" title="tags: esp32 led pwm"></a>tags: <code>esp32</code> <code>led</code> <code>pwm</code></h6><h2 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h2><ol><li><h4 id="ESP32控制板-x1"><a href="#ESP32控制板-x1" class="headerlink" title="ESP32控制板 x1"></a>ESP32控制板 x1</h4></li><li><h4 id="可變電阻-x1"><a href="#可變電阻-x1" class="headerlink" title="可變電阻 x1"></a>可變電阻 x1</h4></li><li><h4 id="10K歐姆電阻-x1"><a href="#10K歐姆電阻-x1" class="headerlink" title="10K歐姆電阻 x1"></a>10K歐姆電阻 x1</h4></li></ol><h2 id="接線"><a href="#接線" class="headerlink" title="接線"></a>接線</h2><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/5354569437760337966#"><img src="https://1.bp.blogspot.com/-lGkj-SvW41c/YId8HIPFBQI/AAAAAAAAeGI/P0q3-HrMSrI2FS2aWVSbTbB_09B4vGtpACNcBGAsYHQ/w718-h337/2.jpg"></a></p><hr><h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><pre><code class="line-numbers language-c#">#define pwm1 A4void setup()&#123;  Serial.begin(115200);  ledcSetup(0, 5000, 10);  ledcAttachPin(LED_BUILTIN, 0);  pinMode(LED_BUILTIN, OUTPUT);&#125;void loop()&#123;  int val=analogRead(pwm1);  val=map(val, 0, 4095, 0, 1023);  Serial.printf(&quot;輸出值為: %u\\n&quot;, val);  ledcWrite(0, val);  delay(100);&#125;</code></pre><hr><h2 id="程式碼部份說明"><a href="#程式碼部份說明" class="headerlink" title="程式碼部份說明"></a>程式碼部份說明</h2><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/5354569437760337966#">ESP32函式筆記本</a>-PWM  </p><h3 id="和Arduino不一太一樣的地方是在多了設定PWM的通道和頻率-當中其實更完善的方法還有位元數的轉換，因為ESP32的類比數值是4095-而Arduino的數值是1023-所以在ledcSetup-裡的10是代表esp32的10位元-但我試著用原生的方式map-轉換測試後還可以-analogRead-一樣有-但少了analogWrite-這部份以ledcWrite-取代。"><a href="#和Arduino不一太一樣的地方是在多了設定PWM的通道和頻率-當中其實更完善的方法還有位元數的轉換，因為ESP32的類比數值是4095-而Arduino的數值是1023-所以在ledcSetup-裡的10是代表esp32的10位元-但我試著用原生的方式map-轉換測試後還可以-analogRead-一樣有-但少了analogWrite-這部份以ledcWrite-取代。" class="headerlink" title="和Arduino不一太一樣的地方是在多了設定PWM的通道和頻率,當中其實更完善的方法還有位元數的轉換，因為ESP32的類比數值是4095,而Arduino的數值是1023,所以在ledcSetup()裡的10是代表esp32的10位元,但我試著用原生的方式map()轉換測試後還可以,analogRead()一樣有,但少了analogWrite(),這部份以ledcWrite()取代。"></a>和Arduino不一太一樣的地方是在多了設定PWM的通道和頻率,當中其實更完善的方法還有位元數的轉換，因為ESP32的類比數值是4095,而Arduino的數值是1023,所以在ledcSetup()裡的10是代表esp32的10位元,但我試著用原生的方式map()轉換測試後還可以,analogRead()一樣有,但少了analogWrite(),這部份以ledcWrite()取代。</h3><hr><div class="video-container"><iframe src="https://www.youtube.com/embed/bO9G6uzPRcw" frameborder="0" loading="lazy" allowfullscreen></iframe></div>https://youtu.be/bO9G6uzPRcw]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> esp32 </tag>
            
            <tag> led </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MQTT&amp;node-RED控制二軸云台-mpython</title>
      <link href="/2021/08/28/MQTT-node-RED%E6%8E%A7%E5%88%B6%E4%BA%8C%E8%BB%B8%E4%BA%91%E5%8F%B0-mpython/"/>
      <url>/2021/08/28/MQTT-node-RED%E6%8E%A7%E5%88%B6%E4%BA%8C%E8%BB%B8%E4%BA%91%E5%8F%B0-mpython/</url>
      
        <content type="html"><![CDATA[<h1 id="MQTT-amp-node-RED控制二軸云台-mpython"><a href="#MQTT-amp-node-RED控制二軸云台-mpython" class="headerlink" title="MQTT&amp;node-RED控制二軸云台-mpython"></a>MQTT&amp;node-RED控制二軸云台-mpython</h1><p><a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/4999901201185761586#"><img src="https://lh3.googleusercontent.com/-sqJOZzdBnks/YSjK1HOEkWI/AAAAAAAAe3o/ShJX8l8V20cmENfwoL0iij0uZm_wHfwaQCNcBGAsYHQ/w208-h349/1630063309993121-0.png"></a></p><p><em><strong>承接<a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/4999901201185761586#">使用PWM控制伺服馬達-micropython</a>這篇，透過node-red加入mqtt訂閱主題控制二軸云台</strong></em></p><p><em><strong>有一些感想紀錄下來，我發現其實像mqtt或者wifi連網，大都是固定一個寫法，其它不同的模組分為讀取數值或用數值受控制的元件，只要套用上去就可以。</strong></em></p><p><em><strong>首先主要是被控制的伺服馬達，所以先把它測試一下，參考這篇（<a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/4999901201185761586#">點我</a>）</strong></em></p><p><em><strong>測試好之後，就可以開始加入wifi和mqtt了，但因為我用的是樹莓派建立的ＭQTT，所以這陪分前提是要有樹苺派，如何在樹苺派上建立Ｎode-RED和MQTT，可以參考這篇（<a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/4999901201185761586#">點我</a>）。</strong></em></p><hr><h2 id="Node-RED設定"><a href="#Node-RED設定" class="headerlink" title="Node-RED設定"></a>Node-RED設定</h2><p><a href="https://1.bp.blogspot.com/-GksKBPZ26_o/YSpWJWFmwhI/AAAAAAAAe4E/6peztH_jPDgTVkrbfKGBriWMdPbxcnCyACNcBGAsYHQ/s1920/3.jpg"><img src="https://1.bp.blogspot.com/-GksKBPZ26_o/YSpWJWFmwhI/AAAAAAAAe4E/6peztH_jPDgTVkrbfKGBriWMdPbxcnCyACNcBGAsYHQ/w654-h368/3.jpg"></a></p><p><a href="https://1.bp.blogspot.com/-bIpsZvvgG6Y/YSpVzj9SmhI/AAAAAAAAe34/-V-RirefCUETcVru84SLRomgYX3EzNOnQCNcBGAsYHQ/s1920/1.jpg"><img src="https://1.bp.blogspot.com/-bIpsZvvgG6Y/YSpVzj9SmhI/AAAAAAAAe34/-V-RirefCUETcVru84SLRomgYX3EzNOnQCNcBGAsYHQ/w661-h370/1.jpg"></a></p><p><a href="https://1.bp.blogspot.com/-AS8DJhdGX5Q/YSpV8K4e0hI/AAAAAAAAe38/1h6rhTpCw1wwJ_hmA4QAZDDkU-6MBBANwCNcBGAsYHQ/s1920/2.jpg"><img src="https://1.bp.blogspot.com/-AS8DJhdGX5Q/YSpV8K4e0hI/AAAAAAAAe38/1h6rhTpCw1wwJ_hmA4QAZDDkU-6MBBANwCNcBGAsYHQ/w654-h368/2.jpg"></a></p><h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><pre><code class="line-numbers language-python">from machine import SLEEP, Pin, PWM, freqfrom time import sleep from umqtttsimple import MQTTClient  import binascii, micropython, network, time, socket, machine    ssid = &quot;------------&quot;password = &quot;-------&quot;mqtt_server = &quot;192.168.210.22&quot;    #將客戶端ID轉換為16進位,以便MQTT伺服端讀取    mqtt_id = binascii.hexlify(machine.unique_id())    #和Nord-RED上的主題一致    client_servoPan = b&#39;esp32/servoPan&#39;client_servoTilt = b&#39;esp32/servoTilt&#39;    servo_pan = PWM(Pin(13), freq=50)servo_tilt = PWM(Pin(14), freq=50)    #wifi連線    def wifiConn():    wifi = network.WLAN(network.STA_IF)    wifi.active(True)    wifi.connect(ssid, password)    while wifi.isconnected() == False:        pass    print(&quot;Connected successful!&quot;)    print(&quot;IP: &#123;&#125;&quot;.format(wifi.ifconfig()))    #樹莓派上的mqtt回應訂閱def callBack(topic, msg):    print((topic, msg))    if topic == client_servoPan:        servo_pan.duty(int(msg))        sleep(0.5)    elif topic == client_servoTilt:        servo_tilt.duty(int(msg))        sleep(0.5)    #連線MQTT,連線成功後訂閱主題def connToMqtt():    try:        client = MQTTClient(mqtt_id, mqtt_server)        client.set_callback(callBack)        client.connect()        client.subscribe(client_servoPan)        client.subscribe(client_servoTilt)        print(&quot;connect to %s&quot;%mqtt_server)        return client        #如果無法連線重新連線    except OSError as e:        print(&quot;not to connected for MQTT server!&quot;)        machine.reset()    wifiConn()client = connToMqtt()while True:    #檢查有無進來的訊息    client.check_msg()</code></pre><p>調過等待時間還是會偶爾抖動，雖然不知道抖動原在哪，先這樣好了，下次再來抓原因。</p><div class="video-container"><iframe src="https://www.youtube.com/embed/HxkOYhqcgaY" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content>
      
      
      <categories>
          
          <category> micropython </category>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> servo </tag>
            
            <tag> mqtt </tag>
            
            <tag> 二軸云台 </tag>
            
            <tag> 伺服馬達 </tag>
            
            <tag> node-red </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搖桿控制云台-ESP32</title>
      <link href="/2021/08/28/%E6%90%96%E6%A1%BF%E6%8E%A7%E5%88%B6%E4%BA%91%E5%8F%B0-ESP32/"/>
      <url>/2021/08/28/%E6%90%96%E6%A1%BF%E6%8E%A7%E5%88%B6%E4%BA%91%E5%8F%B0-ESP32/</url>
      
        <content type="html"><![CDATA[<h1 id="搖桿控制云台-ESP32"><a href="#搖桿控制云台-ESP32" class="headerlink" title="搖桿控制云台-ESP32"></a>搖桿控制云台-ESP32</h1><h6 id="tags-esp32-搖桿-云台"><a href="#tags-esp32-搖桿-云台" class="headerlink" title="tags: esp32 搖桿 云台"></a>tags: <code>esp32</code> <code>搖桿</code> <code>云台</code></h6><h3 id="實驗目的"><a href="#實驗目的" class="headerlink" title="實驗目的"></a>實驗目的</h3><p><strong>以搖桿的讀值同步控制伺服馬達。</strong></p><p><strong>須注意值要轉換成角度。</strong></p><h3 id="伺服馬達"><a href="#伺服馬達" class="headerlink" title="伺服馬達"></a>伺服馬達</h3><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/3060329269915131288#"><img src="https://1.bp.blogspot.com/-qUFym3H-21Q/YIywjKU9TPI/AAAAAAAAeGk/_GiSq6LVWYA4sOlvfkGRHzt-lUoZgKjjwCNcBGAsYHQ/w315-h210/servo.jpg"></a></p><p><strong>伺服馬達被廣範運在微控板的控制上,幾乎這是學習微控板的基礎</strong></p><p><strong>具代表的實驗就是二軸云台,它是以兩個伺服馬達構成平移和上下</strong></p><p><strong>運動的裝置,至於SG90這種小型伺服馬達的運作網路上很多資源,</strong></p><p><strong>就不一一贅述。</strong></p><h2 id="搖桿模組"><a href="#搖桿模組" class="headerlink" title="搖桿模組"></a>搖桿模組</h2><h4 id="請參照這篇的實驗—https-esp32-blairan-blogspot-com-2021-04-esp32-28-html"><a href="#請參照這篇的實驗—https-esp32-blairan-blogspot-com-2021-04-esp32-28-html" class="headerlink" title="請參照這篇的實驗—https://esp32-blairan.blogspot.com/2021/04/esp32_28.html"></a>請參照這篇的實驗—<a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/3060329269915131288#">https://esp32-blairan.blogspot.com/2021/04/esp32_28.html</a></h4><h2 id="接線圖"><a href="#接線圖" class="headerlink" title="接線圖"></a>接線圖</h2><p><strong>POSＸ-D33</strong></p><p><strong>POSＹ—D32</strong></p><p><strong>SERVO_PAN—-&gt;D12</strong></p><p><strong>SERVO_TIT—-&gt;D13</strong></p><p><strong>GND</strong></p><p><strong>3V3</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/3060329269915131288#"><img src="https://1.bp.blogspot.com/-OySoM8bHU9s/YIyyJmCXZLI/AAAAAAAAeGs/G450OX409awrx2D8wMHg3dZGLJPPd5QLwCNcBGAsYHQ/w450-h467/1.jpg"></a></p><p><strong>須匯入</strong><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/3060329269915131288#">ESP32Servo.h</a></p><h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><pre><code class="line-numbers language-c#">#include &lt;ESP32Servo.h&gt;Servo Pan;Servo Tit;#define servoPAN 12#define servoTIT 13#define posX 33#define posY 32 void setup()&#123;  Serial.begin(115200);  analogSetAttenuation(ADC_11db);  analogSetWidth(10);  Pan.setPeriodHertz(50);  Tit.setPeriodHertz(50);  Pan.attach(servoPAN, 500, 2400);  Tit.attach(servoTIT, 500, 2400);&#125;void loop()&#123;  int valx=analogRead(posX);  valx=map(valx, 0, 1023, 0, 180);  Pan.write(valx);  int valy=analogRead(posY);  valy=map(valy, 0, 1023, 0, 180);  Tit.write(valy);  delay(500);  Serial.printf(&quot;posX的搖桿值為: %d  // posY的搖桿值為: %d\\n&quot;,valx, valy);&#125;</code></pre><div class="video-container"><iframe src="https://www.youtube.com/embed/-CYCyibcFn0" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> esp32 </tag>
            
            <tag> 搖桿 </tag>
            
            <tag> 云台 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>藍芽基本通訊&amp;控制LED-ESP32</title>
      <link href="/2021/08/28/%E8%97%8D%E8%8A%BD%E5%9F%BA%E6%9C%AC%E9%80%9A%E8%A8%8A-%E6%8E%A7%E5%88%B6LED-ESP32/"/>
      <url>/2021/08/28/%E8%97%8D%E8%8A%BD%E5%9F%BA%E6%9C%AC%E9%80%9A%E8%A8%8A-%E6%8E%A7%E5%88%B6LED-ESP32/</url>
      
        <content type="html"><![CDATA[<h1 id="藍芽基本通訊-amp-控制LED-ESP32"><a href="#藍芽基本通訊-amp-控制LED-ESP32" class="headerlink" title="藍芽基本通訊&amp;控制LED-ESP32"></a>藍芽基本通訊&amp;控制LED-ESP32</h1><h6 id="tags-esp32-藍芽"><a href="#tags-esp32-藍芽" class="headerlink" title="tags: esp32 藍芽"></a>tags: <code>esp32</code> <code>藍芽</code></h6><hr><h4 id="Arduino本身也可以外接藍芽和WIFI，但是須要外掛，這點"><a href="#Arduino本身也可以外接藍芽和WIFI，但是須要外掛，這點" class="headerlink" title="Arduino本身也可以外接藍芽和WIFI，但是須要外掛，這點"></a>Arduino本身也可以外接藍芽和WIFI，但是須要外掛，這點</h4><h4 id="就顯得麻煩一些；ESP32系列都有內建藍芽和WIFI這樣就稍"><a href="#就顯得麻煩一些；ESP32系列都有內建藍芽和WIFI這樣就稍" class="headerlink" title="就顯得麻煩一些；ESP32系列都有內建藍芽和WIFI這樣就稍"></a>就顯得麻煩一些；ESP32系列都有內建藍芽和WIFI這樣就稍</h4><h4 id="能省事，而且語法和Arduino的藍芽用法幾乎一樣。"><a href="#能省事，而且語法和Arduino的藍芽用法幾乎一樣。" class="headerlink" title="能省事，而且語法和Arduino的藍芽用法幾乎一樣。"></a>能省事，而且語法和Arduino的藍芽用法幾乎一樣。</h4><hr><h2 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法:"></a>操作方法:</h2><p>:memo: <strong><em>首先寫好程式並上傳至ESP32</em></strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#include &lt;BluetoothSerial.h&gt;BluetoothSerial myBT;char incomeData;void setup()&#123;    Serial.begin(115200);    myBT.begin(&quot;ctkBT-01&quot;);    pinMode(LED_BUILTIN, OUTPUT);&#125;void loop()&#123;    if (myBT.available())&#123;        incomeData&#x3D;myBT.read();        Serial.printf(&quot;從藍芽到: %d\&quot;, incomeData);    &#125;    if (incomeData&#x3D;&#x3D;&#39;1&#39;)&#123;        digitalWrite(LED_BUILTIN, HIGH);        myBT.printf(&quot;LED開啓囉!!!&quot;);  &#x2F;&#x2F;手機端收訊    &#125;else if (incomeData&#x3D;&#x3D;&#39;0&#39;)    &#123;        digitalWrite(LED_BUILTIN, LOW);        myBT.printf(&quot;LED關閉囉!!!&quot;); &#x2F;&#x2F;手機端收訊    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>:memo:<strong>手機端</strong></p><ol><li> <strong>手機藍芽配對ESP32</strong></li><li><strong>在google player下載Serial Bluetooth Terminal</strong></li></ol><p><strong>其它請看視頻操作</strong></p><div class="video-container"><iframe src="https://www.youtube.com/embed/G1-VYOFByYU" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> esp32 </tag>
            
            <tag> 藍芽 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP32設定無線基地台和固定IP</title>
      <link href="/2021/08/28/ESP32%E8%A8%AD%E5%AE%9A%E7%84%A1%E7%B7%9A%E5%9F%BA%E5%9C%B0%E5%8F%B0%E5%92%8C%E5%9B%BA%E5%AE%9AIP/"/>
      <url>/2021/08/28/ESP32%E8%A8%AD%E5%AE%9A%E7%84%A1%E7%B7%9A%E5%9F%BA%E5%9C%B0%E5%8F%B0%E5%92%8C%E5%9B%BA%E5%AE%9AIP/</url>
      
        <content type="html"><![CDATA[<h1 id="ESP32設定無線基地台和固定IP"><a href="#ESP32設定無線基地台和固定IP" class="headerlink" title="ESP32設定無線基地台和固定IP"></a>ESP32設定無線基地台和固定IP</h1><h6 id="tags-esp32-無線基地台"><a href="#tags-esp32-無線基地台" class="headerlink" title="tags: esp32 無線基地台"></a>tags: <code>esp32</code> <code>無線基地台</code></h6><p><strong>ESP32也能使自己變成無線基地台(AP)，使其它設備連上自己的網路，</strong></p><p><strong>雖然很方便，但不適合用於負荷高的應用。</strong></p><p><strong>只要一行短的指令就能辦到</strong></p><p><strong>WiFi.softAP(“SSID名稱”)</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#include &lt;WiFi.h&gt;  void setup()&#123;    WiFi.softAP(&quot;ESP32無線基地台&quot;);&#125;void loop()&#123;&#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>上傳之後在手機端搜尋WiFi可以看到ESP32顯示為基地台名稱</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/801948207668992406#"><img src="https://lh3.googleusercontent.com/-I6zVUPbh2t8/YKdSssq03vI/AAAAAAAAeLI/W5jfwPBtPwc887winp2CTalxbKSl_xSzwCNcBGAsYHQ/s1600/1621578415343300-0.png"></a></p><p><strong>嚐試跟ESP32連線之後，手機本身的網路功能將無法使用。</strong></p><hr><h2 id="自訂基地台並設定固定IP"><a href="#自訂基地台並設定固定IP" class="headerlink" title="自訂基地台並設定固定ＩＰ"></a>自訂基地台並設定固定ＩＰ</h2><p><strong>softAP(“SSID”, 密碼, 通道)</strong></p><p><strong>SSID:基地台名稱</strong></p><p><strong>密碼:基地台密碼</strong></p><p><strong>通道:1~13個通道可供選擇</strong></p><p><strong>softAPConfig(IP位址, 閘道IP位址, 子網路遮罩)</strong></p><p><strong>須注意上面挎號裡預設值分別為192.168.4.1，192.168.4.1，255.255.255.0</strong></p><p>*<strong>一般IP位置和閘道IP位址設定相同</strong></p><p><strong>因為IP設定的格式可能較為複雜，習慣上會使用IPAddress類別來</strong></p><p><strong>建立ip，閘道ip，子網路遮罩。</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#include &lt;WiFi.h&gt;IPAddress local_IP(192, 168, 4, 11);IPAddress gateway(192, 168, 4, 11);IPAddress subnet(255, 255 ,255, 0);const char *SSID &#x3D; &quot;ESP32基地台&quot;;const char *password &#x3D; &quot;ctk674011&quot;;void setup()&#123;    Serial.begin(115200);    WiFi.softAPConfig(local_IP, gateway, subnet);    while (!WiFi.softAP(SSID, password))&#123;    &#125;    Serial.println(&quot;啓動成功&quot;);    Serial.print(&quot;IP位址: &quot;);    Serial.println(WiFi.softAPIP());&#125;void loop()&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>程式上傳後如果基地台啓動成功，瀏覽器會顯示如下資訊</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/801948207668992406#"><img src="https://1.bp.blogspot.com/-crYRZRbaPA8/YKdRi7oX4PI/AAAAAAAAeK0/ivBD_2fyreYrHTiRHS59iVeQsWcfMqe7gCNcBGAsYHQ/w293-h303/%25E6%2593%25B7%25E5%258F%2596_2021_05_21_14_17_56_195.jpg"></a></p><p><strong>然後手機WiFi會搜尋到ESP32基地台的名稱，輸入剛設定的密碼即可連線</strong></p><p><strong>＊手機和ESP32連線後，手機將無法連外網。</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/801948207668992406#"><img src="https://lh3.googleusercontent.com/-QeQlaToWUVE/YKdSr-Y4OTI/AAAAAAAAeLE/Sp1uUgsegwMhx-SmZM5HR8QFY5ZOZucLgCNcBGAsYHQ/s1600/1621578412456247-1.png"></a></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/801948207668992406#"><img src="https://lh3.googleusercontent.com/-cr2sa2BFcto/YKdSrfhHEkI/AAAAAAAAeLA/oA2qnepOO-MJL8S9LAJrvYemWHSvIk8vQCNcBGAsYHQ/s1600/1621578409821481-2.png"></a></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/801948207668992406#"><img src="https://lh3.googleusercontent.com/-6aaKJ8_SzlQ/YKdSqtnZGCI/AAAAAAAAeK8/56YBZ12PQnkLhIv9z09KUHIrM_lmV2yYACNcBGAsYHQ/s1600/1621578407212556-3.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> esp32 </tag>
            
            <tag> wifi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0.91吋_OLED實驗</title>
      <link href="/2021/08/28/0-91%E5%90%8B-OLED%E5%AF%A6%E9%A9%97/"/>
      <url>/2021/08/28/0-91%E5%90%8B-OLED%E5%AF%A6%E9%A9%97/</url>
      
        <content type="html"><![CDATA[<h1 id="0-91吋-OLED實驗"><a href="#0-91吋-OLED實驗" class="headerlink" title="0.91吋_OLED實驗"></a>0.91吋_OLED實驗</h1><h6 id="tags-esp32-0-91oled"><a href="#tags-esp32-0-91oled" class="headerlink" title="tags: esp32 0.91oled"></a>tags: <code>esp32</code> <code>0.91oled</code></h6><hr><h2 id="曲折離奇的0-91OLED"><a href="#曲折離奇的0-91OLED" class="headerlink" title="曲折離奇的0.91OLED"></a><em>曲折離奇的0.91OLED</em></h2><p><strong>為什麼我這麼說它曲折離奇,因為我試了兩天了</strong></p><p><strong>從淘B買回來兩個,因為帶在身邊的一個,就拿來</strong></p><p><strong>開始研究,先是用Adafriut_SSD1306庫,結果都不</strong></p><p><strong>成功,後來使用u8g2lib也不行,整個莫名的💥💥💥</strong></p><p><strong>然後第二天衝回家拿另一個OLED來試,才發現</strong></p><p><strong>第一個OLED壞的，然後我又用Adafriut_SSD1306</strong></p><p><strong>庫試，一樣是不行，最後找到這個<a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/1717125022706858388#">ssd1306</a>庫(非Adafruit)</strong></p><p><strong>終於可以顯示了。</strong></p><hr><p><strong>參考:</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/1717125022706858388#">http://arduino-er.blogspot.com/2020/12/i2c-ssd1306-oledesp32-esp32-devkitc-v4.html?m=1</a>  </p><p><strong><em>先來看看實際上顯示的樣子</em></strong></p><p><strong>例1:</strong></p><div class="video-container"><iframe src="https://www.youtube.com/embed/se70n6MqrS0" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p><strong>例2:</strong></p><div class="video-container"><iframe src="https://www.youtube.com/embed/oKcyi8UBHak" frameborder="0" loading="lazy" allowfullscreen></iframe></div><hr><p>h</p><p><a href="https://diyprojects.io/media/2020/10/091-inch-128x32-iic-i2c-blue-oled-lcd-display-diy-oled-module-ssd1306-driver-1-1024x1024.jpg"><img src="https://diyprojects.io/media/2020/10/091-inch-128x32-iic-i2c-blue-oled-lcd-display-diy-oled-module-ssd1306-driver-1-1024x1024.jpg"></a></p><p><strong>接線方很簡單,主要是使用I2C傳輸,所以只要把</strong></p><p>ESP32     OLED</p><p>--------------------</p><p>3V      |     VCC</p><p>GND  |     GND</p><p>SCL    |     D22</p><p>SDA   |     D21</p><hr><p><strong>然後將<a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/1717125022706858388#">ssd1306</a>庫放入Arduino IDE庫裡就行</strong></p><h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><p><strong>例1:</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ssd1306.h"</span></span>  <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">ssd1306_setFixedFont</span><span class="token punctuation">(</span>ssd1306xled_font8x16<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ssd1306_128x32_i2c_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ssd1306_clearScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">ssd1306_setFixedFont</span><span class="token punctuation">(</span>ssd1306xled_font8x16<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ssd1306_printFixed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">"Hello World!!!"</span><span class="token punctuation">,</span> STYLE_BOLD<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ssd1306_clearScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">textDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ssd1306_clearScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>例2:</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ssd1306.h"</span></span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">ssd1306_setFixedFont</span><span class="token punctuation">(</span>ssd1306xled_font8x16<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ssd1306_128x32_i2c_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ssd1306_clearScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">ssd1306_setFixedFont</span><span class="token punctuation">(</span>ssd1306xled_font8x16<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ssd1306_print</span><span class="token punctuation">(</span><span class="token string">"Hello World!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ssd1306_clearScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> esp32 </tag>
            
            <tag> OLED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP32解決必須按BOOT才能上傳的小方法</title>
      <link href="/2021/08/28/ESP32%E8%A7%A3%E6%B1%BA%E5%BF%85%E9%A0%88%E6%8C%89BOOT%E6%89%8D%E8%83%BD%E4%B8%8A%E5%82%B3%E7%9A%84%E5%B0%8F%E6%96%B9%E6%B3%95/"/>
      <url>/2021/08/28/ESP32%E8%A7%A3%E6%B1%BA%E5%BF%85%E9%A0%88%E6%8C%89BOOT%E6%89%8D%E8%83%BD%E4%B8%8A%E5%82%B3%E7%9A%84%E5%B0%8F%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="ESP32解決必須按BOOT才能上傳的小方法"><a href="#ESP32解決必須按BOOT才能上傳的小方法" class="headerlink" title="ESP32解決必須按BOOT才能上傳的小方法"></a>ESP32解決必須按BOOT才能上傳的小方法</h1><h6 id="tags-esp32-自動上傳"><a href="#tags-esp32-自動上傳" class="headerlink" title="tags: esp32 自動上傳"></a>tags: <code>esp32</code> <code>自動上傳</code></h6><p><strong>最近開始玩ESP32發現有點麻煩的是每次一上傳到板子都要和跟….___….</strong></p><p><strong>賽跑,後來看到社團上有些大大教學使用10u~100uF的電容即可解決手動上傳</strong></p><p><strong>的困擾，正好公司有100uF 的電容,拿來試試果真可以呢!!!</strong></p><p><strong>參考:<a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/7627629995084093339#">https://blog.darkthread.net/blog/esp32-upload-timeout-fix/?fbclid=IwAR2LK8WYw0P28fvPJDFXoARzUGvGylDiDCZUkpFhwD9u2TXvTX-yvM8yBGw</a></strong></p><p><strong>方法很簡單，只要拿到電容，將電容正端焊在EN，負端焊在GND，這樣就行了。</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/7627629995084093339#"><img src="https://lh3.googleusercontent.com/-s_bry0zMywg/YK2yct35J8I/AAAAAAAAeM4/stIzQCfRT2cHLZNzMPnxxpC1YsXVbeS8ACNcBGAsYHQ/s1600/1621996128028104-0.png"></a></p><p><a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/7627629995084093339#"><img src="https://lh3.googleusercontent.com/-jJ-hOL_8GZg/YK2yXokvQFI/AAAAAAAAeM0/PLUQjbiaHfsRFYvit0UBIWz6vVgwRqp5wCNcBGAsYHQ/s1600/1621996094011888-1.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> esp32 </tag>
            
            <tag> 自動上傳 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>兩個ESP32藍芽主從端互聯</title>
      <link href="/2021/08/28/%E5%85%A9%E5%80%8BESP32%E8%97%8D%E8%8A%BD%E4%B8%BB%E5%BE%9E%E7%AB%AF%E4%BA%92%E8%81%AF/"/>
      <url>/2021/08/28/%E5%85%A9%E5%80%8BESP32%E8%97%8D%E8%8A%BD%E4%B8%BB%E5%BE%9E%E7%AB%AF%E4%BA%92%E8%81%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="兩個ESP32藍芽主從端互聯"><a href="#兩個ESP32藍芽主從端互聯" class="headerlink" title="兩個ESP32藍芽主從端互聯"></a>兩個ESP32藍芽主從端互聯</h1><h6 id="tags-esp32-藍芽"><a href="#tags-esp32-藍芽" class="headerlink" title="tags: esp32 藍芽"></a>tags: <code>esp32</code> <code>藍芽</code></h6><hr><h2 id="從端程式碼可參考-藍芽基本通訊-amp-控制LED-ESP32"><a href="#從端程式碼可參考-藍芽基本通訊-amp-控制LED-ESP32" class="headerlink" title="從端程式碼可參考-藍芽基本通訊&amp;控制LED-ESP32"></a>從端程式碼可參考-<a href="https://draft.blogger.com/blog/post/edit/3809681606094011522/2055229884501562897#">藍芽基本通訊&amp;控制LED-ESP32</a></h2><hr><p>現在利用兩個ESP32的藍芽互相溝通，所以一個要當”主(Master)”,另一個</p><p>要當”從(slave)”。</p><h3 id="主端程式碼"><a href="#主端程式碼" class="headerlink" title="主端程式碼"></a>主端程式碼</h3><p>先將主端程式碼上傳至esp32-1</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#include &lt;BluetoothSerial.h&gt;&#x2F;&#x2F;masterBluetoothSerial myBTmaster; --建立主端物件名const String slave&#x3D;&quot;myBTslave&quot;; --&quot; &quot;裡面是從端藍芽名  const char *PIN&#x3D;&quot;1234&quot;;--預設的pin碼bool connected; --void setup()&#123;    myBTmaster.begin(&quot;bt-master&quot;, true); --設定主端名和設成主控端    Serial.begin(115200);    Serial.printf(&quot;藍芽已啓動,進入master模式\\n&quot;);    Serial.println(&quot;連線中...&quot;);    connected&#x3D;myBTmaster.connect(slave); --檢查是否已連結從端藍芽    if (connected)&#123;        Serial.println(&quot;連線成功&quot;);    &#125;&#125;void loop()&#123;    myBTmaster.println(&quot;1&quot;);    delay(300);    myBTmaster.println(&quot;0&quot;);    delay(300);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="從端程式碼"><a href="#從端程式碼" class="headerlink" title="從端程式碼"></a>從端程式碼</h3><p>再將從端程式碼上傳至esp32-2</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#include &lt;BluetoothSerial.h&gt;&#x2F;&#x2F;slaveBluetoothSerial myBTslave;char incomeData;void setup()&#123;    myBTslave.begin(&quot;bt-slave&quot;); ——建立從端藍芽名稱    pinMode(LED_BUILTIN, OUTPUT);&#125;  void loop()&#123;    incomeData&#x3D;myBTslave.read();    if (incomeData&#x3D;&#x3D;&#39;1&#39;)&#123;        digitalWrite(LED_BUILTIN, HIGH);    &#125;else if (incomeData&#x3D;&#x3D;&#39;0&#39;)&#123;        digitalWrite(LED_BUILTIN, LOW);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>都上傳完之後將兩塊板子reset，如果成功，會看到從端板子上的內建LED閃爍</strong></p>]]></content>
      
      
      <categories>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> esp32 </tag>
            
            <tag> 藍芽 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WiFi網路連接</title>
      <link href="/2021/08/28/WiFi%E7%B6%B2%E8%B7%AF%E9%80%A3%E6%8E%A5/"/>
      <url>/2021/08/28/WiFi%E7%B6%B2%E8%B7%AF%E9%80%A3%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="WiFi網路連接"><a href="#WiFi網路連接" class="headerlink" title="WiFi網路連接"></a>WiFi網路連接</h1><h6 id="tags-micropython-WiFi"><a href="#tags-micropython-WiFi" class="headerlink" title="tags: micropython WiFi"></a>tags: <code>micropython</code> <code>WiFi</code></h6><hr><h2 id="micropython-ESP32下網路連接的模式可分為"><a href="#micropython-ESP32下網路連接的模式可分為" class="headerlink" title="micropython ESP32下網路連接的模式可分為"></a>micropython ESP32下網路連接的模式可分為</h2><ul><li>  STA:做為站點接入WiFi</li><li>  AP:做為熱點,充許其它設備接入</li></ul><h2 id="函式參考-micropython函式筆記本"><a href="#函式參考-micropython函式筆記本" class="headerlink" title="函式參考-micropython函式筆記本"></a>函式參考-<a href="https://draft.blogger.com/blog/post/edit/6280040346040914276/8403042239316796526#">micropython函式筆記本</a></h2><h2 id="熱點模式-AP"><a href="#熱點模式-AP" class="headerlink" title="熱點模式(AP)"></a>熱點模式(AP)</h2><p>熱點模式允許用戶將自己的ESP32配置為熱點，這讓多個ESP32芯片之間的無線連接在不借助外部路由器網絡的情況下成為可能。 </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> networkap <span class="token operator">=</span> network<span class="token punctuation">.</span>wifi<span class="token punctuation">(</span>network<span class="token punctuation">.</span>AP_IF<span class="token punctuation">)</span> <span class="token comment"># 創建熱點</span>ap<span class="token punctuation">.</span>active<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>         <span class="token comment"># 建立熱點</span>ap<span class="token punctuation">.</span>config<span class="token punctuation">(</span>ssid<span class="token operator">=</span><span class="token string">'ESP-AP'</span><span class="token punctuation">)</span> <span class="token comment"># 建立熱點名稱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="站點模式-STA"><a href="#站點模式-STA" class="headerlink" title="站點模式(STA)"></a>站點模式(STA)</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> networkssid<span class="token operator">=</span><span class="token string">"基地台名稱"</span>password<span class="token operator">=</span><span class="token string">"密碼"</span>wifi<span class="token operator">=</span>network<span class="token punctuation">.</span>WLAN<span class="token punctuation">(</span>network<span class="token punctuation">.</span>STA_IF<span class="token punctuation">)</span>wifi<span class="token punctuation">.</span>active<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>wifi<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>ssid<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token keyword">while</span> wifi<span class="token punctuation">.</span>isconnected<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">False</span><span class="token punctuation">:</span>  <span class="token keyword">pass</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"connrcted success"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>wifi<span class="token punctuation">.</span>ifconfig<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="結果顯示"><a href="#結果顯示" class="headerlink" title="結果顯示"></a>結果顯示</h3><p><em><strong>其中’192.168.243.124’就是localIP</strong></em></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">&gt;&gt;&gt; Trueconnrcted success(&#39;192.168.243.124&#39;, &#39;255.255.255.0&#39;, &#39;192.168.243.101&#39;, &#39;192.168.243.101&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> micropython </category>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> esp32 </tag>
            
            <tag> wifi </tag>
            
            <tag> micropython </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>按鈕控制LED-micropython</title>
      <link href="/2021/08/28/%E6%8C%89%E9%88%95%E6%8E%A7%E5%88%B6LED-micropython/"/>
      <url>/2021/08/28/%E6%8C%89%E9%88%95%E6%8E%A7%E5%88%B6LED-micropython/</url>
      
        <content type="html"><![CDATA[<h1 id="按鈕控制LED–micropython"><a href="#按鈕控制LED–micropython" class="headerlink" title="按鈕控制LED–micropython"></a>按鈕控制LED–micropython</h1><h6 id="tags-micropython"><a href="#tags-micropython" class="headerlink" title="tags: micropython"></a>tags: <code>micropython</code></h6><h2 id="接線"><a href="#接線" class="headerlink" title="接線"></a>接線</h2><p><a href="https://i0.wp.com/randomnerdtutorials.com/wp-content/uploads/2019/04/led_button_esp32_bb.png?w=1065&quality=100&strip=all&ssl=1"><img src="https://i0.wp.com/randomnerdtutorials.com/wp-content/uploads/2019/04/led_button_esp32_bb.png?w=1065&quality=100&strip=all&ssl=1"></a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> machine <span class="token keyword">import</span> Pin<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep  led <span class="token operator">=</span> Pin<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> Pin<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>button <span class="token operator">=</span> Pin<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> Pin<span class="token punctuation">.</span>IN<span class="token punctuation">)</span>  <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    led<span class="token punctuation">.</span>value<span class="token punctuation">(</span>button<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>首先從machine載入Pin，從time載入sleep</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> machine <span class="token keyword">import</span> Pin <span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>下面跨號有兩個參數，５是esp32上的GPIO接腳，Pin.OUT表示第5腳位預設為輸出</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">led <span class="token operator">=</span> Pin<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> Pin<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>和上面一樣道理，只不過第二個參數是用Pin.IN表示按鈕是以輸入的方式設定</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">button <span class="token operator">=</span> Pin<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> Pin<span class="token punctuation">.</span>IN<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>當我們按下按鈕時，button.value() 返回 1。因此，這與 led.value(1) 相同。這會將 LED 狀態設置為 1，點亮 LED。當按鈕未被按下時，button.value() 返回 0。因此，我們有 led.value(0)，並且 LED 保持關閉狀態。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">led<span class="token punctuation">.</span>value<span class="token punctuation">(</span>button<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="實作結果"><a href="#實作結果" class="headerlink" title="實作結果"></a>實作結果</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/4boMaNGBm8I" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content>
      
      
      <categories>
          
          <category> micropython </category>
          
          <category> esp32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> micropython </tag>
            
            <tag> led </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MediaPipe+UNO手勢控制伺服馬達</title>
      <link href="/2021/08/28/MediaPipe-UNO%E6%89%8B%E5%8B%A2%E6%8E%A7%E5%88%B6%E4%BC%BA%E6%9C%8D%E9%A6%AC%E9%81%94/"/>
      <url>/2021/08/28/MediaPipe-UNO%E6%89%8B%E5%8B%A2%E6%8E%A7%E5%88%B6%E4%BC%BA%E6%9C%8D%E9%A6%AC%E9%81%94/</url>
      
        <content type="html"><![CDATA[<h1 id="MediaPipe-UNO手勢控制伺服馬達"><a href="#MediaPipe-UNO手勢控制伺服馬達" class="headerlink" title="MediaPipe+UNO手勢控制伺服馬達"></a>MediaPipe+UNO手勢控制伺服馬達</h1><h6 id="tags-mediapipe-arduino-servo"><a href="#tags-mediapipe-arduino-servo" class="headerlink" title="tags: mediapipe arduino servo"></a>tags: <code>mediapipe</code> <code>arduino</code> <code>servo</code></h6><p><strong>參考視頻網址:</strong></p><p><a href="https://draft.blogger.com/blog/post/edit/6959160158145357673/5177980124815283469#">https://youtu.be/9iEPzbG-xLE</a></p><h3 id="MediaPipe"><a href="#MediaPipe" class="headerlink" title="MediaPipe"></a><a href="https://draft.blogger.com/blog/post/edit/6959160158145357673/5177980124815283469#">MediaPipe</a></h3><p>簡單來說是google跨平台而且開源的機器學習運用</p><p>MediaPipe是一款由Google開發並開源的數據流處理機器學習應用開發框架。它是一個基於圖的數據處理管線，用於構建使用了多種形式的數據源，如視頻、音頻、傳感器數據以及任何時間序列數據。 MediaPipe是跨平台的，可以運行在嵌入式平台(樹莓派等)，移動設備(iOS和Android)，工作站和服務器上，並支持移動端GPU加速。使用MediaPipe，可以將機器學習任務構建為一個圖形的模塊表示的數據流管道，可以包括推理模型和流媒體處理功能。</p><h3 id="pinpong"><a href="#pinpong" class="headerlink" title="pinpong"></a><a href="https://draft.blogger.com/blog/post/edit/6959160158145357673/5177980124815283469#">pinpong</a></h3><p>pinpong庫是一套控制開源硬件主控板的Python庫</p><p>，基於Firmata協議並兼容MicroPython語法，5分鐘即可讓你上手使用Python控制開源硬件。</p><p>有興趣可以到<a href="https://draft.blogger.com/blog/post/edit/6959160158145357673/5177980124815283469#">pinpong官網</a>看一下，</p><p>我是使用pycharm，所以首先安裝opencv-python，mediapipe和pinpong這兩個主要的程式庫</p><h2 id="步驟1"><a href="#步驟1" class="headerlink" title="步驟1:"></a>步驟1:</h2><p><strong>先把這個程式庫命名為handutil.py和主程式放一起</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2  <span class="token keyword">import</span> mediapipe <span class="token keyword">as</span> mp    <span class="token keyword">class</span> <span class="token class-name">HandDetector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token triple-quoted-string string">'''     手势识别类  '''</span>   <span class="token keyword">def</span> <span class="token function">_init_</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> max_hands<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> detection_con<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> track_con<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token triple-quoted-string string">'''     初始化     :param mode: 是否静态图片，默认为False     :param max_hands: 最多几只手，默认为2只     :param detection_con: 最小检测信度值，默认为0.5     :param track_con: 最小跟踪信度值，默认为0.5   '''</span>       self<span class="token punctuation">.</span>mode <span class="token operator">=</span> mode      self<span class="token punctuation">.</span>max_hands <span class="token operator">=</span> max_hands      self<span class="token punctuation">.</span>detection_con <span class="token operator">=</span> detection_con      self<span class="token punctuation">.</span>track_con <span class="token operator">=</span> track_con      self<span class="token punctuation">.</span>hands <span class="token operator">=</span> mp<span class="token punctuation">.</span>solutions<span class="token punctuation">.</span>hands<span class="token punctuation">.</span>Hands<span class="token punctuation">(</span>self<span class="token punctuation">.</span>mode<span class="token punctuation">,</span> self<span class="token punctuation">.</span>max_hands<span class="token punctuation">,</span> self<span class="token punctuation">.</span>detection_con<span class="token punctuation">,</span> self<span class="token punctuation">.</span>track_con<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">find_hands</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img<span class="token punctuation">,</span> draw<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token triple-quoted-string string">'''     检测手势     :param img: 视频帧图片     :param draw: 是否画出手势中的节点和连接图     :return: 处理过的视频帧图片   '''</span>   imgRGB <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2RGB<span class="token punctuation">)</span>          <span class="token comment"># 处理图片，检测是否有手势，将数据存进self.results中  </span>        self<span class="token punctuation">.</span>results <span class="token operator">=</span> self<span class="token punctuation">.</span>hands<span class="token punctuation">.</span>process<span class="token punctuation">(</span>imgRGB<span class="token punctuation">)</span>                  <span class="token keyword">if</span> draw<span class="token punctuation">:</span>                      <span class="token keyword">if</span> self<span class="token punctuation">.</span>results<span class="token punctuation">.</span>multi_hand_landmarks<span class="token punctuation">:</span>                          <span class="token keyword">for</span> handlms <span class="token keyword">in</span> self<span class="token punctuation">.</span>results<span class="token punctuation">.</span>multi_hand_landmarks<span class="token punctuation">:</span>                              mp<span class="token punctuation">.</span>solutions<span class="token punctuation">.</span>drawing_utils<span class="token punctuation">.</span>draw_landmarks<span class="token punctuation">(</span>img<span class="token punctuation">,</span> handlms<span class="token punctuation">,</span> mp<span class="token punctuation">.</span>solutions<span class="token punctuation">.</span>hands<span class="token punctuation">.</span>HAND_CONNECTIONS<span class="token punctuation">)</span>          <span class="token keyword">return</span> img        <span class="token keyword">def</span> <span class="token function">find_positions</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img<span class="token punctuation">,</span> hand_no<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token triple-quoted-string string">'''     获取手势数据     :param img: 视频帧图片     :param hand_no: 手编号（默认第1只手）     :return: 手势数据列表，每个数据成员由id, x, y组成，代码这个手势位置编号以及在屏幕中的位置      '''</span>           self<span class="token punctuation">.</span>lmslist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>          <span class="token keyword">if</span> self<span class="token punctuation">.</span>results<span class="token punctuation">.</span>multi_hand_landmarks<span class="token punctuation">:</span>              hand <span class="token operator">=</span> self<span class="token punctuation">.</span>results<span class="token punctuation">.</span>multi_hand_landmarks<span class="token punctuation">[</span>hand_no<span class="token punctuation">]</span>              <span class="token keyword">for</span> <span class="token builtin">id</span><span class="token punctuation">,</span> lm <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>hand<span class="token punctuation">.</span>landmark<span class="token punctuation">)</span><span class="token punctuation">:</span>                  h<span class="token punctuation">,</span> w<span class="token punctuation">,</span> c <span class="token operator">=</span> img<span class="token punctuation">.</span>shape                  cx<span class="token punctuation">,</span> cy <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>lm<span class="token punctuation">.</span>x <span class="token operator">*</span> w<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>lm<span class="token punctuation">.</span>y <span class="token operator">*</span> h<span class="token punctuation">)</span>                  self<span class="token punctuation">.</span>lmslist<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">id</span><span class="token punctuation">,</span> cx<span class="token punctuation">,</span> cy<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>lmslist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="步驟2"><a href="#步驟2" class="headerlink" title="步驟2:"></a>步驟2:</h2><h2 id="複制貼上主程式"><a href="#複制貼上主程式" class="headerlink" title="複制貼上主程式"></a><strong>複制貼上主程式</strong></h2><h2 id="這裡留意一下計算斜角轉成角度的公式"><a href="#這裡留意一下計算斜角轉成角度的公式" class="headerlink" title="*這裡留意一下計算斜角轉成角度的公式"></a>*<strong>這裡留意一下計算斜角轉成角度的公式</strong></h2><h3 id="算出角度"><a href="#算出角度" class="headerlink" title="算出角度:"></a>算出角度:</h3><pre class="line-numbers language-none"><code class="language-none">假如两点坐标分别是（x1，y1）（x2，y2）那么斜率是：（y2-y1）&#x2F;（x2-x1）k&#x3D;(y2-y1)&#x2F;(x2-x1) 其中(x1,y1),(x2,y2) 是已知两点的坐标已知A(x1，y1)，B(x2，y2)  1、若x1&#x3D;x2，则斜率不存在；  2、若x1≠x2，则斜率k&#x3D;(y2－y1)&#x2F;(x2－x1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="算出弧度"><a href="#算出弧度" class="headerlink" title="算出弧度:"></a><strong>算出弧度:</strong></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> mathmath<span class="token punctuation">.</span>degrees<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">**</span>x為一個值<span class="token operator">**</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2  <span class="token keyword">from</span> HandTrackingMoudle <span class="token keyword">import</span> handDetector  <span class="token keyword">import</span> math  <span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token keyword">from</span> pinpong<span class="token punctuation">.</span>board <span class="token keyword">import</span> Board<span class="token punctuation">,</span> Pin<span class="token punctuation">,</span> Servo  <span class="token keyword">import</span> time    Board<span class="token punctuation">(</span><span class="token string">"uno"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>begin<span class="token punctuation">(</span><span class="token punctuation">)</span>  myServo <span class="token operator">=</span> Servo<span class="token punctuation">(</span>Pin<span class="token punctuation">(</span>Pin<span class="token punctuation">.</span>A0<span class="token punctuation">)</span><span class="token punctuation">)</span>    cap <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    detector <span class="token operator">=</span> handDetector<span class="token punctuation">(</span><span class="token punctuation">)</span>  angle <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>      success<span class="token punctuation">,</span> img <span class="token operator">=</span> cap<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>      img <span class="token operator">=</span> detector<span class="token punctuation">.</span>findHands<span class="token punctuation">(</span>img<span class="token punctuation">,</span> draw<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>      lmList <span class="token operator">=</span> detector<span class="token punctuation">.</span>findPosition<span class="token punctuation">(</span>img<span class="token punctuation">,</span> personDraw<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>lmList<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span>lmList<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lmList<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          x1<span class="token punctuation">,</span> y1 <span class="token operator">=</span> lmList<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lmList<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>          x2<span class="token punctuation">,</span> y2 <span class="token operator">=</span> lmList<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lmList<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>          cv2<span class="token punctuation">.</span>circle<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>FILLED<span class="token punctuation">)</span>          cv2<span class="token punctuation">.</span>circle<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token punctuation">(</span>x2<span class="token punctuation">,</span> y2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>FILLED<span class="token punctuation">)</span>          cv2<span class="token punctuation">.</span>line<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x2<span class="token punctuation">,</span> y2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x1 <span class="token operator">-</span> x2<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>              angle <span class="token operator">=</span> math<span class="token punctuation">.</span>degrees<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arctan<span class="token punctuation">(</span><span class="token punctuation">(</span>y2 <span class="token operator">-</span> y1<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>x2 <span class="token operator">-</span> x1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              a <span class="token operator">=</span> <span class="token number">180</span> <span class="token operator">-</span> angle              myServo<span class="token punctuation">.</span>write_angle<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token keyword">if</span> angle <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>              angle <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span>              myServo<span class="token punctuation">.</span>write_angle<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span><span class="token punctuation">)</span>          cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"Image"</span><span class="token punctuation">,</span> img<span class="token punctuation">)</span>      cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="步驟3"><a href="#步驟3" class="headerlink" title="步驟3:"></a>步驟3:</h2><h2 id="執行程式碼"><a href="#執行程式碼" class="headerlink" title="執行程式碼"></a>執行程式碼</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/tTvcI0AKj-U" frameborder="0" loading="lazy" allowfullscreen></iframe></div><hr>]]></content>
      
      
      <categories>
          
          <category> mediapipe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mediapipe </tag>
            
            <tag> arduino </tag>
            
            <tag> servo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
